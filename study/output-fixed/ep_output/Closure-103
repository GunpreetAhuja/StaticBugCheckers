/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/f/Closure-103/src/com/google/javascript/jscomp/DisambiguateProperties.java:278: warning: [MissingOverride] process implements method in CompilerPass; expected @Override
  public void process(Node externs, Node root) {
              ^
    (see http://errorprone.info/bugpattern/MissingOverride)
  Did you mean '@Override public void process(Node externs, Node root) {'?
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/f/Closure-103/src/com/google/javascript/jscomp/DisambiguateProperties.java:328: warning: [MissingOverride] shouldTraverse implements method in Callback; expected @Override
    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
                   ^
    (see http://errorprone.info/bugpattern/MissingOverride)
  Did you mean '@Override public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {'?
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/f/Closure-103/src/com/google/javascript/jscomp/DisambiguateProperties.java:332: warning: [MissingOverride] enterScope implements method in ScopedCallback; expected @Override
    public void enterScope(NodeTraversal t) {
                ^
    (see http://errorprone.info/bugpattern/MissingOverride)
  Did you mean '@Override public void enterScope(NodeTraversal t) {'?
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/f/Closure-103/src/com/google/javascript/jscomp/DisambiguateProperties.java:340: warning: [MissingOverride] exitScope implements method in ScopedCallback; expected @Override
    public void exitScope(NodeTraversal t) {
                ^
    (see http://errorprone.info/bugpattern/MissingOverride)
  Did you mean '@Override public void exitScope(NodeTraversal t) {'?
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/f/Closure-103/src/com/google/javascript/jscomp/DisambiguateProperties.java:755: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
      while (objType != null && objType.getImplicitPrototype() != objType) {
                                                               ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'while (objType != null && !Objects.equals(objType.getImplicitPrototype(), objType)) {' or 'while (objType != null && !objType.getImplicitPrototype().equals(objType)) {'?
5 warnings
