[
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getPassCount implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public int getPassCount() {",
        " Mark": "               ^",
        " Line": 266
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getPlot implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public CategoryPlot getPlot() {",
        " Mark": "                        ^",
        " Line": 279
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setPlot implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public void setPlot(CategoryPlot plot) {",
        " Mark": "                ^",
        " Line": 292
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getItemLabelGenerator implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public CategoryItemLabelGenerator getItemLabelGenerator(int row,",
        " Mark": "                                      ^",
        " Line": 315
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getSeriesItemLabelGenerator implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public CategoryItemLabelGenerator getSeriesItemLabelGenerator(int series) {",
        " Mark": "                                      ^",
        " Line": 334
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setSeriesItemLabelGenerator implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public void setSeriesItemLabelGenerator(int series,",
        " Mark": "                ^",
        " Line": 348
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setSeriesItemLabelGenerator implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public void setSeriesItemLabelGenerator(int series,",
        " Mark": "                ^",
        " Line": 365
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getBaseItemLabelGenerator implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public CategoryItemLabelGenerator getBaseItemLabelGenerator() {",
        " Mark": "                                      ^",
        " Line": 380
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setBaseItemLabelGenerator implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public void setBaseItemLabelGenerator(",
        " Mark": "                ^",
        " Line": 392
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setBaseItemLabelGenerator implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public void setBaseItemLabelGenerator(",
        " Mark": "                ^",
        " Line": 408
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getToolTipGenerator implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public CategoryToolTipGenerator getToolTipGenerator(int row, int column,",
        " Mark": "                                    ^",
        " Line": 431
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getSeriesToolTipGenerator implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public CategoryToolTipGenerator getSeriesToolTipGenerator(int series) {",
        " Mark": "                                    ^",
        " Line": 452
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setSeriesToolTipGenerator implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public void setSeriesToolTipGenerator(int series,",
        " Mark": "                ^",
        " Line": 465
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setSeriesToolTipGenerator implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public void setSeriesToolTipGenerator(int series,",
        " Mark": "                ^",
        " Line": 483
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getBaseToolTipGenerator implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public CategoryToolTipGenerator getBaseToolTipGenerator() {",
        " Mark": "                                    ^",
        " Line": 498
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setBaseToolTipGenerator implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public void setBaseToolTipGenerator(CategoryToolTipGenerator generator) {",
        " Mark": "                ^",
        " Line": 510
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setBaseToolTipGenerator implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public void setBaseToolTipGenerator(CategoryToolTipGenerator generator,",
        " Mark": "                ^",
        " Line": 525
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getURLGenerator implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public CategoryURLGenerator getURLGenerator(int row, int column, boolean",
        " Mark": "                                ^",
        " Line": 546
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getSeriesURLGenerator implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public CategoryURLGenerator getSeriesURLGenerator(int series) {",
        " Mark": "                                ^",
        " Line": 565
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setSeriesURLGenerator implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public void setSeriesURLGenerator(int series,",
        " Mark": "                ^",
        " Line": 578
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setSeriesURLGenerator implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public void setSeriesURLGenerator(int series,",
        " Mark": "                ^",
        " Line": 595
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getBaseURLGenerator implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public CategoryURLGenerator getBaseURLGenerator() {",
        " Mark": "                                ^",
        " Line": 610
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setBaseURLGenerator implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public void setBaseURLGenerator(CategoryURLGenerator generator) {",
        " Mark": "                ^",
        " Line": 621
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setBaseURLGenerator implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public void setBaseURLGenerator(CategoryURLGenerator generator,",
        " Mark": "                ^",
        " Line": 635
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "addAnnotation implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public void addAnnotation(CategoryAnnotation annotation) {",
        " Mark": "                ^",
        " Line": 654
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "addAnnotation implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public void addAnnotation(CategoryAnnotation annotation, Layer layer) {",
        " Mark": "                ^",
        " Line": 667
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "removeAnnotation implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public boolean removeAnnotation(CategoryAnnotation annotation) {",
        " Mark": "                   ^",
        " Line": 696
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "ShortCircuitBoolean",
        "  Msg": "Prefer the short-circuiting boolean operators && and || to & and |.",
        " Code": "        removed = removed & this.backgroundAnnotations.remove(annotation);",
        " Mark": "                          ^",
        " Line": 698
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "removeAnnotations implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public void removeAnnotations() {",
        " Mark": "                ^",
        " Line": 709
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLegendItemLabelGenerator implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public CategorySeriesLabelGenerator getLegendItemLabelGenerator() {",
        " Mark": "                                        ^",
        " Line": 722
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setLegendItemLabelGenerator implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public void setLegendItemLabelGenerator(",
        " Mark": "                ^",
        " Line": 734
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLegendItemToolTipGenerator implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public CategorySeriesLabelGenerator getLegendItemToolTipGenerator() {",
        " Mark": "                                        ^",
        " Line": 750
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setLegendItemToolTipGenerator implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public void setLegendItemToolTipGenerator(",
        " Mark": "                ^",
        " Line": 762
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLegendItemURLGenerator implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public CategorySeriesLabelGenerator getLegendItemURLGenerator() {",
        " Mark": "                                        ^",
        " Line": 775
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setLegendItemURLGenerator implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public void setLegendItemURLGenerator(",
        " Mark": "                ^",
        " Line": 787
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "initialise implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public CategoryItemRendererState initialise(Graphics2D g2,",
        " Mark": "                                     ^",
        " Line": 856
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "findRangeBounds implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public Range findRangeBounds(CategoryDataset dataset) {",
        " Mark": "                 ^",
        " Line": 901
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getItemMiddle implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public double getItemMiddle(Comparable rowKey, Comparable columnKey,",
        " Mark": "                  ^",
        " Line": 952
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "drawBackground implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public void drawBackground(Graphics2D g2,",
        " Mark": "                ^",
        " Line": 968
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "drawOutline implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public void drawOutline(Graphics2D g2,",
        " Mark": "                ^",
        " Line": 985
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "drawDomainLine implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public void drawDomainLine(Graphics2D g2, CategoryPlot plot,",
        " Mark": "                ^",
        " Line": 1013
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                        ^",
        " Line": 1025
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (orientation == PlotOrientation.VERTICAL) {",
        " Mark": "                             ^",
        " Line": 1029
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "drawRangeLine implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public void drawRangeLine(Graphics2D g2, CategoryPlot plot, ValueAxis axis,",
        " Mark": "                ^",
        " Line": 1056
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                        ^",
        " Line": 1067
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (orientation == PlotOrientation.VERTICAL) {",
        " Mark": "                             ^",
        " Line": 1071
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "drawDomainMarker implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public void drawDomainMarker(Graphics2D g2,",
        " Mark": "                ^",
        " Line": 1094
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                            ^",
        " Line": 1118
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            else if (orientation == PlotOrientation.VERTICAL) {",
        " Mark": "                                 ^",
        " Line": 1122
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                            ^",
        " Line": 1139
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            else if (orientation == PlotOrientation.VERTICAL) {",
        " Mark": "                                 ^",
        " Line": 1143
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "drawRangeMarker implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public void drawRangeMarker(Graphics2D g2,",
        " Mark": "                ^",
        " Line": 1180
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                            ^",
        " Line": 1203
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            else if (orientation == PlotOrientation.VERTICAL) {",
        " Mark": "                                 ^",
        " Line": 1207
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                            ^",
        " Line": 1254
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            else if (orientation == PlotOrientation.VERTICAL) {",
        " Mark": "                                 ^",
        " Line": 1262
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                if (orientation == PlotOrientation.VERTICAL) {",
        " Mark": "                                ^",
        " Line": 1286
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                        ^",
        " Line": 1359
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (orientation == PlotOrientation.VERTICAL) {",
        " Mark": "                             ^",
        " Line": 1363
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                        ^",
        " Line": 1393
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (orientation == PlotOrientation.VERTICAL) {",
        " Mark": "                             ^",
        " Line": 1397
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLegendItem implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public LegendItem getLegendItem(int datasetIndex, int series) {",
        " Mark": "                      ^",
        " Line": 1417
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in AbstractRenderer; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 1469
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in AbstractRenderer; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 1531
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDrawingSupplier implements method in AbstractRenderer; expected @Override",
        " Code": "    public DrawingSupplier getDrawingSupplier() {",
        " Mark": "                           ^",
        " Line": 1541
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "drawAnnotations implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public void drawAnnotations(Graphics2D g2, Rectangle2D dataArea,",
        " Mark": "                ^",
        " Line": 1647
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "clone overrides method in AbstractRenderer; expected @Override",
        " Code": "    public Object clone() throws CloneNotSupportedException {",
        " Mark": "                  ^",
        " Line": 1680
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLegendItems implements method in LegendItemSource; expected @Override",
        " Code": "    public LegendItemCollection getLegendItems() {",
        " Mark": "                                ^",
        " Line": 1790
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (getPlot().getOrientation() == PlotOrientation.VERTICAL) {",
        " Mark": "                                           ^",
        " Line": 1872
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "createHotSpotShape implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public Shape createHotSpotShape(Graphics2D g2, Rectangle2D dataArea,",
        " Mark": "                 ^",
        " Line": 1912
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "createHotSpotBounds implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public Rectangle2D createHotSpotBounds(Graphics2D g2, Rectangle2D dataArea,",
        " Mark": "                       ^",
        " Line": 1937
    },
    {
        " Proj": "Chart-1",
        "Class": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hitTest implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public boolean hitTest(double xx, double yy, Graphics2D g2,",
        " Mark": "                   ^",
        " Line": 1979
    },
    {
        " Proj": "Chart-10",
        "Class": "org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "generateToolTipFragment implements method in ToolTipTagFragmentGenerator; expected @Override",
        " Code": "    public String generateToolTipFragment(String toolTipText) {",
        " Mark": "                  ^",
        " Line": 64
    },
    {
        " Proj": "Chart-11",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Chart-12",
        "Class": "org.jfree.chart.plot.MultiplePiePlot",
        " Type": "warning",
        "  Cat": "EqualsHashCode",
        "  Msg": "Classes that override equals should also override hashCode.",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 561
    },
    {
        " Proj": "Chart-12",
        "Class": "org.jfree.chart.plot.MultiplePiePlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getPlotType implements method in Plot; expected @Override",
        " Code": "    public String getPlotType() {",
        " Mark": "                  ^",
        " Line": 329
    },
    {
        " Proj": "Chart-12",
        "Class": "org.jfree.chart.plot.MultiplePiePlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "draw implements method in Plot; expected @Override",
        " Code": "    public void draw(Graphics2D g2,",
        " Mark": "                ^",
        " Line": 344
    },
    {
        " Proj": "Chart-12",
        "Class": "org.jfree.chart.plot.MultiplePiePlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (this.dataExtractOrder == TableOrder.BY_ROW) {",
        " Mark": "                                  ^",
        " Line": 364
    },
    {
        " Proj": "Chart-12",
        "Class": "org.jfree.chart.plot.MultiplePiePlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (this.dataExtractOrder == TableOrder.BY_ROW) {",
        " Mark": "                                      ^",
        " Line": 400
    },
    {
        " Proj": "Chart-12",
        "Class": "org.jfree.chart.plot.MultiplePiePlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (this.dataExtractOrder == TableOrder.BY_ROW) {",
        " Mark": "                                  ^",
        " Line": 473
    },
    {
        " Proj": "Chart-12",
        "Class": "org.jfree.chart.plot.MultiplePiePlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLegendItems overrides method in Plot; expected @Override",
        " Code": "    public LegendItemCollection getLegendItems() {",
        " Mark": "                                ^",
        " Line": 509
    },
    {
        " Proj": "Chart-12",
        "Class": "org.jfree.chart.plot.MultiplePiePlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (this.dataExtractOrder == TableOrder.BY_ROW) {",
        " Mark": "                                      ^",
        " Line": 517
    },
    {
        " Proj": "Chart-12",
        "Class": "org.jfree.chart.plot.MultiplePiePlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            else if (this.dataExtractOrder == TableOrder.BY_COLUMN) {",
        " Mark": "                                           ^",
        " Line": 520
    },
    {
        " Proj": "Chart-12",
        "Class": "org.jfree.chart.plot.MultiplePiePlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Plot; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 561
    },
    {
        " Proj": "Chart-12",
        "Class": "org.jfree.chart.plot.MultiplePiePlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (this.dataExtractOrder != that.dataExtractOrder) {",
        " Mark": "                                  ^",
        " Line": 569
    },
    {
        " Proj": "Chart-13",
        "Class": "org.jfree.chart.block.BorderArrangement",
        " Type": "warning",
        "  Cat": "EqualsHashCode",
        "  Msg": "Classes that override equals should also override hashCode.",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 509
    },
    {
        " Proj": "Chart-13",
        "Class": "org.jfree.chart.block.BorderArrangement",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in Arrangement; expected @Override",
        " Code": "    public void add(Block block, Object key) {",
        " Mark": "                ^",
        " Line": 96
    },
    {
        " Proj": "Chart-13",
        "Class": "org.jfree.chart.block.BorderArrangement",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (edge == RectangleEdge.TOP) {",
        " Mark": "                     ^",
        " Line": 103
    },
    {
        " Proj": "Chart-13",
        "Class": "org.jfree.chart.block.BorderArrangement",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            else if (edge == RectangleEdge.BOTTOM) {",
        " Mark": "                          ^",
        " Line": 106
    },
    {
        " Proj": "Chart-13",
        "Class": "org.jfree.chart.block.BorderArrangement",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            else if (edge == RectangleEdge.LEFT) {",
        " Mark": "                          ^",
        " Line": 109
    },
    {
        " Proj": "Chart-13",
        "Class": "org.jfree.chart.block.BorderArrangement",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            else if (edge == RectangleEdge.RIGHT) {",
        " Mark": "                          ^",
        " Line": 112
    },
    {
        " Proj": "Chart-13",
        "Class": "org.jfree.chart.block.BorderArrangement",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "arrange implements method in Arrangement; expected @Override",
        " Code": "    public Size2D arrange(BlockContainer container,",
        " Mark": "                  ^",
        " Line": 128
    },
    {
        " Proj": "Chart-13",
        "Class": "org.jfree.chart.block.BorderArrangement",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (w == LengthConstraintType.NONE) {",
        " Mark": "              ^",
        " Line": 136
    },
    {
        " Proj": "Chart-13",
        "Class": "org.jfree.chart.block.BorderArrangement",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (h == LengthConstraintType.NONE) {",
        " Mark": "                  ^",
        " Line": 137
    },
    {
        " Proj": "Chart-13",
        "Class": "org.jfree.chart.block.BorderArrangement",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            else if (h == LengthConstraintType.FIXED) {",
        " Mark": "                       ^",
        " Line": 140
    },
    {
        " Proj": "Chart-13",
        "Class": "org.jfree.chart.block.BorderArrangement",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            else if (h == LengthConstraintType.RANGE) {",
        " Mark": "                       ^",
        " Line": 143
    },
    {
        " Proj": "Chart-13",
        "Class": "org.jfree.chart.block.BorderArrangement",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (w == LengthConstraintType.FIXED) {",
        " Mark": "                   ^",
        " Line": 147
    },
    {
        " Proj": "Chart-13",
        "Class": "org.jfree.chart.block.BorderArrangement",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (h == LengthConstraintType.NONE) {",
        " Mark": "                  ^",
        " Line": 148
    },
    {
        " Proj": "Chart-13",
        "Class": "org.jfree.chart.block.BorderArrangement",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            else if (h == LengthConstraintType.FIXED) {",
        " Mark": "                       ^",
        " Line": 151
    },
    {
        " Proj": "Chart-13",
        "Class": "org.jfree.chart.block.BorderArrangement",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            else if (h == LengthConstraintType.RANGE) {",
        " Mark": "                       ^",
        " Line": 154
    },
    {
        " Proj": "Chart-13",
        "Class": "org.jfree.chart.block.BorderArrangement",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (w == LengthConstraintType.RANGE) {",
        " Mark": "                   ^",
        " Line": 158
    },
    {
        " Proj": "Chart-13",
        "Class": "org.jfree.chart.block.BorderArrangement",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (h == LengthConstraintType.NONE) {",
        " Mark": "                  ^",
        " Line": 159
    },
    {
        " Proj": "Chart-13",
        "Class": "org.jfree.chart.block.BorderArrangement",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            else if (h == LengthConstraintType.FIXED) {",
        " Mark": "                       ^",
        " Line": 162
    },
    {
        " Proj": "Chart-13",
        "Class": "org.jfree.chart.block.BorderArrangement",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            else if (h == LengthConstraintType.RANGE) {",
        " Mark": "                       ^",
        " Line": 165
    },
    {
        " Proj": "Chart-13",
        "Class": "org.jfree.chart.block.BorderArrangement",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "clear implements method in Arrangement; expected @Override",
        " Code": "    public void clear() {",
        " Mark": "                ^",
        " Line": 494
    },
    {
        " Proj": "Chart-13",
        "Class": "org.jfree.chart.block.BorderArrangement",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 509
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "EqualsHashCode",
        "  Msg": "Classes that override equals should also override hashCode.",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 4711
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getPlotType implements method in Plot; expected @Override",
        " Code": "    public String getPlotType() {",
        " Mark": "                  ^",
        " Line": 608
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getOrientation implements method in Zoomable; expected @Override",
        " Code": "    public PlotOrientation getOrientation() {",
        " Mark": "                           ^",
        " Line": 619
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (orientation != this.orientation) {",
        " Mark": "                        ^",
        " Line": 635
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        this.datasetToDomainAxisMap.put(new Integer(index), ",
        " Mark": "                                        ^",
        " Line": 1354
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                new Integer(axisIndex));",
        " Mark": "                ^",
        " Line": 1355
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        this.datasetToRangeAxisMap.put(new Integer(index), ",
        " Mark": "                                       ^",
        " Line": 1370
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                new Integer(axisIndex));",
        " Mark": "                ^",
        " Line": 1371
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        Integer key = new Integer(index);",
        " Mark": "                      ^",
        " Line": 2125
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (layer == Layer.FOREGROUND) {",
        " Mark": "                  ^",
        " Line": 2196
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                    new Integer(index));",
        " Mark": "                    ^",
        " Line": 2198
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                this.foregroundDomainMarkers.put(new Integer(index), markers);",
        " Mark": "                                                 ^",
        " Line": 2201
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (layer == Layer.BACKGROUND) {",
        " Mark": "                       ^",
        " Line": 2205
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                    new Integer(index));",
        " Mark": "                    ^",
        " Line": 2207
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                this.backgroundDomainMarkers.put(new Integer(index), markers);",
        " Mark": "                                                 ^",
        " Line": 2210
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (layer == Layer.FOREGROUND) {",
        " Mark": "                  ^",
        " Line": 2285
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "            markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(",
        " Mark": "                                                                   ^",
        " Line": 2286
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "            markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(",
        " Mark": "                                                                   ^",
        " Line": 2290
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (layer == Layer.FOREGROUND) {",
        " Mark": "                  ^",
        " Line": 2397
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                    new Integer(index));",
        " Mark": "                    ^",
        " Line": 2399
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                this.foregroundRangeMarkers.put(new Integer(index), markers);",
        " Mark": "                                                ^",
        " Line": 2402
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (layer == Layer.BACKGROUND) {",
        " Mark": "                       ^",
        " Line": 2406
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                    new Integer(index));",
        " Mark": "                    ^",
        " Line": 2408
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                this.backgroundRangeMarkers.put(new Integer(index), markers);",
        " Mark": "                                                ^",
        " Line": 2411
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        Integer key = new Integer(index);",
        " Mark": "                      ^",
        " Line": 2428
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (layer == Layer.FOREGROUND) {",
        " Mark": "                  ^",
        " Line": 2524
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "            markers = (ArrayList) this.foregroundRangeMarkers.get(new Integer(",
        " Mark": "                                                                  ^",
        " Line": 2525
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "            markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(",
        " Mark": "                                                                  ^",
        " Line": 2529
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (this.orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                                 ^",
        " Line": 2670
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            else if (this.orientation == PlotOrientation.VERTICAL) {",
        " Mark": "                                      ^",
        " Line": 2676
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (this.orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                                 ^",
        " Line": 2717
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            else if (this.orientation == PlotOrientation.VERTICAL) {",
        " Mark": "                                      ^",
        " Line": 2723
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "draw implements method in Plot; expected @Override",
        " Code": "    public void draw(Graphics2D g2,",
        " Mark": "                ^",
        " Line": 2756
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                if (orient == PlotOrientation.VERTICAL) {",
        " Mark": "                           ^",
        " Line": 2807
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                if (orient == PlotOrientation.VERTICAL) {",
        " Mark": "                           ^",
        " Line": 2820
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (order == DatasetRenderingOrder.FORWARD) {",
        " Mark": "                  ^",
        " Line": 2882
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (order == DatasetRenderingOrder.REVERSE) {",
        " Mark": "                       ^",
        " Line": 2914
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (orient == PlotOrientation.VERTICAL) {",
        " Mark": "                       ^",
        " Line": 2958
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (orient == PlotOrientation.VERTICAL) {",
        " Mark": "                       ^",
        " Line": 2980
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "drawBackground overrides method in Plot; expected @Override",
        " Code": "    public void drawBackground(Graphics2D g2, Rectangle2D area) {",
        " Mark": "                ^",
        " Line": 3020
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                if (this.orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                                     ^",
        " Line": 3064
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                if (this.orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                                     ^",
        " Line": 3080
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                if (this.orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                                     ^",
        " Line": 3095
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                if (this.orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                                     ^",
        " Line": 3110
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (seriesOrder == SeriesRenderingOrder.REVERSE) {",
        " Mark": "                            ^",
        " Line": 3335
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                new Integer(index));",
        " Mark": "                ^",
        " Line": 3402
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "            = (Integer) this.datasetToRangeAxisMap.get(new Integer(index));",
        " Mark": "                                                       ^",
        " Line": 3429
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        Integer key = new Integer(index);",
        " Mark": "                      ^",
        " Line": 3666
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (layer == Layer.FOREGROUND) {",
        " Mark": "                  ^",
        " Line": 3667
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (layer == Layer.BACKGROUND) {",
        " Mark": "                       ^",
        " Line": 3670
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        Integer key = new Integer(index);",
        " Mark": "                      ^",
        " Line": 3692
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (layer == Layer.FOREGROUND) {",
        " Mark": "                  ^",
        " Line": 3693
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (layer == Layer.BACKGROUND) {",
        " Mark": "                       ^",
        " Line": 3696
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (getOrientation() == PlotOrientation.HORIZONTAL) {",
        " Mark": "                             ^",
        " Line": 3720
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (orientation == PlotOrientation.VERTICAL) {",
        " Mark": "                            ^",
        " Line": 3753
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (getOrientation() == PlotOrientation.HORIZONTAL) {",
        " Mark": "                             ^",
        " Line": 3785
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                            ^",
        " Line": 3819
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "handleClick overrides method in Plot; expected @Override",
        " Code": "    public void handleClick(int x, int y, PlotRenderingInfo info) {",
        " Mark": "                ^",
        " Line": 3845
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                    new Integer(i));",
        " Mark": "                    ^",
        " Line": 3882
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                    new Integer(i));",
        " Mark": "                    ^",
        " Line": 3912
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDataRange implements method in ValueAxisPlot; expected @Override",
        " Code": "    public Range getDataRange(ValueAxis axis) {",
        " Mark": "                 ^",
        " Line": 3978
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                    new Integer(domainIndex)));",
        " Mark": "                    ^",
        " Line": 3989
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                    new Integer(rangeIndex)));",
        " Mark": "                    ^",
        " Line": 3997
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "datasetChanged overrides method in Plot; expected @Override",
        " Code": "    public void datasetChanged(DatasetChangeEvent event) {",
        " Mark": "                ^",
        " Line": 4038
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "rendererChanged implements method in RendererChangeListener; expected @Override",
        " Code": "    public void rendererChanged(RendererChangeEvent event) {",
        " Mark": "                ^",
        " Line": 4056
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "zoomDomainAxes implements method in Zoomable; expected @Override",
        " Code": "    public void zoomDomainAxes(double factor, PlotRenderingInfo info,",
        " Mark": "                ^",
        " Line": 4462
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "zoomDomainAxes implements method in Zoomable; expected @Override",
        " Code": "    public void zoomDomainAxes(double factor, PlotRenderingInfo info,",
        " Mark": "                ^",
        " Line": 4480
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                    if (this.orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                                         ^",
        " Line": 4491
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "zoomDomainAxes implements method in Zoomable; expected @Override",
        " Code": "    public void zoomDomainAxes(double lowerPercent, double upperPercent,",
        " Mark": "                ^",
        " Line": 4519
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "zoomRangeAxes implements method in Zoomable; expected @Override",
        " Code": "    public void zoomRangeAxes(double factor, PlotRenderingInfo info,",
        " Mark": "                ^",
        " Line": 4538
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "zoomRangeAxes implements method in Zoomable; expected @Override",
        " Code": "    public void zoomRangeAxes(double factor, PlotRenderingInfo info,",
        " Mark": "                ^",
        " Line": 4557
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                    if (this.orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                                         ^",
        " Line": 4568
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "zoomRangeAxes implements method in Zoomable; expected @Override",
        " Code": "    public void zoomRangeAxes(double lowerPercent, double upperPercent,",
        " Mark": "                ^",
        " Line": 4592
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isDomainZoomable implements method in Zoomable; expected @Override",
        " Code": "    public boolean isDomainZoomable() {",
        " Mark": "                   ^",
        " Line": 4610
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isRangeZoomable implements method in Zoomable; expected @Override",
        " Code": "    public boolean isRangeZoomable() {",
        " Mark": "                   ^",
        " Line": 4622
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLegendItems overrides method in Plot; expected @Override",
        " Code": "    public LegendItemCollection getLegendItems() {",
        " Mark": "                                ^",
        " Line": 4673
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Plot; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 4711
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (this.orientation != that.orientation) {",
        " Mark": "                             ^",
        " Line": 4724
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "clone overrides method in Plot; expected @Override",
        " Code": "    public Object clone() throws CloneNotSupportedException {",
        " Mark": "                  ^",
        " Line": 4896
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "EqualsHashCode",
        "  Msg": "Classes that override equals should also override hashCode.",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 3870
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getPlotType implements method in Plot; expected @Override",
        " Code": "    public String getPlotType() {",
        " Mark": "                  ^",
        " Line": 532
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getOrientation implements method in Zoomable; expected @Override",
        " Code": "    public PlotOrientation getOrientation() {",
        " Mark": "                           ^",
        " Line": 543
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        this.datasetToDomainAxisMap.set(index, new Integer(axisIndex));  ",
        " Mark": "                                               ^",
        " Line": 1241
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        this.datasetToRangeAxisMap.set(index, new Integer(axisIndex));",
        " Mark": "                                              ^",
        " Line": 1274
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLegendItems overrides method in Plot; expected @Override",
        " Code": "    public LegendItemCollection getLegendItems() {",
        " Mark": "                                ^",
        " Line": 1767
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "handleClick overrides method in Plot; expected @Override",
        " Code": "    public void handleClick(int x, int y, PlotRenderingInfo info) {",
        " Mark": "                ^",
        " Line": 1801
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (this.orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                                 ^",
        " Line": 1807
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            else if (this.orientation == PlotOrientation.VERTICAL) {",
        " Mark": "                                      ^",
        " Line": 1810
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "zoom overrides method in Plot; expected @Override",
        " Code": "    public void zoom(double percent) {",
        " Mark": "                ^",
        " Line": 1832
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "datasetChanged overrides method in Plot; expected @Override",
        " Code": "    public void datasetChanged(DatasetChangeEvent event) {",
        " Mark": "                ^",
        " Line": 1853
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "rendererChanged implements method in RendererChangeListener; expected @Override",
        " Code": "    public void rendererChanged(RendererChangeEvent event) {",
        " Mark": "                ^",
        " Line": 1878
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (layer == Layer.FOREGROUND) {",
        " Mark": "                  ^",
        " Line": 1971
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                    new Integer(index));",
        " Mark": "                    ^",
        " Line": 1973
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                this.foregroundDomainMarkers.put(new Integer(index), markers);",
        " Mark": "                                                 ^",
        " Line": 1976
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (layer == Layer.BACKGROUND) {",
        " Mark": "                       ^",
        " Line": 1980
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                    new Integer(index));",
        " Mark": "                    ^",
        " Line": 1982
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                this.backgroundDomainMarkers.put(new Integer(index), markers);",
        " Mark": "                                                 ^",
        " Line": 1985
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        Integer key = new Integer(index);",
        " Mark": "                      ^",
        " Line": 2045
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (layer == Layer.FOREGROUND) {",
        " Mark": "                  ^",
        " Line": 2046
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (layer == Layer.BACKGROUND) {",
        " Mark": "                       ^",
        " Line": 2049
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        Integer key = new Integer(index);",
        " Mark": "                      ^",
        " Line": 2066
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (layer == Layer.FOREGROUND) {",
        " Mark": "                  ^",
        " Line": 2158
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "            markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(",
        " Mark": "                                                                   ^",
        " Line": 2159
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "            markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(",
        " Mark": "                                                                   ^",
        " Line": 2163
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (layer == Layer.FOREGROUND) {",
        " Mark": "                  ^",
        " Line": 2242
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                    new Integer(index));",
        " Mark": "                    ^",
        " Line": 2244
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                this.foregroundRangeMarkers.put(new Integer(index), markers);",
        " Mark": "                                                ^",
        " Line": 2247
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (layer == Layer.BACKGROUND) {",
        " Mark": "                       ^",
        " Line": 2251
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                    new Integer(index));",
        " Mark": "                    ^",
        " Line": 2253
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                this.backgroundRangeMarkers.put(new Integer(index), markers);",
        " Mark": "                                                ^",
        " Line": 2256
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        Integer key = new Integer(index);",
        " Mark": "                      ^",
        " Line": 2318
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (layer == Layer.FOREGROUND) {",
        " Mark": "                  ^",
        " Line": 2319
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (layer == Layer.BACKGROUND) {",
        " Mark": "                       ^",
        " Line": 2322
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        Integer key = new Integer(index);",
        " Mark": "                      ^",
        " Line": 2339
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (layer == Layer.FOREGROUND) {",
        " Mark": "                  ^",
        " Line": 2443
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "            markers = (ArrayList) this.foregroundRangeMarkers.get(new Integer(",
        " Mark": "                                                                  ^",
        " Line": 2444
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "            markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(",
        " Mark": "                                                                  ^",
        " Line": 2448
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (this.orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                                 ^",
        " Line": 2722
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            else if (this.orientation == PlotOrientation.VERTICAL) {",
        " Mark": "                                      ^",
        " Line": 2728
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (this.orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                                 ^",
        " Line": 2777
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            else if (this.orientation == PlotOrientation.VERTICAL) {",
        " Mark": "                                      ^",
        " Line": 2783
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "draw implements method in Plot; expected @Override",
        " Code": "    public void draw(Graphics2D g2, Rectangle2D area, ",
        " Mark": "                ^",
        " Line": 2836
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (order == DatasetRenderingOrder.FORWARD) {",
        " Mark": "                  ^",
        " Line": 2913
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "drawBackground overrides method in Plot; expected @Override",
        " Code": "    public void drawBackground(Graphics2D g2, Rectangle2D area) {",
        " Mark": "                ^",
        " Line": 3018
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                if (this.columnRenderingOrder == SortOrder.ASCENDING) {",
        " Mark": "                                              ^",
        " Line": 3148
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                        if (this.rowRenderingOrder == SortOrder.ASCENDING) {",
        " Mark": "                                                   ^",
        " Line": 3150
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                        if (this.rowRenderingOrder == SortOrder.ASCENDING) {",
        " Mark": "                                                   ^",
        " Line": 3168
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (this.orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                             ^",
        " Line": 3359
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (this.orientation == PlotOrientation.VERTICAL) {",
        " Mark": "                                  ^",
        " Line": 3363
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                        ^",
        " Line": 3394
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDataRange implements method in ValueAxisPlot; expected @Override",
        " Code": "    public Range getDataRange(ValueAxis axis) {",
        " Mark": "                 ^",
        " Line": 3421
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (axis == getRangeAxis()) {",
        " Mark": "                      ^",
        " Line": 3430
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isDomainZoomable implements method in Zoomable; expected @Override",
        " Code": "    public boolean isDomainZoomable() {",
        " Mark": "                   ^",
        " Line": 3695
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isRangeZoomable implements method in Zoomable; expected @Override",
        " Code": "    public boolean isRangeZoomable() {",
        " Mark": "                   ^",
        " Line": 3706
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "zoomDomainAxes implements method in Zoomable; expected @Override",
        " Code": "    public void zoomDomainAxes(double factor, PlotRenderingInfo state, ",
        " Mark": "                ^",
        " Line": 3718
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "zoomDomainAxes implements method in Zoomable; expected @Override",
        " Code": "    public void zoomDomainAxes(double lowerPercent, double upperPercent, ",
        " Mark": "                ^",
        " Line": 3732
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "zoomDomainAxes implements method in Zoomable; expected @Override",
        " Code": "    public void zoomDomainAxes(double factor, PlotRenderingInfo info,",
        " Mark": "                ^",
        " Line": 3750
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "zoomRangeAxes implements method in Zoomable; expected @Override",
        " Code": "    public void zoomRangeAxes(double factor, PlotRenderingInfo state, ",
        " Mark": "                ^",
        " Line": 3762
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "zoomRangeAxes implements method in Zoomable; expected @Override",
        " Code": "    public void zoomRangeAxes(double factor, PlotRenderingInfo info,",
        " Mark": "                ^",
        " Line": 3781
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                    if (this.orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                                         ^",
        " Line": 3792
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "zoomRangeAxes implements method in Zoomable; expected @Override",
        " Code": "    public void zoomRangeAxes(double lowerPercent, double upperPercent, ",
        " Mark": "                ^",
        " Line": 3814
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Plot; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 3870
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (this.orientation != that.orientation) {",
        " Mark": "                             ^",
        " Line": 3884
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (this.renderingOrder != that.renderingOrder) {",
        " Mark": "                                ^",
        " Line": 3916
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (this.columnRenderingOrder != that.columnRenderingOrder) {",
        " Mark": "                                      ^",
        " Line": 3919
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (this.rowRenderingOrder != that.rowRenderingOrder) {",
        " Mark": "                                   ^",
        " Line": 3922
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (this.domainGridlinePosition != that.domainGridlinePosition) {",
        " Mark": "                                        ^",
        " Line": 3928
    },
    {
        " Proj": "Chart-14",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "clone overrides method in Plot; expected @Override",
        " Code": "    public Object clone() throws CloneNotSupportedException {",
        " Mark": "                  ^",
        " Line": 4005
    },
    {
        " Proj": "Chart-15",
        "Class": "org.jfree.chart.plot.PiePlot",
        " Type": "warning",
        "  Cat": "EqualsHashCode",
        "  Msg": "Classes that override equals should also override hashCode.",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 2802
    },
    {
        " Proj": "Chart-15",
        "Class": "org.jfree.chart.plot.PiePlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "            key = new Integer(section);",
        " Mark": "                  ^",
        " Line": 880
    },
    {
        " Proj": "Chart-15",
        "Class": "org.jfree.chart.plot.PiePlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        this.explodePercentages.put(key, new Double(percent));",
        " Mark": "                                         ^",
        " Line": 1368
    },
    {
        " Proj": "Chart-15",
        "Class": "org.jfree.chart.plot.PiePlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "draw implements method in Plot; expected @Override",
        " Code": "    public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,",
        " Mark": "                ^",
        " Line": 2074
    },
    {
        " Proj": "Chart-15",
        "Class": "org.jfree.chart.plot.PiePlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (this.direction == Rotation.CLOCKWISE) {",
        " Mark": "                           ^",
        " Line": 2264
    },
    {
        " Proj": "Chart-15",
        "Class": "org.jfree.chart.plot.PiePlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (this.direction == Rotation.ANTICLOCKWISE) {",
        " Mark": "                                ^",
        " Line": 2268
    },
    {
        " Proj": "Chart-15",
        "Class": "org.jfree.chart.plot.PiePlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                    leftKeys.addValue(key, new Double(mid));",
        " Mark": "                                           ^",
        " Line": 2477
    },
    {
        " Proj": "Chart-15",
        "Class": "org.jfree.chart.plot.PiePlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                    rightKeys.addValue(key, new Double(mid));",
        " Mark": "                                            ^",
        " Line": 2480
    },
    {
        " Proj": "Chart-15",
        "Class": "org.jfree.chart.plot.PiePlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLegendItems overrides method in Plot; expected @Override",
        " Code": "    public LegendItemCollection getLegendItems() {",
        " Mark": "                                ^",
        " Line": 2614
    },
    {
        " Proj": "Chart-15",
        "Class": "org.jfree.chart.plot.PiePlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getPlotType implements method in Plot; expected @Override",
        " Code": "    public String getPlotType() {",
        " Mark": "                  ^",
        " Line": 2680
    },
    {
        " Proj": "Chart-15",
        "Class": "org.jfree.chart.plot.PiePlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Plot; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 2802
    },
    {
        " Proj": "Chart-15",
        "Class": "org.jfree.chart.plot.PiePlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (this.direction != that.direction) {",
        " Mark": "                           ^",
        " Line": 2825
    },
    {
        " Proj": "Chart-15",
        "Class": "org.jfree.chart.plot.PiePlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "clone overrides method in Plot; expected @Override",
        " Code": "    public Object clone() throws CloneNotSupportedException {",
        " Mark": "                  ^",
        " Line": 2967
    },
    {
        " Proj": "Chart-16",
        "Class": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        " Type": "warning",
        "  Cat": "EqualsHashCode",
        "  Msg": "Classes that override equals should also override hashCode.",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 712
    },
    {
        " Proj": "Chart-16",
        "Class": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getSeriesCount implements method in AbstractSeriesDataset; expected @Override",
        " Code": "    public int getSeriesCount() {",
        " Mark": "               ^",
        " Line": 222
    },
    {
        " Proj": "Chart-16",
        "Class": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getSeriesKey implements method in AbstractSeriesDataset; expected @Override",
        " Code": "    public Comparable getSeriesKey(int series) {",
        " Mark": "                      ^",
        " Line": 260
    },
    {
        " Proj": "Chart-16",
        "Class": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getColumnKeys implements method in KeyedValues2D; expected @Override",
        " Code": "    public List getColumnKeys() {",
        " Mark": "                ^",
        " Line": 313
    },
    {
        " Proj": "Chart-16",
        "Class": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getValue implements method in KeyedValues2D; expected @Override",
        " Code": "    public Number getValue(Comparable series, Comparable category) {",
        " Mark": "                  ^",
        " Line": 366
    },
    {
        " Proj": "Chart-16",
        "Class": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getValue implements method in Values2D; expected @Override",
        " Code": "    public Number getValue(int series, int category) {",
        " Mark": "                  ^",
        " Line": 391
    },
    {
        " Proj": "Chart-16",
        "Class": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getStartValue implements method in IntervalCategoryDataset; expected @Override",
        " Code": "    public Number getStartValue(Comparable series, Comparable category) {",
        " Mark": "                  ^",
        " Line": 406
    },
    {
        " Proj": "Chart-16",
        "Class": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getStartValue implements method in IntervalCategoryDataset; expected @Override",
        " Code": "    public Number getStartValue(int series, int category) {",
        " Mark": "                  ^",
        " Line": 429
    },
    {
        " Proj": "Chart-16",
        "Class": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getEndValue implements method in IntervalCategoryDataset; expected @Override",
        " Code": "    public Number getEndValue(Comparable series, Comparable category) {",
        " Mark": "                  ^",
        " Line": 459
    },
    {
        " Proj": "Chart-16",
        "Class": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getEndValue implements method in IntervalCategoryDataset; expected @Override",
        " Code": "    public Number getEndValue(int series, int category) {",
        " Mark": "                  ^",
        " Line": 481
    },
    {
        " Proj": "Chart-16",
        "Class": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getColumnKey implements method in KeyedValues2D; expected @Override",
        " Code": "    public Comparable getColumnKey(int column) {",
        " Mark": "                      ^",
        " Line": 611
    },
    {
        " Proj": "Chart-16",
        "Class": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getColumnIndex implements method in KeyedValues2D; expected @Override",
        " Code": "    public int getColumnIndex(Comparable columnKey) {",
        " Mark": "               ^",
        " Line": 624
    },
    {
        " Proj": "Chart-16",
        "Class": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRowIndex implements method in KeyedValues2D; expected @Override",
        " Code": "    public int getRowIndex(Comparable rowKey) {",
        " Mark": "               ^",
        " Line": 640
    },
    {
        " Proj": "Chart-16",
        "Class": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRowKeys implements method in KeyedValues2D; expected @Override",
        " Code": "    public List getRowKeys() {",
        " Mark": "                ^",
        " Line": 652
    },
    {
        " Proj": "Chart-16",
        "Class": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRowKey implements method in KeyedValues2D; expected @Override",
        " Code": "    public Comparable getRowKey(int row) {",
        " Mark": "                      ^",
        " Line": 672
    },
    {
        " Proj": "Chart-16",
        "Class": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getColumnCount implements method in Values2D; expected @Override",
        " Code": "    public int getColumnCount() {",
        " Mark": "               ^",
        " Line": 689
    },
    {
        " Proj": "Chart-16",
        "Class": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRowCount implements method in Values2D; expected @Override",
        " Code": "    public int getRowCount() {",
        " Mark": "               ^",
        " Line": 701
    },
    {
        " Proj": "Chart-16",
        "Class": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 712
    },
    {
        " Proj": "Chart-16",
        "Class": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "clone overrides method in AbstractDataset; expected @Override",
        " Code": "    public Object clone() throws CloneNotSupportedException {",
        " Mark": "                  ^",
        " Line": 745
    },
    {
        " Proj": "Chart-17",
        "Class": "org.jfree.data.time.TimeSeries",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getItemCount implements method in Series; expected @Override",
        " Code": "    public int getItemCount() {",
        " Mark": "               ^",
        " Line": 237
    },
    {
        " Proj": "Chart-17",
        "Class": "org.jfree.data.time.TimeSeries",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        return this.addOrUpdate(period, new Double(value));    ",
        " Mark": "                                        ^",
        " Line": 675
    },
    {
        " Proj": "Chart-17",
        "Class": "org.jfree.data.time.TimeSeries",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "clone overrides method in Series; expected @Override",
        " Code": "    public Object clone() throws CloneNotSupportedException {",
        " Mark": "                  ^",
        " Line": 856
    },
    {
        " Proj": "Chart-17",
        "Class": "org.jfree.data.time.TimeSeries",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Series; expected @Override",
        " Code": "    public boolean equals(Object object) {",
        " Mark": "                   ^",
        " Line": 961
    },
    {
        " Proj": "Chart-17",
        "Class": "org.jfree.data.time.TimeSeries",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Series; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 1010
    },
    {
        " Proj": "Chart-18",
        "Class": "org.jfree.data.DefaultKeyedValues2D",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRowCount implements method in Values2D; expected @Override",
        " Code": "    public int getRowCount() {",
        " Mark": "               ^",
        " Line": 117
    },
    {
        " Proj": "Chart-18",
        "Class": "org.jfree.data.DefaultKeyedValues2D",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getColumnCount implements method in Values2D; expected @Override",
        " Code": "    public int getColumnCount() {",
        " Mark": "               ^",
        " Line": 128
    },
    {
        " Proj": "Chart-18",
        "Class": "org.jfree.data.DefaultKeyedValues2D",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getValue implements method in Values2D; expected @Override",
        " Code": "    public Number getValue(int row, int column) {",
        " Mark": "                  ^",
        " Line": 142
    },
    {
        " Proj": "Chart-18",
        "Class": "org.jfree.data.DefaultKeyedValues2D",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRowKey implements method in KeyedValues2D; expected @Override",
        " Code": "    public Comparable getRowKey(int row) {",
        " Mark": "                      ^",
        " Line": 167
    },
    {
        " Proj": "Chart-18",
        "Class": "org.jfree.data.DefaultKeyedValues2D",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRowIndex implements method in KeyedValues2D; expected @Override",
        " Code": "    public int getRowIndex(Comparable key) {",
        " Mark": "               ^",
        " Line": 181
    },
    {
        " Proj": "Chart-18",
        "Class": "org.jfree.data.DefaultKeyedValues2D",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRowKeys implements method in KeyedValues2D; expected @Override",
        " Code": "    public List getRowKeys() {",
        " Mark": "                ^",
        " Line": 200
    },
    {
        " Proj": "Chart-18",
        "Class": "org.jfree.data.DefaultKeyedValues2D",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getColumnKey implements method in KeyedValues2D; expected @Override",
        " Code": "    public Comparable getColumnKey(int column) {",
        " Mark": "                      ^",
        " Line": 215
    },
    {
        " Proj": "Chart-18",
        "Class": "org.jfree.data.DefaultKeyedValues2D",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getColumnIndex implements method in KeyedValues2D; expected @Override",
        " Code": "    public int getColumnIndex(Comparable key) {",
        " Mark": "               ^",
        " Line": 229
    },
    {
        " Proj": "Chart-18",
        "Class": "org.jfree.data.DefaultKeyedValues2D",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getColumnKeys implements method in KeyedValues2D; expected @Override",
        " Code": "    public List getColumnKeys() {",
        " Mark": "                ^",
        " Line": 243
    },
    {
        " Proj": "Chart-18",
        "Class": "org.jfree.data.DefaultKeyedValues2D",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getValue implements method in KeyedValues2D; expected @Override",
        " Code": "    public Number getValue(Comparable rowKey, Comparable columnKey) {",
        " Mark": "                  ^",
        " Line": 260
    },
    {
        " Proj": "Chart-18",
        "Class": "org.jfree.data.DefaultKeyedValues2D",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "    public boolean equals(Object o) {",
        " Mark": "                   ^",
        " Line": 488
    },
    {
        " Proj": "Chart-18",
        "Class": "org.jfree.data.DefaultKeyedValues2D",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Object; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 541
    },
    {
        " Proj": "Chart-18",
        "Class": "org.jfree.data.DefaultKeyedValues2D",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "clone implements method in PublicCloneable; expected @Override",
        " Code": "    public Object clone() throws CloneNotSupportedException {",
        " Mark": "                  ^",
        " Line": 557
    },
    {
        " Proj": "Chart-18",
        "Class": "org.jfree.data.DefaultKeyedValues",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getItemCount implements method in Values; expected @Override",
        " Code": "    public int getItemCount() {",
        " Mark": "               ^",
        " Line": 109
    },
    {
        " Proj": "Chart-18",
        "Class": "org.jfree.data.DefaultKeyedValues",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getValue implements method in Values; expected @Override",
        " Code": "    public Number getValue(int item) {",
        " Mark": "                  ^",
        " Line": 122
    },
    {
        " Proj": "Chart-18",
        "Class": "org.jfree.data.DefaultKeyedValues",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getKey implements method in KeyedValues; expected @Override",
        " Code": "    public Comparable getKey(int index) {",
        " Mark": "                      ^",
        " Line": 135
    },
    {
        " Proj": "Chart-18",
        "Class": "org.jfree.data.DefaultKeyedValues",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getIndex implements method in KeyedValues; expected @Override",
        " Code": "    public int getIndex(Comparable key) {",
        " Mark": "               ^",
        " Line": 149
    },
    {
        " Proj": "Chart-18",
        "Class": "org.jfree.data.DefaultKeyedValues",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getKeys implements method in KeyedValues; expected @Override",
        " Code": "    public List getKeys() {",
        " Mark": "                ^",
        " Line": 165
    },
    {
        " Proj": "Chart-18",
        "Class": "org.jfree.data.DefaultKeyedValues",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getValue implements method in KeyedValues; expected @Override",
        " Code": "    public Number getValue(Comparable key) {",
        " Mark": "                  ^",
        " Line": 180
    },
    {
        " Proj": "Chart-18",
        "Class": "org.jfree.data.DefaultKeyedValues",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        addValue(key, new Double(value)); ",
        " Mark": "                      ^",
        " Line": 197
    },
    {
        " Proj": "Chart-18",
        "Class": "org.jfree.data.DefaultKeyedValues",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        setValue(key, new Double(value));   ",
        " Mark": "                      ^",
        " Line": 219
    },
    {
        " Proj": "Chart-18",
        "Class": "org.jfree.data.DefaultKeyedValues",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "            this.indexMap.put(key, new Integer(this.keys.size() - 1));",
        " Mark": "                                   ^",
        " Line": 240
    },
    {
        " Proj": "Chart-18",
        "Class": "org.jfree.data.DefaultKeyedValues",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        insertValue(position, key, new Double(value));",
        " Mark": "                                   ^",
        " Line": 256
    },
    {
        " Proj": "Chart-18",
        "Class": "org.jfree.data.DefaultKeyedValues",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "            this.indexMap.put(key, new Integer(i));",
        " Mark": "                                   ^",
        " Line": 302
    },
    {
        " Proj": "Chart-18",
        "Class": "org.jfree.data.DefaultKeyedValues",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 408
    },
    {
        " Proj": "Chart-18",
        "Class": "org.jfree.data.DefaultKeyedValues",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Object; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 450
    },
    {
        " Proj": "Chart-18",
        "Class": "org.jfree.data.DefaultKeyedValues",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "clone implements method in PublicCloneable; expected @Override",
        " Code": "    public Object clone() throws CloneNotSupportedException {",
        " Mark": "                  ^",
        " Line": 462
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "EqualsHashCode",
        "  Msg": "Classes that override equals should also override hashCode.",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 3560
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getPlotType implements method in Plot; expected @Override",
        " Code": "    public String getPlotType() {",
        " Mark": "                  ^",
        " Line": 523
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getOrientation implements method in Zoomable; expected @Override",
        " Code": "    public PlotOrientation getOrientation() {",
        " Mark": "                           ^",
        " Line": 534
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        this.datasetToDomainAxisMap.set(index, new Integer(axisIndex));  ",
        " Mark": "                                               ^",
        " Line": 1233
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        this.datasetToRangeAxisMap.set(index, new Integer(axisIndex));",
        " Mark": "                                              ^",
        " Line": 1266
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLegendItems overrides method in Plot; expected @Override",
        " Code": "    public LegendItemCollection getLegendItems() {",
        " Mark": "                                ^",
        " Line": 1759
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "handleClick overrides method in Plot; expected @Override",
        " Code": "    public void handleClick(int x, int y, PlotRenderingInfo info) {",
        " Mark": "                ^",
        " Line": 1793
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (this.orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                                 ^",
        " Line": 1799
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            else if (this.orientation == PlotOrientation.VERTICAL) {",
        " Mark": "                                      ^",
        " Line": 1802
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "zoom overrides method in Plot; expected @Override",
        " Code": "    public void zoom(double percent) {",
        " Mark": "                ^",
        " Line": 1824
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "datasetChanged overrides method in Plot; expected @Override",
        " Code": "    public void datasetChanged(DatasetChangeEvent event) {",
        " Mark": "                ^",
        " Line": 1845
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "rendererChanged implements method in RendererChangeListener; expected @Override",
        " Code": "    public void rendererChanged(RendererChangeEvent event) {",
        " Mark": "                ^",
        " Line": 1870
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (layer == Layer.FOREGROUND) {",
        " Mark": "                  ^",
        " Line": 1935
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                    new Integer(index));",
        " Mark": "                    ^",
        " Line": 1937
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                this.foregroundDomainMarkers.put(new Integer(index), markers);",
        " Mark": "                                                 ^",
        " Line": 1940
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (layer == Layer.BACKGROUND) {",
        " Mark": "                       ^",
        " Line": 1944
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                    new Integer(index));",
        " Mark": "                    ^",
        " Line": 1946
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                this.backgroundDomainMarkers.put(new Integer(index), markers);",
        " Mark": "                                                 ^",
        " Line": 1949
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        Integer key = new Integer(index);",
        " Mark": "                      ^",
        " Line": 2007
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (layer == Layer.FOREGROUND) {",
        " Mark": "                  ^",
        " Line": 2008
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (layer == Layer.BACKGROUND) {",
        " Mark": "                       ^",
        " Line": 2011
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        Integer key = new Integer(index);",
        " Mark": "                      ^",
        " Line": 2028
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (layer == Layer.FOREGROUND) {",
        " Mark": "                  ^",
        " Line": 2094
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                    new Integer(index));",
        " Mark": "                    ^",
        " Line": 2096
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                this.foregroundRangeMarkers.put(new Integer(index), markers);",
        " Mark": "                                                ^",
        " Line": 2099
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (layer == Layer.BACKGROUND) {",
        " Mark": "                       ^",
        " Line": 2103
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                    new Integer(index));",
        " Mark": "                    ^",
        " Line": 2105
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                this.backgroundRangeMarkers.put(new Integer(index), markers);",
        " Mark": "                                                ^",
        " Line": 2108
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        Integer key = new Integer(index);",
        " Mark": "                      ^",
        " Line": 2168
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (layer == Layer.FOREGROUND) {",
        " Mark": "                  ^",
        " Line": 2169
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (layer == Layer.BACKGROUND) {",
        " Mark": "                       ^",
        " Line": 2172
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        Integer key = new Integer(index);",
        " Mark": "                      ^",
        " Line": 2189
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (this.orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                                 ^",
        " Line": 2449
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            else if (this.orientation == PlotOrientation.VERTICAL) {",
        " Mark": "                                      ^",
        " Line": 2455
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (this.orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                                 ^",
        " Line": 2504
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            else if (this.orientation == PlotOrientation.VERTICAL) {",
        " Mark": "                                      ^",
        " Line": 2510
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "draw implements method in Plot; expected @Override",
        " Code": "    public void draw(Graphics2D g2, Rectangle2D area, ",
        " Mark": "                ^",
        " Line": 2563
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (order == DatasetRenderingOrder.FORWARD) {",
        " Mark": "                  ^",
        " Line": 2640
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "drawBackground overrides method in Plot; expected @Override",
        " Code": "    public void drawBackground(Graphics2D g2, Rectangle2D area) {",
        " Mark": "                ^",
        " Line": 2745
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                if (this.columnRenderingOrder == SortOrder.ASCENDING) {",
        " Mark": "                                              ^",
        " Line": 2875
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                        if (this.rowRenderingOrder == SortOrder.ASCENDING) {",
        " Mark": "                                                   ^",
        " Line": 2877
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                        if (this.rowRenderingOrder == SortOrder.ASCENDING) {",
        " Mark": "                                                   ^",
        " Line": 2895
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (this.orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                             ^",
        " Line": 3086
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (this.orientation == PlotOrientation.VERTICAL) {",
        " Mark": "                                  ^",
        " Line": 3090
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                        ^",
        " Line": 3121
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDataRange implements method in ValueAxisPlot; expected @Override",
        " Code": "    public Range getDataRange(ValueAxis axis) {",
        " Mark": "                 ^",
        " Line": 3148
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (axis == getRangeAxis()) {",
        " Mark": "                      ^",
        " Line": 3157
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isDomainZoomable implements method in Zoomable; expected @Override",
        " Code": "    public boolean isDomainZoomable() {",
        " Mark": "                   ^",
        " Line": 3385
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isRangeZoomable implements method in Zoomable; expected @Override",
        " Code": "    public boolean isRangeZoomable() {",
        " Mark": "                   ^",
        " Line": 3396
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "zoomDomainAxes implements method in Zoomable; expected @Override",
        " Code": "    public void zoomDomainAxes(double factor, PlotRenderingInfo state, ",
        " Mark": "                ^",
        " Line": 3408
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "zoomDomainAxes implements method in Zoomable; expected @Override",
        " Code": "    public void zoomDomainAxes(double lowerPercent, double upperPercent, ",
        " Mark": "                ^",
        " Line": 3422
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "zoomDomainAxes implements method in Zoomable; expected @Override",
        " Code": "    public void zoomDomainAxes(double factor, PlotRenderingInfo info,",
        " Mark": "                ^",
        " Line": 3440
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "zoomRangeAxes implements method in Zoomable; expected @Override",
        " Code": "    public void zoomRangeAxes(double factor, PlotRenderingInfo state, ",
        " Mark": "                ^",
        " Line": 3452
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "zoomRangeAxes implements method in Zoomable; expected @Override",
        " Code": "    public void zoomRangeAxes(double factor, PlotRenderingInfo info,",
        " Mark": "                ^",
        " Line": 3471
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                    if (this.orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                                         ^",
        " Line": 3482
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "zoomRangeAxes implements method in Zoomable; expected @Override",
        " Code": "    public void zoomRangeAxes(double lowerPercent, double upperPercent, ",
        " Mark": "                ^",
        " Line": 3504
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Plot; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 3560
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (this.orientation != that.orientation) {",
        " Mark": "                             ^",
        " Line": 3574
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (this.renderingOrder != that.renderingOrder) {",
        " Mark": "                                ^",
        " Line": 3606
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (this.columnRenderingOrder != that.columnRenderingOrder) {",
        " Mark": "                                      ^",
        " Line": 3609
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (this.rowRenderingOrder != that.rowRenderingOrder) {",
        " Mark": "                                   ^",
        " Line": 3612
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (this.domainGridlinePosition != that.domainGridlinePosition) {",
        " Mark": "                                        ^",
        " Line": 3618
    },
    {
        " Proj": "Chart-19",
        "Class": "org.jfree.chart.plot.CategoryPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "clone overrides method in Plot; expected @Override",
        " Code": "    public Object clone() throws CloneNotSupportedException {",
        " Mark": "                  ^",
        " Line": 3695
    },
    {
        " Proj": "Chart-2",
        "Class": "org.jfree.data.general.DatasetUtilities",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                result.addValue(new Double(data[r][c]), rowKey, columnKey);",
        " Mark": "                                ^",
        " Line": 375
    },
    {
        " Proj": "Chart-2",
        "Class": "org.jfree.data.general.DatasetUtilities",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                result.addValue(new Double(data[r][c]), rowKey, columnKey);",
        " Mark": "                                ^",
        " Line": 461
    },
    {
        " Proj": "Chart-2",
        "Class": "org.jfree.data.general.DatasetUtilities",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "            return new Double(info.getDomainLowerBound(true));",
        " Mark": "                   ^",
        " Line": 1531
    },
    {
        " Proj": "Chart-2",
        "Class": "org.jfree.data.general.DatasetUtilities",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                result = new Double(minimum);",
        " Mark": "                         ^",
        " Line": 1559
    },
    {
        " Proj": "Chart-2",
        "Class": "org.jfree.data.general.DatasetUtilities",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "            return new Double(info.getDomainUpperBound(true));",
        " Mark": "                   ^",
        " Line": 1586
    },
    {
        " Proj": "Chart-2",
        "Class": "org.jfree.data.general.DatasetUtilities",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                result = new Double(maximum);",
        " Mark": "                         ^",
        " Line": 1615
    },
    {
        " Proj": "Chart-2",
        "Class": "org.jfree.data.general.DatasetUtilities",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "            return new Double(info.getRangeLowerBound(true));",
        " Mark": "                   ^",
        " Line": 1643
    },
    {
        " Proj": "Chart-2",
        "Class": "org.jfree.data.general.DatasetUtilities",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                return new Double(minimum);",
        " Mark": "                       ^",
        " Line": 1671
    },
    {
        " Proj": "Chart-2",
        "Class": "org.jfree.data.general.DatasetUtilities",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "            return new Double(info.getRangeLowerBound(true));",
        " Mark": "                   ^",
        " Line": 1699
    },
    {
        " Proj": "Chart-2",
        "Class": "org.jfree.data.general.DatasetUtilities",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                return new Double(minimum);",
        " Mark": "                       ^",
        " Line": 1733
    },
    {
        " Proj": "Chart-2",
        "Class": "org.jfree.data.general.DatasetUtilities",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "            return new Double(info.getRangeUpperBound(true));",
        " Mark": "                   ^",
        " Line": 1760
    },
    {
        " Proj": "Chart-2",
        "Class": "org.jfree.data.general.DatasetUtilities",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                return new Double(maximum);",
        " Mark": "                       ^",
        " Line": 1789
    },
    {
        " Proj": "Chart-2",
        "Class": "org.jfree.data.general.DatasetUtilities",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "            return new Double(info.getRangeUpperBound(true));",
        " Mark": "                   ^",
        " Line": 1816
    },
    {
        " Proj": "Chart-2",
        "Class": "org.jfree.data.general.DatasetUtilities",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                return new Double(maximum);",
        " Mark": "                       ^",
        " Line": 1849
    },
    {
        " Proj": "Chart-2",
        "Class": "org.jfree.data.general.DatasetUtilities",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "            result = new Double(minimum);",
        " Mark": "                     ^",
        " Line": 2013
    },
    {
        " Proj": "Chart-2",
        "Class": "org.jfree.data.general.DatasetUtilities",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "            result = new Double(maximum);",
        " Mark": "                     ^",
        " Line": 2052
    },
    {
        " Proj": "Chart-20",
        "Class": "org.jfree.chart.plot.ValueMarker",
        " Type": "warning",
        "  Cat": "EqualsHashCode",
        "  Msg": "Classes that override equals should also override hashCode.",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 140
    },
    {
        " Proj": "Chart-20",
        "Class": "org.jfree.chart.plot.ValueMarker",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Marker; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 140
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "EqualsHashCode",
        "  Msg": "Classes that override equals should also override hashCode.",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 790
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getValue implements method in Values2D; expected @Override",
        " Code": "    public Number getValue(int row, int column) {",
        " Mark": "                  ^",
        " Line": 220
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getValue implements method in KeyedValues2D; expected @Override",
        " Code": "    public Number getValue(Comparable rowKey, Comparable columnKey) {",
        " Mark": "                  ^",
        " Line": 235
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMeanValue implements method in BoxAndWhiskerCategoryDataset; expected @Override",
        " Code": "    public Number getMeanValue(int row, int column) {",
        " Mark": "                  ^",
        " Line": 249
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMeanValue implements method in BoxAndWhiskerCategoryDataset; expected @Override",
        " Code": "    public Number getMeanValue(Comparable rowKey, Comparable columnKey) {",
        " Mark": "                  ^",
        " Line": 271
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMedianValue implements method in BoxAndWhiskerCategoryDataset; expected @Override",
        " Code": "    public Number getMedianValue(int row, int column) {",
        " Mark": "                  ^",
        " Line": 291
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMedianValue implements method in BoxAndWhiskerCategoryDataset; expected @Override",
        " Code": "    public Number getMedianValue(Comparable rowKey, Comparable columnKey) {",
        " Mark": "                  ^",
        " Line": 311
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getQ1Value implements method in BoxAndWhiskerCategoryDataset; expected @Override",
        " Code": "    public Number getQ1Value(int row, int column) {",
        " Mark": "                  ^",
        " Line": 331
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getQ1Value implements method in BoxAndWhiskerCategoryDataset; expected @Override",
        " Code": "    public Number getQ1Value(Comparable rowKey, Comparable columnKey) {",
        " Mark": "                  ^",
        " Line": 351
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getQ3Value implements method in BoxAndWhiskerCategoryDataset; expected @Override",
        " Code": "    public Number getQ3Value(int row, int column) {",
        " Mark": "                  ^",
        " Line": 371
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getQ3Value implements method in BoxAndWhiskerCategoryDataset; expected @Override",
        " Code": "    public Number getQ3Value(Comparable rowKey, Comparable columnKey) {",
        " Mark": "                  ^",
        " Line": 391
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getColumnIndex implements method in KeyedValues2D; expected @Override",
        " Code": "    public int getColumnIndex(Comparable key) {",
        " Mark": "               ^",
        " Line": 410
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getColumnKey implements method in KeyedValues2D; expected @Override",
        " Code": "    public Comparable getColumnKey(int column) {",
        " Mark": "                      ^",
        " Line": 423
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getColumnKeys implements method in KeyedValues2D; expected @Override",
        " Code": "    public List getColumnKeys() {",
        " Mark": "                ^",
        " Line": 434
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRowIndex implements method in KeyedValues2D; expected @Override",
        " Code": "    public int getRowIndex(Comparable key) {",
        " Mark": "               ^",
        " Line": 447
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRowKey implements method in KeyedValues2D; expected @Override",
        " Code": "    public Comparable getRowKey(int row) {",
        " Mark": "                      ^",
        " Line": 460
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRowKeys implements method in KeyedValues2D; expected @Override",
        " Code": "    public List getRowKeys() {",
        " Mark": "                ^",
        " Line": 471
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRowCount implements method in Values2D; expected @Override",
        " Code": "    public int getRowCount() {",
        " Mark": "               ^",
        " Line": 482
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getColumnCount implements method in Values2D; expected @Override",
        " Code": "    public int getColumnCount() {",
        " Mark": "               ^",
        " Line": 493
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRangeLowerBound implements method in RangeInfo; expected @Override",
        " Code": "    public double getRangeLowerBound(boolean includeInterval) {",
        " Mark": "                  ^",
        " Line": 507
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRangeUpperBound implements method in RangeInfo; expected @Override",
        " Code": "    public double getRangeUpperBound(boolean includeInterval) {",
        " Mark": "                  ^",
        " Line": 521
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRangeBounds implements method in RangeInfo; expected @Override",
        " Code": "    public Range getRangeBounds(boolean includeInterval) {",
        " Mark": "                 ^",
        " Line": 533
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMinRegularValue implements method in BoxAndWhiskerCategoryDataset; expected @Override",
        " Code": "    public Number getMinRegularValue(int row, int column) {",
        " Mark": "                  ^",
        " Line": 547
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMinRegularValue implements method in BoxAndWhiskerCategoryDataset; expected @Override",
        " Code": "    public Number getMinRegularValue(Comparable rowKey, Comparable columnKey) {",
        " Mark": "                  ^",
        " Line": 567
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMaxRegularValue implements method in BoxAndWhiskerCategoryDataset; expected @Override",
        " Code": "    public Number getMaxRegularValue(int row, int column) {",
        " Mark": "                  ^",
        " Line": 587
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMaxRegularValue implements method in BoxAndWhiskerCategoryDataset; expected @Override",
        " Code": "    public Number getMaxRegularValue(Comparable rowKey, Comparable columnKey) {",
        " Mark": "                  ^",
        " Line": 607
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMinOutlier implements method in BoxAndWhiskerCategoryDataset; expected @Override",
        " Code": "    public Number getMinOutlier(int row, int column) {",
        " Mark": "                  ^",
        " Line": 627
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMinOutlier implements method in BoxAndWhiskerCategoryDataset; expected @Override",
        " Code": "    public Number getMinOutlier(Comparable rowKey, Comparable columnKey) {",
        " Mark": "                  ^",
        " Line": 647
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMaxOutlier implements method in BoxAndWhiskerCategoryDataset; expected @Override",
        " Code": "    public Number getMaxOutlier(int row, int column) {",
        " Mark": "                  ^",
        " Line": 667
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMaxOutlier implements method in BoxAndWhiskerCategoryDataset; expected @Override",
        " Code": "    public Number getMaxOutlier(Comparable rowKey, Comparable columnKey) {",
        " Mark": "                  ^",
        " Line": 687
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getOutliers implements method in BoxAndWhiskerCategoryDataset; expected @Override",
        " Code": "    public List getOutliers(int row, int column) {",
        " Mark": "                ^",
        " Line": 707
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getOutliers implements method in BoxAndWhiskerCategoryDataset; expected @Override",
        " Code": "    public List getOutliers(Comparable rowKey, Comparable columnKey) {",
        " Mark": "                ^",
        " Line": 727
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 790
    },
    {
        " Proj": "Chart-21",
        "Class": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "clone implements method in PublicCloneable; expected @Override",
        " Code": "    public Object clone() throws CloneNotSupportedException {",
        " Mark": "                  ^",
        " Line": 809
    },
    {
        " Proj": "Chart-22",
        "Class": "org.jfree.data.KeyedObjects2D",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 419
    },
    {
        " Proj": "Chart-22",
        "Class": "org.jfree.data.KeyedObjects2D",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Object; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 466
    },
    {
        " Proj": "Chart-22",
        "Class": "org.jfree.data.KeyedObjects2D",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "clone overrides method in Object; expected @Override",
        " Code": "    public Object clone() throws CloneNotSupportedException {",
        " Mark": "                  ^",
        " Line": 482
    },
    {
        " Proj": "Chart-23",
        "Class": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "drawItem implements method in CategoryItemRenderer; expected @Override",
        " Code": "    public void drawItem(Graphics2D g2, CategoryItemRendererState state,",
        " Mark": "                ^",
        " Line": 330
    },
    {
        " Proj": "Chart-23",
        "Class": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (orient == PlotOrientation.VERTICAL) {",
        " Mark": "                       ^",
        " Line": 349
    },
    {
        " Proj": "Chart-23",
        "Class": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                    if (orient == PlotOrientation.VERTICAL) {",
        " Mark": "                               ^",
        " Line": 373
    },
    {
        " Proj": "Chart-23",
        "Class": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                        if (orient == PlotOrientation.VERTICAL) {",
        " Mark": "                                   ^",
        " Line": 406
    },
    {
        " Proj": "Chart-23",
        "Class": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in AbstractCategoryItemRenderer; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 435
    },
    {
        " Proj": "Chart-23",
        "Class": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "paintIcon implements method in Icon; expected @Override",
        " Code": "          public void paintIcon(Component c, Graphics g, int x, int y) {",
        " Mark": "                      ^",
        " Line": 471
    },
    {
        " Proj": "Chart-23",
        "Class": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getIconWidth implements method in Icon; expected @Override",
        " Code": "        public int getIconWidth() {",
        " Mark": "                   ^",
        " Line": 485
    },
    {
        " Proj": "Chart-23",
        "Class": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getIconHeight implements method in Icon; expected @Override",
        " Code": "        public int getIconHeight() {",
        " Mark": "                   ^",
        " Line": 489
    },
    {
        " Proj": "Chart-23",
        "Class": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "paintIcon implements method in Icon; expected @Override",
        " Code": "            public void paintIcon(Component c, Graphics g, int x, int y) {",
        " Mark": "                        ^",
        " Line": 511
    },
    {
        " Proj": "Chart-23",
        "Class": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getIconWidth implements method in Icon; expected @Override",
        " Code": "            public int getIconWidth() {",
        " Mark": "                       ^",
        " Line": 523
    },
    {
        " Proj": "Chart-23",
        "Class": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getIconHeight implements method in Icon; expected @Override",
        " Code": "            public int getIconHeight() {",
        " Mark": "                       ^",
        " Line": 527
    },
    {
        " Proj": "Chart-24",
        "Class": "org.jfree.chart.renderer.GrayPaintScale",
        " Type": "warning",
        "  Cat": "EqualsHashCode",
        "  Msg": "Classes that override equals should also override hashCode.",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 144
    },
    {
        " Proj": "Chart-24",
        "Class": "org.jfree.chart.renderer.GrayPaintScale",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLowerBound implements method in PaintScale; expected @Override",
        " Code": "    public double getLowerBound() {",
        " Mark": "                  ^",
        " Line": 100
    },
    {
        " Proj": "Chart-24",
        "Class": "org.jfree.chart.renderer.GrayPaintScale",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getUpperBound implements method in PaintScale; expected @Override",
        " Code": "    public double getUpperBound() {",
        " Mark": "                  ^",
        " Line": 111
    },
    {
        " Proj": "Chart-24",
        "Class": "org.jfree.chart.renderer.GrayPaintScale",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getPaint implements method in PaintScale; expected @Override",
        " Code": "    public Paint getPaint(double value) {",
        " Mark": "                 ^",
        " Line": 123
    },
    {
        " Proj": "Chart-24",
        "Class": "org.jfree.chart.renderer.GrayPaintScale",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 144
    },
    {
        " Proj": "Chart-24",
        "Class": "org.jfree.chart.renderer.GrayPaintScale",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "clone implements method in PublicCloneable; expected @Override",
        " Code": "    public Object clone() throws CloneNotSupportedException {",
        " Mark": "                  ^",
        " Line": 169
    },
    {
        " Proj": "Chart-25",
        "Class": "org.jfree.chart.renderer.category.StatisticalBarRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "drawItem overrides method in BarRenderer; expected @Override",
        " Code": "    public void drawItem(Graphics2D g2,",
        " Mark": "                ^",
        " Line": 188
    },
    {
        " Proj": "Chart-25",
        "Class": "org.jfree.chart.renderer.category.StatisticalBarRenderer",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                        ^",
        " Line": 207
    },
    {
        " Proj": "Chart-25",
        "Class": "org.jfree.chart.renderer.category.StatisticalBarRenderer",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (orientation == PlotOrientation.VERTICAL) {",
        " Mark": "                             ^",
        " Line": 211
    },
    {
        " Proj": "Chart-25",
        "Class": "org.jfree.chart.renderer.category.StatisticalBarRenderer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in BarRenderer; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 521
    },
    {
        " Proj": "Chart-26",
        "Class": "org.jfree.chart.axis.Axis",
        " Type": "warning",
        "  Cat": "EqualsHashCode",
        "  Msg": "Classes that override equals should also override hashCode.",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 1261
    },
    {
        " Proj": "Chart-26",
        "Class": "org.jfree.chart.axis.Axis",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (edge == RectangleEdge.LEFT || edge == RectangleEdge.RIGHT) {",
        " Mark": "                     ^",
        " Line": 1064
    },
    {
        " Proj": "Chart-26",
        "Class": "org.jfree.chart.axis.Axis",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (edge == RectangleEdge.LEFT || edge == RectangleEdge.RIGHT) {",
        " Mark": "                                                   ^",
        " Line": 1064
    },
    {
        " Proj": "Chart-26",
        "Class": "org.jfree.chart.axis.Axis",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (edge == RectangleEdge.TOP) {",
        " Mark": "                 ^",
        " Line": 1113
    },
    {
        " Proj": "Chart-26",
        "Class": "org.jfree.chart.axis.Axis",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (edge == RectangleEdge.BOTTOM) {",
        " Mark": "                      ^",
        " Line": 1131
    },
    {
        " Proj": "Chart-26",
        "Class": "org.jfree.chart.axis.Axis",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (edge == RectangleEdge.LEFT) {",
        " Mark": "                      ^",
        " Line": 1149
    },
    {
        " Proj": "Chart-26",
        "Class": "org.jfree.chart.axis.Axis",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (edge == RectangleEdge.RIGHT) {",
        " Mark": "                      ^",
        " Line": 1168
    },
    {
        " Proj": "Chart-26",
        "Class": "org.jfree.chart.axis.Axis",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (edge == RectangleEdge.TOP) {",
        " Mark": "                 ^",
        " Line": 1216
    },
    {
        " Proj": "Chart-26",
        "Class": "org.jfree.chart.axis.Axis",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (edge == RectangleEdge.BOTTOM) {",
        " Mark": "                      ^",
        " Line": 1220
    },
    {
        " Proj": "Chart-26",
        "Class": "org.jfree.chart.axis.Axis",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (edge == RectangleEdge.LEFT) {",
        " Mark": "                      ^",
        " Line": 1224
    },
    {
        " Proj": "Chart-26",
        "Class": "org.jfree.chart.axis.Axis",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (edge == RectangleEdge.RIGHT) {",
        " Mark": "                      ^",
        " Line": 1228
    },
    {
        " Proj": "Chart-26",
        "Class": "org.jfree.chart.axis.Axis",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "clone overrides method in Object; expected @Override",
        " Code": "    public Object clone() throws CloneNotSupportedException {",
        " Mark": "                  ^",
        " Line": 1246
    },
    {
        " Proj": "Chart-26",
        "Class": "org.jfree.chart.axis.Axis",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 1261
    },
    {
        " Proj": "Chart-3",
        "Class": "org.jfree.data.time.TimeSeries",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getItemCount implements method in Series; expected @Override",
        " Code": "    public int getItemCount() {",
        " Mark": "               ^",
        " Line": 253
    },
    {
        " Proj": "Chart-3",
        "Class": "org.jfree.data.time.TimeSeries",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        return addOrUpdate(period, new Double(value));",
        " Mark": "                                   ^",
        " Line": 777
    },
    {
        " Proj": "Chart-3",
        "Class": "org.jfree.data.time.TimeSeries",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "clone overrides method in Series; expected @Override",
        " Code": "    public Object clone() throws CloneNotSupportedException {",
        " Mark": "                  ^",
        " Line": 1030
    },
    {
        " Proj": "Chart-3",
        "Class": "org.jfree.data.time.TimeSeries",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Series; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 1137
    },
    {
        " Proj": "Chart-3",
        "Class": "org.jfree.data.time.TimeSeries",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Series; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 1178
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "EqualsHashCode",
        "  Msg": "Classes that override equals should also override hashCode.",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 5311
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getPlotType implements method in Plot; expected @Override",
        " Code": "    public String getPlotType() {",
        " Mark": "                  ^",
        " Line": 717
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getOrientation implements method in Zoomable; expected @Override",
        " Code": "    public PlotOrientation getOrientation() {",
        " Mark": "                           ^",
        " Line": 728
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (orientation != this.orientation) {",
        " Mark": "                        ^",
        " Line": 744
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        axisIndices.add(new Integer(axisIndex));",
        " Mark": "                        ^",
        " Line": 1464
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        Integer key = new Integer(index);",
        " Mark": "                      ^",
        " Line": 1483
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        axisIndices.add(new Integer(axisIndex));",
        " Mark": "                        ^",
        " Line": 1500
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        Integer key = new Integer(index);",
        " Mark": "                      ^",
        " Line": 1519
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        Integer key = new Integer(index);",
        " Mark": "                      ^",
        " Line": 2518
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (layer == Layer.FOREGROUND) {",
        " Mark": "                  ^",
        " Line": 2589
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                    new Integer(index));",
        " Mark": "                    ^",
        " Line": 2591
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                this.foregroundDomainMarkers.put(new Integer(index), markers);",
        " Mark": "                                                 ^",
        " Line": 2594
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (layer == Layer.BACKGROUND) {",
        " Mark": "                       ^",
        " Line": 2598
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                    new Integer(index));",
        " Mark": "                    ^",
        " Line": 2600
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                this.backgroundDomainMarkers.put(new Integer(index), markers);",
        " Mark": "                                                 ^",
        " Line": 2603
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (layer == Layer.FOREGROUND) {",
        " Mark": "                  ^",
        " Line": 2678
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                    new Integer(index));",
        " Mark": "                    ^",
        " Line": 2680
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                    new Integer(index));",
        " Mark": "                    ^",
        " Line": 2684
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (layer == Layer.FOREGROUND) {",
        " Mark": "                  ^",
        " Line": 2790
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                    new Integer(index));",
        " Mark": "                    ^",
        " Line": 2792
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                this.foregroundRangeMarkers.put(new Integer(index), markers);",
        " Mark": "                                                ^",
        " Line": 2795
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (layer == Layer.BACKGROUND) {",
        " Mark": "                       ^",
        " Line": 2799
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                    new Integer(index));",
        " Mark": "                    ^",
        " Line": 2801
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                this.backgroundRangeMarkers.put(new Integer(index), markers);",
        " Mark": "                                                ^",
        " Line": 2804
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        Integer key = new Integer(index);",
        " Mark": "                      ^",
        " Line": 2821
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (layer == Layer.FOREGROUND) {",
        " Mark": "                  ^",
        " Line": 2917
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                    new Integer(index));",
        " Mark": "                    ^",
        " Line": 2919
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                    new Integer(index));",
        " Mark": "                    ^",
        " Line": 2923
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (this.orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                                 ^",
        " Line": 3064
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            else if (this.orientation == PlotOrientation.VERTICAL) {",
        " Mark": "                                      ^",
        " Line": 3070
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (this.orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                                 ^",
        " Line": 3111
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            else if (this.orientation == PlotOrientation.VERTICAL) {",
        " Mark": "                                      ^",
        " Line": 3117
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "draw implements method in Plot; expected @Override",
        " Code": "    public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,",
        " Mark": "                ^",
        " Line": 3150
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                if (orient == PlotOrientation.VERTICAL) {",
        " Mark": "                           ^",
        " Line": 3198
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                if (orient == PlotOrientation.VERTICAL) {",
        " Mark": "                           ^",
        " Line": 3211
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (order == DatasetRenderingOrder.FORWARD) {",
        " Mark": "                  ^",
        " Line": 3273
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (order == DatasetRenderingOrder.REVERSE) {",
        " Mark": "                       ^",
        " Line": 3305
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (orient == PlotOrientation.VERTICAL) {",
        " Mark": "                       ^",
        " Line": 3349
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (orient == PlotOrientation.VERTICAL) {",
        " Mark": "                       ^",
        " Line": 3371
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "drawBackground overrides method in Plot; expected @Override",
        " Code": "    public void drawBackground(Graphics2D g2, Rectangle2D area) {",
        " Mark": "                ^",
        " Line": 3411
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                if (this.orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                                     ^",
        " Line": 3461
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                if (this.orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                                     ^",
        " Line": 3476
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                if (this.orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                                     ^",
        " Line": 3491
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                if (this.orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                                     ^",
        " Line": 3506
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (seriesOrder == SeriesRenderingOrder.REVERSE) {",
        " Mark": "                            ^",
        " Line": 3732
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                new Integer(index));",
        " Mark": "                ^",
        " Line": 3816
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                new Integer(index));",
        " Mark": "                ^",
        " Line": 3843
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                if ((tick.getTickType() == TickType.MINOR)",
        " Mark": "                                        ^",
        " Line": 3881
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                else if ((tick.getTickType() == TickType.MAJOR)",
        " Mark": "                                             ^",
        " Line": 3887
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                    if ((tick.getTickType() == TickType.MINOR)",
        " Mark": "                                            ^",
        " Line": 3932
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                    else if ((tick.getTickType() == TickType.MAJOR)",
        " Mark": "                                                 ^",
        " Line": 3938
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        Integer key = new Integer(index);",
        " Mark": "                      ^",
        " Line": 4113
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (layer == Layer.FOREGROUND) {",
        " Mark": "                  ^",
        " Line": 4114
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (layer == Layer.BACKGROUND) {",
        " Mark": "                       ^",
        " Line": 4117
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        Integer key = new Integer(index);",
        " Mark": "                      ^",
        " Line": 4139
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (layer == Layer.FOREGROUND) {",
        " Mark": "                  ^",
        " Line": 4140
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        else if (layer == Layer.BACKGROUND) {",
        " Mark": "                       ^",
        " Line": 4143
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (getOrientation() == PlotOrientation.HORIZONTAL) {",
        " Mark": "                             ^",
        " Line": 4167
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (orientation == PlotOrientation.VERTICAL) {",
        " Mark": "                            ^",
        " Line": 4200
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (getOrientation() == PlotOrientation.HORIZONTAL) {",
        " Mark": "                             ^",
        " Line": 4232
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                            ^",
        " Line": 4266
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "handleClick overrides method in Plot; expected @Override",
        " Code": "    public void handleClick(int x, int y, PlotRenderingInfo info) {",
        " Mark": "                ^",
        " Line": 4292
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                    new Integer(i));",
        " Mark": "                    ^",
        " Line": 4329
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                    new Integer(i));",
        " Mark": "                    ^",
        " Line": 4359
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDataRange implements method in ValueAxisPlot; expected @Override",
        " Code": "    public Range getDataRange(ValueAxis axis) {",
        " Mark": "                 ^",
        " Line": 4425
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                    new Integer(domainIndex)));",
        " Mark": "                    ^",
        " Line": 4437
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                    new Integer(rangeIndex)));",
        " Mark": "                    ^",
        " Line": 4455
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "datasetChanged overrides method in Plot; expected @Override",
        " Code": "    public void datasetChanged(DatasetChangeEvent event) {",
        " Mark": "                ^",
        " Line": 4530
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "rendererChanged implements method in RendererChangeListener; expected @Override",
        " Code": "    public void rendererChanged(RendererChangeEvent event) {",
        " Mark": "                ^",
        " Line": 4548
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isDomainPannable implements method in Pannable; expected @Override",
        " Code": "    public boolean isDomainPannable() {",
        " Mark": "                   ^",
        " Line": 4959
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isRangePannable implements method in Pannable; expected @Override",
        " Code": "    public boolean isRangePannable() {",
        " Mark": "                   ^",
        " Line": 4983
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "panDomainAxes implements method in Pannable; expected @Override",
        " Code": "    public void panDomainAxes(double percent, PlotRenderingInfo info,",
        " Mark": "                ^",
        " Line": 5008
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "panRangeAxes implements method in Pannable; expected @Override",
        " Code": "    public void panRangeAxes(double percent, PlotRenderingInfo info,",
        " Mark": "                ^",
        " Line": 5035
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "zoomDomainAxes implements method in Zoomable; expected @Override",
        " Code": "    public void zoomDomainAxes(double factor, PlotRenderingInfo info,",
        " Mark": "                ^",
        " Line": 5062
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "zoomDomainAxes implements method in Zoomable; expected @Override",
        " Code": "    public void zoomDomainAxes(double factor, PlotRenderingInfo info,",
        " Mark": "                ^",
        " Line": 5080
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                    if (this.orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                                         ^",
        " Line": 5091
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "zoomDomainAxes implements method in Zoomable; expected @Override",
        " Code": "    public void zoomDomainAxes(double lowerPercent, double upperPercent,",
        " Mark": "                ^",
        " Line": 5119
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "zoomRangeAxes implements method in Zoomable; expected @Override",
        " Code": "    public void zoomRangeAxes(double factor, PlotRenderingInfo info,",
        " Mark": "                ^",
        " Line": 5138
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "zoomRangeAxes implements method in Zoomable; expected @Override",
        " Code": "    public void zoomRangeAxes(double factor, PlotRenderingInfo info,",
        " Mark": "                ^",
        " Line": 5157
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                    if (this.orientation == PlotOrientation.HORIZONTAL) {",
        " Mark": "                                         ^",
        " Line": 5168
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "zoomRangeAxes implements method in Zoomable; expected @Override",
        " Code": "    public void zoomRangeAxes(double lowerPercent, double upperPercent,",
        " Mark": "                ^",
        " Line": 5192
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isDomainZoomable implements method in Zoomable; expected @Override",
        " Code": "    public boolean isDomainZoomable() {",
        " Mark": "                   ^",
        " Line": 5210
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isRangeZoomable implements method in Zoomable; expected @Override",
        " Code": "    public boolean isRangeZoomable() {",
        " Mark": "                   ^",
        " Line": 5222
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLegendItems overrides method in Plot; expected @Override",
        " Code": "    public LegendItemCollection getLegendItems() {",
        " Mark": "                                ^",
        " Line": 5273
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Plot; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 5311
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (this.orientation != that.orientation) {",
        " Mark": "                             ^",
        " Line": 5322
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "clone overrides method in Plot; expected @Override",
        " Code": "    public Object clone() throws CloneNotSupportedException {",
        " Mark": "                  ^",
        " Line": 5522
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "canSelectByPoint implements method in Selectable; expected @Override",
        " Code": "    public boolean canSelectByPoint() {",
        " Mark": "                   ^",
        " Line": 5715
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "canSelectByRegion implements method in Selectable; expected @Override",
        " Code": "    public boolean canSelectByRegion() {",
        " Mark": "                   ^",
        " Line": 5727
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "select implements method in Selectable; expected @Override",
        " Code": "    public void select(double x, double y, Rectangle2D dataArea,",
        " Mark": "                ^",
        " Line": 5736
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "select implements method in Selectable; expected @Override",
        " Code": "    public void select(GeneralPath region, Rectangle2D dataArea,",
        " Mark": "                ^",
        " Line": 5750
    },
    {
        " Proj": "Chart-4",
        "Class": "org.jfree.chart.plot.XYPlot",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "clearSelection implements method in Selectable; expected @Override",
        " Code": "    public void clearSelection() {",
        " Mark": "                ^",
        " Line": 5849
    },
    {
        " Proj": "Chart-5",
        "Class": "org.jfree.data.xy.XYSeries",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getItemCount implements method in Series; expected @Override",
        " Code": "    public int getItemCount() {",
        " Mark": "               ^",
        " Line": 185
    },
    {
        " Proj": "Chart-5",
        "Class": "org.jfree.data.xy.XYSeries",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        add(new Double(x), new Double(y), true);",
        " Mark": "            ^",
        " Line": 255
    },
    {
        " Proj": "Chart-5",
        "Class": "org.jfree.data.xy.XYSeries",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        add(new Double(x), new Double(y), true);",
        " Mark": "                           ^",
        " Line": 255
    },
    {
        " Proj": "Chart-5",
        "Class": "org.jfree.data.xy.XYSeries",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        add(new Double(x), new Double(y), notify);",
        " Mark": "            ^",
        " Line": 269
    },
    {
        " Proj": "Chart-5",
        "Class": "org.jfree.data.xy.XYSeries",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        add(new Double(x), new Double(y), notify);",
        " Mark": "                           ^",
        " Line": 269
    },
    {
        " Proj": "Chart-5",
        "Class": "org.jfree.data.xy.XYSeries",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        add(new Double(x), y);",
        " Mark": "            ^",
        " Line": 281
    },
    {
        " Proj": "Chart-5",
        "Class": "org.jfree.data.xy.XYSeries",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        add(new Double(x), y, notify);",
        " Mark": "            ^",
        " Line": 296
    },
    {
        " Proj": "Chart-5",
        "Class": "org.jfree.data.xy.XYSeries",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        return addOrUpdate(new Double(x), new Double(y));",
        " Mark": "                           ^",
        " Line": 527
    },
    {
        " Proj": "Chart-5",
        "Class": "org.jfree.data.xy.XYSeries",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        return addOrUpdate(new Double(x), new Double(y));",
        " Mark": "                                          ^",
        " Line": 527
    },
    {
        " Proj": "Chart-5",
        "Class": "org.jfree.data.xy.XYSeries",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "clone overrides method in Series; expected @Override",
        " Code": "    public Object clone() throws CloneNotSupportedException {",
        " Mark": "                  ^",
        " Line": 637
    },
    {
        " Proj": "Chart-5",
        "Class": "org.jfree.data.xy.XYSeries",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Series; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 682
    },
    {
        " Proj": "Chart-5",
        "Class": "org.jfree.data.xy.XYSeries",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Series; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 713
    },
    {
        " Proj": "Chart-6",
        "Class": "org.jfree.chart.util.ShapeList",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "clone overrides method in AbstractObjectList; expected @Override",
        " Code": "    public Object clone() throws CloneNotSupportedException {",
        " Mark": "                  ^",
        " Line": 92
    },
    {
        " Proj": "Chart-6",
        "Class": "org.jfree.chart.util.ShapeList",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in AbstractObjectList; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 103
    },
    {
        " Proj": "Chart-6",
        "Class": "org.jfree.chart.util.ShapeList",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in AbstractObjectList; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 127
    },
    {
        " Proj": "Chart-7",
        "Class": "org.jfree.data.time.TimePeriodValues",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getItemCount implements method in Series; expected @Override",
        " Code": "    public int getItemCount() {",
        " Mark": "               ^",
        " Line": 192
    },
    {
        " Proj": "Chart-7",
        "Class": "org.jfree.data.time.TimePeriodValues",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Series; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 414
    },
    {
        " Proj": "Chart-7",
        "Class": "org.jfree.data.time.TimePeriodValues",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Series; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 450
    },
    {
        " Proj": "Chart-7",
        "Class": "org.jfree.data.time.TimePeriodValues",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "clone overrides method in Series; expected @Override",
        " Code": "    public Object clone() throws CloneNotSupportedException {",
        " Mark": "                  ^",
        " Line": 479
    },
    {
        " Proj": "Chart-8",
        "Class": "org.jfree.data.time.Week",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getFirstMillisecond implements method in RegularTimePeriod; expected @Override",
        " Code": "    public long getFirstMillisecond() {",
        " Mark": "                ^",
        " Line": 261
    },
    {
        " Proj": "Chart-8",
        "Class": "org.jfree.data.time.Week",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLastMillisecond implements method in RegularTimePeriod; expected @Override",
        " Code": "    public long getLastMillisecond() {",
        " Mark": "                ^",
        " Line": 275
    },
    {
        " Proj": "Chart-8",
        "Class": "org.jfree.data.time.Week",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "peg implements method in RegularTimePeriod; expected @Override",
        " Code": "    public void peg(Calendar calendar) {",
        " Mark": "                ^",
        " Line": 287
    },
    {
        " Proj": "Chart-8",
        "Class": "org.jfree.data.time.Week",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "previous implements method in RegularTimePeriod; expected @Override",
        " Code": "    public RegularTimePeriod previous() {",
        " Mark": "                             ^",
        " Line": 300
    },
    {
        " Proj": "Chart-8",
        "Class": "org.jfree.data.time.Week",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "next implements method in RegularTimePeriod; expected @Override",
        " Code": "    public RegularTimePeriod next() {",
        " Mark": "                             ^",
        " Line": 332
    },
    {
        " Proj": "Chart-8",
        "Class": "org.jfree.data.time.Week",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getSerialIndex implements method in RegularTimePeriod; expected @Override",
        " Code": "    public long getSerialIndex() {",
        " Mark": "                ^",
        " Line": 364
    },
    {
        " Proj": "Chart-8",
        "Class": "org.jfree.data.time.Week",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getFirstMillisecond implements method in RegularTimePeriod; expected @Override",
        " Code": "    public long getFirstMillisecond(Calendar calendar) {",
        " Mark": "                ^",
        " Line": 379
    },
    {
        " Proj": "Chart-8",
        "Class": "org.jfree.data.time.Week",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLastMillisecond implements method in RegularTimePeriod; expected @Override",
        " Code": "    public long getLastMillisecond(Calendar calendar) {",
        " Mark": "                ^",
        " Line": 404
    },
    {
        " Proj": "Chart-8",
        "Class": "org.jfree.data.time.Week",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString overrides method in RegularTimePeriod; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 425
    },
    {
        " Proj": "Chart-8",
        "Class": "org.jfree.data.time.Week",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 439
    },
    {
        " Proj": "Chart-8",
        "Class": "org.jfree.data.time.Week",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Object; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 467
    },
    {
        " Proj": "Chart-8",
        "Class": "org.jfree.data.time.Week",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compareTo implements method in Comparable; expected @Override",
        " Code": "    public int compareTo(Object o1) {",
        " Mark": "               ^",
        " Line": 484
    },
    {
        " Proj": "Chart-9",
        "Class": "org.jfree.data.time.TimeSeries",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getItemCount implements method in Series; expected @Override",
        " Code": "    public int getItemCount() {",
        " Mark": "               ^",
        " Line": 239
    },
    {
        " Proj": "Chart-9",
        "Class": "org.jfree.data.time.TimeSeries",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        return addOrUpdate(period, new Double(value));",
        " Mark": "                                   ^",
        " Line": 677
    },
    {
        " Proj": "Chart-9",
        "Class": "org.jfree.data.time.TimeSeries",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "clone overrides method in Series; expected @Override",
        " Code": "    public Object clone() throws CloneNotSupportedException {",
        " Mark": "                  ^",
        " Line": 858
    },
    {
        " Proj": "Chart-9",
        "Class": "org.jfree.data.time.TimeSeries",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Series; expected @Override",
        " Code": "    public boolean equals(Object object) {",
        " Mark": "                   ^",
        " Line": 965
    },
    {
        " Proj": "Chart-9",
        "Class": "org.jfree.data.time.TimeSeries",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Series; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 1012
    },
    {
        " Proj": "Closure-1",
        "Class": "com.googlescript.jscomp.RemoveUnusedVars",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "          toRemove.isParamList() &&",
        " Mark": "                                 ^",
        " Line": 830
    },
    {
        " Proj": "Closure-10",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final Set<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS =",
        " Mark": "                          ^",
        " Line": 967
    },
    {
        " Proj": "Closure-10",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final Set<String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS =",
        " Mark": "                          ^",
        " Line": 970
    },
    {
        " Proj": "Closure-10",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final Set<String> REGEXP_METHODS =",
        " Mark": "                          ^",
        " Line": 972
    },
    {
        " Proj": "Closure-10",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final Set<String> STRING_REGEXP_METHODS =",
        " Mark": "                          ^",
        " Line": 974
    },
    {
        " Proj": "Closure-100",
        "Class": "com.googlescript.jscomp.CheckGlobalThis",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "shouldTraverse implements method in Callback; expected @Override",
        " Code": "  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {",
        " Mark": "                 ^",
        " Line": 84
    },
    {
        " Proj": "Closure-100",
        "Class": "com.googlescript.jscomp.CheckGlobalThis",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "visit implements method in Callback; expected @Override",
        " Code": "  public void visit(NodeTraversal t, Node n, Node parent) {",
        " Mark": "              ^",
        " Line": 137
    },
    {
        " Proj": "Closure-101",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-102",
        "Class": "com.googlescript.jscomp.Normalize",
        " Type": "warning",
        "  Cat": "ClassCanBeStatic",
        "  Msg": "Inner class is non-static but does not reference enclosing class",
        " Code": "  private final class ScopeTicklingCallback",
        " Mark": "                ^",
        " Line": 503
    },
    {
        " Proj": "Closure-103",
        "Class": "com.googlescript.jscomp.DisambiguateProperties",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "process implements method in CompilerPass; expected @Override",
        " Code": "  public void process(Node externs, Node root) {",
        " Mark": "              ^",
        " Line": 278
    },
    {
        " Proj": "Closure-103",
        "Class": "com.googlescript.jscomp.DisambiguateProperties",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "shouldTraverse implements method in Callback; expected @Override",
        " Code": "    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {",
        " Mark": "                   ^",
        " Line": 328
    },
    {
        " Proj": "Closure-103",
        "Class": "com.googlescript.jscomp.DisambiguateProperties",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "enterScope implements method in ScopedCallback; expected @Override",
        " Code": "    public void enterScope(NodeTraversal t) {",
        " Mark": "                ^",
        " Line": 332
    },
    {
        " Proj": "Closure-103",
        "Class": "com.googlescript.jscomp.DisambiguateProperties",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "exitScope implements method in ScopedCallback; expected @Override",
        " Code": "    public void exitScope(NodeTraversal t) {",
        " Mark": "                ^",
        " Line": 340
    },
    {
        " Proj": "Closure-103",
        "Class": "com.googlescript.jscomp.DisambiguateProperties",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "      while (objType != null && objType.getImplicitPrototype() != objType) {",
        " Mark": "                                                               ^",
        " Line": 755
    },
    {
        " Proj": "Closure-104",
        "Class": "com.googlescript.rhino.jstype.UnionType",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "      changed |= (alternate != newAlternate);",
        " Mark": "                            ^",
        " Line": 490
    },
    {
        " Proj": "Closure-105",
        "Class": "com.googlescript.jscomp.FoldConstants",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "process implements method in CompilerPass; expected @Override",
        " Code": "  public void process(Node externs, Node jsRoot) {",
        " Mark": "              ^",
        " Line": 86
    },
    {
        " Proj": "Closure-105",
        "Class": "com.googlescript.jscomp.FoldConstants",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "visit implements method in Callback; expected @Override",
        " Code": "  public void visit(NodeTraversal t, Node n, Node parent) {",
        " Mark": "              ^",
        " Line": 90
    },
    {
        " Proj": "Closure-105",
        "Class": "com.googlescript.jscomp.FoldConstants",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "visit implements method in Callback; expected @Override",
        " Code": "      public void visit(NodeTraversal t, Node n, Node parent) {",
        " Mark": "                  ^",
        " Line": 917
    },
    {
        " Proj": "Closure-105",
        "Class": "com.googlescript.jscomp.FoldConstants",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "visit implements method in Callback; expected @Override",
        " Code": "      public void visit(NodeTraversal t, Node n, Node parent) {",
        " Mark": "                  ^",
        " Line": 933
    },
    {
        " Proj": "Closure-105",
        "Class": "com.googlescript.jscomp.FoldConstants",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "      if (lval && type == Token.OR ||",
        " Mark": "               ^",
        " Line": 953
    },
    {
        " Proj": "Closure-105",
        "Class": "com.googlescript.jscomp.FoldConstants",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "          !lval && type == Token.AND) {",
        " Mark": "                ^",
        " Line": 954
    },
    {
        " Proj": "Closure-105",
        "Class": "com.googlescript.jscomp.FoldConstants",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "        if (type == Token.OR && !rval ||",
        " Mark": "                             ^",
        " Line": 979
    },
    {
        " Proj": "Closure-105",
        "Class": "com.googlescript.jscomp.FoldConstants",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "            type == Token.AND && rval) {",
        " Mark": "                              ^",
        " Line": 980
    },
    {
        " Proj": "Closure-106",
        "Class": "com.googlescript.jscomp.GlobalNamespace",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 130
    },
    {
        " Proj": "Closure-106",
        "Class": "com.googlescript.jscomp.GlobalNamespace",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "visit implements method in Callback; expected @Override",
        " Code": "    public void visit(NodeTraversal t, Node n, Node parent) {",
        " Mark": "                ^",
        " Line": 234
    },
    {
        " Proj": "Closure-106",
        "Class": "com.googlescript.jscomp.GlobalNamespace",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "             (info.isConstructor() && valueNodeType == Token.FUNCTION ||",
        " Mark": "                                   ^",
        " Line": 498
    },
    {
        " Proj": "Closure-106",
        "Class": "com.googlescript.jscomp.GlobalNamespace",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "              info.hasEnumParameterType() && valueNodeType == Token.OBJECTLIT);",
        " Mark": "                                          ^",
        " Line": 499
    },
    {
        " Proj": "Closure-106",
        "Class": "com.googlescript.jscomp.GlobalNamespace",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "          (parent == null || parent.canCollapseUnannotatedChildNames()) &&",
        " Mark": "                                                                        ^",
        " Line": 895
    },
    {
        " Proj": "Closure-107",
        "Class": "com.googlescript.jscomp.CommandLineRunner",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final List<String> DEFAULT_EXTERNS_NAMES = ImmutableList.of(",
        " Mark": "                           ^",
        " Line": 887
    },
    {
        " Proj": "Closure-108",
        "Class": "com.googlescript.jscomp.ScopedAliases",
        " Type": "warning",
        "  Cat": "ClassCanBeStatic",
        "  Msg": "Inner class is non-static but does not reference enclosing class",
        " Code": "  private abstract class AliasUsage {",
        " Mark": "                   ^",
        " Line": 191
    },
    {
        " Proj": "Closure-108",
        "Class": "com.googlescript.jscomp.ScopedAliases",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (lexicalVar != null && lexicalVar == aliases.get(name)) {",
        " Mark": "                                             ^",
        " Line": 540
    },
    {
        " Proj": "Closure-109",
        "Class": "com.googlescript.jscomp.parsing.JsDocInfoParser",
        " Type": "error",
        "  Cat": "MissingCasesInEnumSwitch",
        "  Msg": "Non-exhaustive switch; either add a default or handle the remaining cases: NG_INJECT, AUTHOR, CONSISTENTIDGENERATOR, and 44 others",
        " Code": "            switch (annotation) {",
        " Mark": "            ^",
        " Line": 978
    },
    {
        " Proj": "Closure-11",
        "Class": "com.googlescript.jscomp.TypeCheck",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "      if (baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE) &&",
        " Mark": "                          ^",
        " Line": 1522
    },
    {
        " Proj": "Closure-11",
        "Class": "com.googlescript.jscomp.TypeCheck",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE) &&",
        " Mark": "                            ^",
        " Line": 1529
    },
    {
        " Proj": "Closure-11",
        "Class": "com.googlescript.jscomp.TypeCheck",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "            parameter != null && parameter.isVarArgs())) {",
        " Mark": "                              ^",
        " Line": 1668
    },
    {
        " Proj": "Closure-110",
        "Class": "com.googlescript.rhino.Node",
        " Type": "warning",
        "  Cat": "IterableAndIterator",
        "  Msg": "Class should not implement both `Iterable` and `Iterator`",
        " Code": "  private static final class SiblingNodeIterable",
        " Mark": "                       ^",
        " Line": 1267
    },
    {
        " Proj": "Closure-110",
        "Class": "com.googlescript.jscomp.ScopedAliases",
        " Type": "warning",
        "  Cat": "ClassCanBeStatic",
        "  Msg": "Inner class is non-static but does not reference enclosing class",
        " Code": "  private abstract class AliasUsage {",
        " Mark": "                   ^",
        " Line": 191
    },
    {
        " Proj": "Closure-110",
        "Class": "com.googlescript.jscomp.ScopedAliases",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (lexicalVar != null && lexicalVar == aliases.get(name)) {",
        " Mark": "                                             ^",
        " Line": 532
    },
    {
        " Proj": "Closure-111",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-112",
        "Class": "com.googlescript.jscomp.TypeInference",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "              var.getType() == unknownType) {",
        " Mark": "                            ^",
        " Line": 143
    },
    {
        " Proj": "Closure-112",
        "Class": "com.googlescript.jscomp.TypeInference",
        " Type": "error",
        "  Cat": "MissingCasesInEnumSwitch",
        "  Msg": "Non-exhaustive switch; either add a default or handle the remaining cases: UNCOND, ON_EX, SYN_BLOCK",
        " Code": "      switch (branch) {",
        " Mark": "      ^",
        " Line": 211
    },
    {
        " Proj": "Closure-112",
        "Class": "com.googlescript.jscomp.TypeInference",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "      if (type != narrowed) {",
        " Mark": "               ^",
        " Line": 1319
    },
    {
        " Proj": "Closure-112",
        "Class": "com.googlescript.jscomp.TypeInference",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "      if (nodeType == Token.AND && outcome ||",
        " Mark": "                                ^",
        " Line": 1551
    },
    {
        " Proj": "Closure-112",
        "Class": "com.googlescript.jscomp.TypeInference",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "          nodeType == Token.OR && !outcome) {",
        " Mark": "                               ^",
        " Line": 1552
    },
    {
        " Proj": "Closure-113",
        "Class": "com.googlescript.jscomp.ProcessClosurePrimitives",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "            parent.getLastChild() == scopeRoot &&",
        " Mark": "                                               ^",
        " Line": 548
    },
    {
        " Proj": "Closure-113",
        "Class": "com.googlescript.jscomp.ProcessClosurePrimitives",
        " Type": "warning",
        "  Cat": "ClassCanBeStatic",
        "  Msg": "Inner class is non-static but does not reference enclosing class",
        " Code": "  private class UnrecognizedRequire {",
        " Mark": "          ^",
        " Line": 1222
    },
    {
        " Proj": "Closure-114",
        "Class": "com.googlescript.jscomp.NameAnalyzer",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  static final Set<String> DEFAULT_GLOBAL_NAMES = ImmutableSet.of(",
        " Mark": "                  ^",
        " Line": 115
    },
    {
        " Proj": "Closure-114",
        "Class": "com.googlescript.jscomp.NameAnalyzer",
        " Type": "warning",
        "  Cat": "ClassCanBeStatic",
        "  Msg": "Inner class is non-static but does not reference enclosing class",
        " Code": "  private abstract class SpecialReferenceNode implements RefNode {",
        " Mark": "                   ^",
        " Line": 375
    },
    {
        " Proj": "Closure-115",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-116",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-117",
        "Class": "com.googlescript.jscomp.TypeValidator",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        varType != typeRegistry.getNativeType(UNKNOWN_TYPE) &&",
        " Mark": "                ^",
        " Line": 544
    },
    {
        " Proj": "Closure-117",
        "Class": "com.googlescript.jscomp.TypeValidator",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        newType != typeRegistry.getNativeType(UNKNOWN_TYPE)) {",
        " Mark": "                ^",
        " Line": 546
    },
    {
        " Proj": "Closure-118",
        "Class": "com.googlescript.jscomp.DisambiguateProperties",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        while (objType != null && objType.getImplicitPrototype() != objType) {",
        " Mark": "                                                                 ^",
        " Line": 893
    },
    {
        " Proj": "Closure-119",
        "Class": "com.googlescript.jscomp.GlobalNamespace",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "             (info.isConstructor() && valueNode.isFunction() ||",
        " Mark": "                                   ^",
        " Line": 589
    },
    {
        " Proj": "Closure-119",
        "Class": "com.googlescript.jscomp.GlobalNamespace",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "              info.isInterface() && valueNode.isFunction() ||",
        " Mark": "                                 ^",
        " Line": 590
    },
    {
        " Proj": "Closure-119",
        "Class": "com.googlescript.jscomp.GlobalNamespace",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "              info.hasEnumParameterType() && valueNode.isObjectLit());",
        " Mark": "                                          ^",
        " Line": 591
    },
    {
        " Proj": "Closure-119",
        "Class": "com.googlescript.jscomp.GlobalNamespace",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "          (globalSets > 0 || localSets > 0) &&",
        " Mark": "                                            ^",
        " Line": 1069
    },
    {
        " Proj": "Closure-12",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-120",
        "Class": "com.googlescript.jscomp.ReferenceCollectingCallback",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "    private static final Set<Integer> DECLARATION_PARENTS =",
        " Mark": "                            ^",
        " Line": 491
    },
    {
        " Proj": "Closure-120",
        "Class": "com.googlescript.jscomp.ReferenceCollectingCallback",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "          parent.isParamList() &&",
        " Mark": "                               ^",
        " Line": 563
    },
    {
        " Proj": "Closure-120",
        "Class": "com.googlescript.jscomp.ReferenceCollectingCallback",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "      return isDeclaration() &&",
        " Mark": "                             ^",
        " Line": 581
    },
    {
        " Proj": "Closure-121",
        "Class": "com.googlescript.jscomp.InlineVariables",
        " Type": "warning",
        "  Cat": "ClassCanBeStatic",
        "  Msg": "Inner class is non-static but does not reference enclosing class",
        " Code": "  private class IdentifyConstants implements Predicate<Var> {",
        " Mark": "          ^",
        " Line": 110
    },
    {
        " Proj": "Closure-121",
        "Class": "com.googlescript.jscomp.InlineVariables",
        " Type": "warning",
        "  Cat": "ClassCanBeStatic",
        "  Msg": "Inner class is non-static but does not reference enclosing class",
        " Code": "  private class IdentifyLocals implements Predicate<Var> {",
        " Mark": "          ^",
        " Line": 120
    },
    {
        " Proj": "Closure-122",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-123",
        "Class": "com.googlescript.jscomp.CodeGenerator",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "    if (outputCharset == null || outputCharset == Charsets.US_ASCII) {",
        " Mark": "                                               ^",
        " Line": 74
    },
    {
        " Proj": "Closure-123",
        "Class": "com.googlescript.jscomp.CodeGenerator",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {",
        " Mark": "                                                ^",
        " Line": 543
    },
    {
        " Proj": "Closure-124",
        "Class": "com.googlescript.jscomp.ExploitAssigns",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "              leftSide.isGetProp() &&",
        " Mark": "                                   ^",
        " Line": 172
    },
    {
        " Proj": "Closure-125",
        "Class": "com.googlescript.jscomp.TypeCheck",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "      if (baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE) &&",
        " Mark": "                          ^",
        " Line": 1729
    },
    {
        " Proj": "Closure-125",
        "Class": "com.googlescript.jscomp.TypeCheck",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE)) {",
        " Mark": "                            ^",
        " Line": 1736
    },
    {
        " Proj": "Closure-125",
        "Class": "com.googlescript.jscomp.TypeCheck",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "            parameter != null && parameter.isVarArgs())) {",
        " Mark": "                              ^",
        " Line": 1871
    },
    {
        " Proj": "Closure-126",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-127",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-128",
        "Class": "com.googlescript.jscomp.CodeGenerator",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "    if (outputCharset == null || outputCharset == Charsets.US_ASCII) {",
        " Mark": "                                               ^",
        " Line": 71
    },
    {
        " Proj": "Closure-128",
        "Class": "com.googlescript.jscomp.CodeGenerator",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {",
        " Mark": "                                                ^",
        " Line": 529
    },
    {
        " Proj": "Closure-129",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-13",
        "Class": "com.googlescript.jscomp.PeepholeOptimizationsPass",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "    if (node.getParent() != null && node.isFunction() || node.isScript()) {",
        " Mark": "                                 ^",
        " Line": 141
    },
    {
        " Proj": "Closure-130",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-131",
        "Class": "com.googlescript.rhino.TokenStream",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (X!=null && X!=s && !X.equals(s)) return false;",
        " Mark": "                            ^",
        " Line": 185
    },
    {
        " Proj": "Closure-132",
        "Class": "com.googlescript.jscomp.PeepholeSubstituteAlternateSyntax",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "          if (type == Token.OR && !rval ||",
        " Mark": "                               ^",
        " Line": 1235
    },
    {
        " Proj": "Closure-132",
        "Class": "com.googlescript.jscomp.PeepholeSubstituteAlternateSyntax",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "              type == Token.AND && rval) {",
        " Mark": "                                ^",
        " Line": 1236
    },
    {
        " Proj": "Closure-133",
        "Class": "com.googlescript.jscomp.parsing.JsDocInfoParser",
        " Type": "error",
        "  Cat": "MissingCasesInEnumSwitch",
        "  Msg": "Non-exhaustive switch; either add a default or handle the remaining cases: NG_INJECT, AUTHOR, CONSISTENTIDGENERATOR, and 40 others",
        " Code": "                    switch (annotation) {",
        " Mark": "                    ^",
        " Line": 906
    },
    {
        " Proj": "Closure-14",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-15",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-16",
        "Class": "com.googlescript.jscomp.ScopedAliases",
        " Type": "warning",
        "  Cat": "ClassCanBeStatic",
        "  Msg": "Inner class is non-static but does not reference enclosing class",
        " Code": "  private class AliasedNode implements AliasUsage {",
        " Mark": "          ^",
        " Line": 151
    },
    {
        " Proj": "Closure-16",
        "Class": "com.googlescript.jscomp.ScopedAliases",
        " Type": "warning",
        "  Cat": "ClassCanBeStatic",
        "  Msg": "Inner class is non-static but does not reference enclosing class",
        " Code": "  private class AliasedTypeNode implements AliasUsage {",
        " Mark": "          ^",
        " Line": 168
    },
    {
        " Proj": "Closure-16",
        "Class": "com.googlescript.jscomp.ScopedAliases",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (lexicalVar != null && lexicalVar == aliases.get(name)) {",
        " Mark": "                                             ^",
        " Line": 410
    },
    {
        " Proj": "Closure-17",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-18",
        "Class": "com.googlescript.jscomp.Compiler",
        " Type": "warning",
        "  Cat": "JavaLangClash",
        "  Msg": "com.google.javascript.jscomp.Compiler clashes with java.lang.Compiler",
        " Code": "public class Compiler extends AbstractCompiler {",
        " Mark": "       ^",
        " Line": 78
    },
    {
        " Proj": "Closure-18",
        "Class": "com.googlescript.jscomp.Compiler",
        " Type": "warning",
        "  Cat": "ThreadJoinLoop",
        "  Msg": "Thread.join needs to be surrounded by a loop until it succeeds, as in Uninterruptibles.joinUninterruptibly.",
        " Code": "          th.join();",
        " Mark": "                 ^",
        " Line": 646
    },
    {
        " Proj": "Closure-18",
        "Class": "com.googlescript.jscomp.Compiler",
        " Type": "error",
        "  Cat": "MissingCasesInEnumSwitch",
        "  Msg": "Non-exhaustive switch; either add a default or handle the remaining cases: ECMASCRIPT3",
        " Code": "    switch (options.getLanguageIn()) {",
        " Mark": "    ^",
        " Line": 1965
    },
    {
        " Proj": "Closure-19",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-2",
        "Class": "com.googlescript.jscomp.TypeCheck",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "      if (baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE) &&",
        " Mark": "                          ^",
        " Line": 1610
    },
    {
        " Proj": "Closure-2",
        "Class": "com.googlescript.jscomp.TypeCheck",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE)) {",
        " Mark": "                            ^",
        " Line": 1617
    },
    {
        " Proj": "Closure-2",
        "Class": "com.googlescript.jscomp.TypeCheck",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "            parameter != null && parameter.isVarArgs())) {",
        " Mark": "                              ^",
        " Line": 1752
    },
    {
        " Proj": "Closure-20",
        "Class": "com.googlescript.jscomp.PeepholeSubstituteAlternateSyntax",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "          if (type == Token.OR && !rval ||",
        " Mark": "                               ^",
        " Line": 1230
    },
    {
        " Proj": "Closure-20",
        "Class": "com.googlescript.jscomp.PeepholeSubstituteAlternateSyntax",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "              type == Token.AND && rval) {",
        " Mark": "                                ^",
        " Line": 1231
    },
    {
        " Proj": "Closure-21",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-22",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-23",
        "Class": "com.googlescript.jscomp.PeepholeFoldConstants",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "      if (lval && type == Token.OR ||",
        " Mark": "               ^",
        " Line": 576
    },
    {
        " Proj": "Closure-23",
        "Class": "com.googlescript.jscomp.PeepholeFoldConstants",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "          !lval && type == Token.AND) {",
        " Mark": "                ^",
        " Line": 577
    },
    {
        " Proj": "Closure-23",
        "Class": "com.googlescript.jscomp.PeepholeFoldConstants",
        " Type": "error",
        "  Cat": "MissingCasesInEnumSwitch",
        "  Msg": "Non-exhaustive switch; either add a default or handle the remaining cases: UNKNOWN",
        " Code": "      switch (value) {",
        " Mark": "      ^",
        " Line": 1171
    },
    {
        " Proj": "Closure-24",
        "Class": "com.googlescript.jscomp.ScopedAliases",
        " Type": "warning",
        "  Cat": "ClassCanBeStatic",
        "  Msg": "Inner class is non-static but does not reference enclosing class",
        " Code": "  private class AliasedNode implements AliasUsage {",
        " Mark": "          ^",
        " Line": 148
    },
    {
        " Proj": "Closure-24",
        "Class": "com.googlescript.jscomp.ScopedAliases",
        " Type": "warning",
        "  Cat": "ClassCanBeStatic",
        "  Msg": "Inner class is non-static but does not reference enclosing class",
        " Code": "  private class AliasedTypeNode implements AliasUsage {",
        " Mark": "          ^",
        " Line": 165
    },
    {
        " Proj": "Closure-24",
        "Class": "com.googlescript.jscomp.ScopedAliases",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (lexicalVar != null && lexicalVar == aliases.get(name)) {",
        " Mark": "                                             ^",
        " Line": 338
    },
    {
        " Proj": "Closure-25",
        "Class": "com.googlescript.jscomp.TypeInference",
        " Type": "error",
        "  Cat": "MissingCasesInEnumSwitch",
        "  Msg": "Non-exhaustive switch; either add a default or handle the remaining cases: UNCOND, ON_EX, SYN_BLOCK",
        " Code": "      switch (branch) {",
        " Mark": "      ^",
        " Line": 156
    },
    {
        " Proj": "Closure-25",
        "Class": "com.googlescript.jscomp.TypeInference",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "      if (type != narrowed) {",
        " Mark": "               ^",
        " Line": 1132
    },
    {
        " Proj": "Closure-25",
        "Class": "com.googlescript.jscomp.TypeInference",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "      if (nodeType == Token.AND && outcome ||",
        " Mark": "                                ^",
        " Line": 1337
    },
    {
        " Proj": "Closure-25",
        "Class": "com.googlescript.jscomp.TypeInference",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "          nodeType == Token.OR && !outcome) {",
        " Mark": "                               ^",
        " Line": 1338
    },
    {
        " Proj": "Closure-26",
        "Class": "com.googlescript.jscomp.ProcessCommonJSModules",
        " Type": "warning",
        "  Cat": "ClassCanBeStatic",
        "  Msg": "Inner class is non-static but does not reference enclosing class",
        " Code": "  private class SuffixVarsCallback extends AbstractPostOrderCallback {",
        " Mark": "          ^",
        " Line": 251
    },
    {
        " Proj": "Closure-27",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-28",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-29",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-3",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-30",
        "Class": "com.googlescript.jscomp.MustBeReachingVariableDef",
        " Type": "warning",
        "  Cat": "EqualsHashCode",
        "  Msg": "Classes that override equals should also override hashCode.",
        " Code": "    public boolean equals(Object other) {",
        " Mark": "                   ^",
        " Line": 78
    },
    {
        " Proj": "Closure-30",
        "Class": "com.googlescript.jscomp.MustBeReachingVariableDef",
        " Type": "warning",
        "  Cat": "EqualsHashCode",
        "  Msg": "Classes that override equals should also override hashCode.",
        " Code": "    public boolean equals(Object other) {",
        " Mark": "                   ^",
        " Line": 141
    },
    {
        " Proj": "Closure-31",
        "Class": "com.googlescript.jscomp.Compiler",
        " Type": "warning",
        "  Cat": "JavaLangClash",
        "  Msg": "com.google.javascript.jscomp.Compiler clashes with java.lang.Compiler",
        " Code": "public class Compiler extends AbstractCompiler {",
        " Mark": "       ^",
        " Line": 77
    },
    {
        " Proj": "Closure-31",
        "Class": "com.googlescript.jscomp.Compiler",
        " Type": "warning",
        "  Cat": "ThreadJoinLoop",
        "  Msg": "Thread.join needs to be surrounded by a loop until it succeeds, as in Uninterruptibles.joinUninterruptibly.",
        " Code": "          th.join();",
        " Mark": "                 ^",
        " Line": 642
    },
    {
        " Proj": "Closure-31",
        "Class": "com.googlescript.jscomp.Compiler",
        " Type": "error",
        "  Cat": "MissingCasesInEnumSwitch",
        "  Msg": "Non-exhaustive switch; either add a default or handle the remaining cases: ECMASCRIPT3",
        " Code": "    switch (options.getLanguageIn()) {",
        " Mark": "    ^",
        " Line": 1917
    },
    {
        " Proj": "Closure-32",
        "Class": "com.googlescript.jscomp.parsing.JsDocInfoParser",
        " Type": "error",
        "  Cat": "MissingCasesInEnumSwitch",
        "  Msg": "Non-exhaustive switch; either add a default or handle the remaining cases: AUTHOR, CONSISTENTIDGENERATOR, CONSTANT, and 38 others",
        " Code": "                    switch (annotation) {",
        " Mark": "                    ^",
        " Line": 849
    },
    {
        " Proj": "Closure-33",
        "Class": "com.googlescript.rhino.jstype.PrototypeObjectType",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "    return propertyType != nativePropertyType;",
        " Mark": "                        ^",
        " Line": 326
    },
    {
        " Proj": "Closure-33",
        "Class": "com.googlescript.rhino.jstype.PrototypeObjectType",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setOwnerFunction overrides method in ObjectType; expected @Override",
        " Code": "  void setOwnerFunction(FunctionType type) {",
        " Mark": "       ^",
        " Line": 515
    },
    {
        " Proj": "Closure-34",
        "Class": "com.googlescript.jscomp.CodeGenerator",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "    if (outputCharset == null || outputCharset == Charsets.US_ASCII) {",
        " Mark": "                                               ^",
        " Line": 51
    },
    {
        " Proj": "Closure-34",
        "Class": "com.googlescript.jscomp.CodeGenerator",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {",
        " Mark": "                                                ^",
        " Line": 511
    },
    {
        " Proj": "Closure-35",
        "Class": "com.googlescript.jscomp.TypeInference",
        " Type": "error",
        "  Cat": "MissingCasesInEnumSwitch",
        "  Msg": "Non-exhaustive switch; either add a default or handle the remaining cases: UNCOND, ON_EX, SYN_BLOCK",
        " Code": "      switch (branch) {",
        " Mark": "      ^",
        " Line": 154
    },
    {
        " Proj": "Closure-35",
        "Class": "com.googlescript.jscomp.TypeInference",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (type != narrowed) {",
        " Mark": "                 ^",
        " Line": 819
    },
    {
        " Proj": "Closure-35",
        "Class": "com.googlescript.jscomp.TypeInference",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "      if (type != narrowed) {",
        " Mark": "               ^",
        " Line": 835
    },
    {
        " Proj": "Closure-35",
        "Class": "com.googlescript.jscomp.TypeInference",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "      if (type != narrowed) {",
        " Mark": "               ^",
        " Line": 1134
    },
    {
        " Proj": "Closure-35",
        "Class": "com.googlescript.jscomp.TypeInference",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "      if (nodeType == Token.AND && outcome ||",
        " Mark": "                                ^",
        " Line": 1339
    },
    {
        " Proj": "Closure-35",
        "Class": "com.googlescript.jscomp.TypeInference",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "          nodeType == Token.OR && !outcome) {",
        " Mark": "                               ^",
        " Line": 1340
    },
    {
        " Proj": "Closure-36",
        "Class": "com.googlescript.jscomp.InlineVariables",
        " Type": "warning",
        "  Cat": "ClassCanBeStatic",
        "  Msg": "Inner class is non-static but does not reference enclosing class",
        " Code": "  private class IdentifyConstants implements Predicate<Var> {",
        " Mark": "          ^",
        " Line": 110
    },
    {
        " Proj": "Closure-36",
        "Class": "com.googlescript.jscomp.InlineVariables",
        " Type": "warning",
        "  Cat": "ClassCanBeStatic",
        "  Msg": "Inner class is non-static but does not reference enclosing class",
        " Code": "  private class IdentifyLocals implements Predicate<Var> {",
        " Mark": "          ^",
        " Line": 120
    },
    {
        " Proj": "Closure-37",
        "Class": "com.googlescript.jscomp.parsing.IRFactory",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final Set<String> ES5_RESERVED_KEYWORDS =",
        " Mark": "                          ^",
        " Line": 96
    },
    {
        " Proj": "Closure-37",
        "Class": "com.googlescript.jscomp.parsing.IRFactory",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final Set<String> ES5_STRICT_RESERVED_KEYWORDS =",
        " Mark": "                          ^",
        " Line": 100
    },
    {
        " Proj": "Closure-38",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-39",
        "Class": "com.googlescript.rhino.jstype.PrototypeObjectType",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "    return propertyType != nativePropertyType;",
        " Mark": "                        ^",
        " Line": 326
    },
    {
        " Proj": "Closure-4",
        "Class": "com.googlescript.rhino.jstype.NamedType",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        ((EnumElementType) referencedType).getPrimitiveType() == this) {",
        " Mark": "                                                              ^",
        " Line": 323
    },
    {
        " Proj": "Closure-40",
        "Class": "com.googlescript.jscomp.NameAnalyzer",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  static final Set<String> DEFAULT_GLOBAL_NAMES = ImmutableSet.of(",
        " Mark": "                  ^",
        " Line": 112
    },
    {
        " Proj": "Closure-40",
        "Class": "com.googlescript.jscomp.NameAnalyzer",
        " Type": "warning",
        "  Cat": "ClassCanBeStatic",
        "  Msg": "Inner class is non-static but does not reference enclosing class",
        " Code": "  private abstract class SpecialReferenceNode implements RefNode {",
        " Mark": "                   ^",
        " Line": 372
    },
    {
        " Proj": "Closure-40",
        "Class": "com.googlescript.jscomp.NameAnalyzer",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "            NodeUtil.isGet(n) && !parent.isGetProp())) {",
        " Mark": "                              ^",
        " Line": 818
    },
    {
        " Proj": "Closure-41",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-42",
        "Class": "com.googlescript.jscomp.parsing.IRFactory",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final Set<String> ES5_RESERVED_KEYWORDS =",
        " Mark": "                          ^",
        " Line": 96
    },
    {
        " Proj": "Closure-42",
        "Class": "com.googlescript.jscomp.parsing.IRFactory",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final Set<String> ES5_STRICT_RESERVED_KEYWORDS =",
        " Mark": "                          ^",
        " Line": 100
    },
    {
        " Proj": "Closure-43",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-44",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-45",
        "Class": "com.googlescript.jscomp.RemoveUnusedVars",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "          toRemove.isParamList() &&",
        " Mark": "                                 ^",
        " Line": 810
    },
    {
        " Proj": "Closure-46",
        "Class": "com.googlescript.rhino.jstype.RecordType",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "    if (otherRecord == this) {",
        " Mark": "                    ^",
        " Line": 103
    },
    {
        " Proj": "Closure-46",
        "Class": "com.googlescript.rhino.jstype.RecordType",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "      if (type != resolvedType) {",
        " Mark": "               ^",
        " Line": 275
    },
    {
        " Proj": "Closure-47",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-48",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-49",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-5",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-50",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-51",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-52",
        "Class": "com.googlescript.jscomp.CodeGenerator",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "    if (outputCharset == null || outputCharset == Charsets.US_ASCII) {",
        " Mark": "                                               ^",
        " Line": 52
    },
    {
        " Proj": "Closure-52",
        "Class": "com.googlescript.jscomp.CodeGenerator",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {",
        " Mark": "                                                ^",
        " Line": 521
    },
    {
        " Proj": "Closure-53",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-54",
        "Class": "com.googlescript.rhino.jstype.FunctionType",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getOwnPropertyNames overrides method in PrototypeObjectType; expected @Override",
        " Code": "  public Set<String> getOwnPropertyNames() {",
        " Mark": "                     ^",
        " Line": 290
    },
    {
        " Proj": "Closure-54",
        "Class": "com.googlescript.rhino.jstype.FunctionType",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "    if (isConstructor() && prototype == getInstanceType()) {",
        " Mark": "                                     ^",
        " Line": 361
    },
    {
        " Proj": "Closure-54",
        "Class": "com.googlescript.rhino.jstype.FunctionType",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        return this == that;",
        " Mark": "                    ^",
        " Line": 777
    },
    {
        " Proj": "Closure-54",
        "Class": "com.googlescript.rhino.jstype.FunctionType",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "    if (this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)) {",
        " Mark": "             ^",
        " Line": 811
    },
    {
        " Proj": "Closure-54",
        "Class": "com.googlescript.rhino.jstype.FunctionType",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "      changed |= (resolvedIface != iface);",
        " Mark": "                                ^",
        " Line": 1047
    },
    {
        " Proj": "Closure-54",
        "Class": "com.googlescript.rhino.jstype.FunctionType",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "    if (this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)) {",
        " Mark": "             ^",
        " Line": 1065
    },
    {
        " Proj": "Closure-54",
        "Class": "com.googlescript.rhino.jstype.FunctionType",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "    if (type == this) {",
        " Mark": "             ^",
        " Line": 1097
    },
    {
        " Proj": "Closure-55",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-56",
        "Class": "com.googlescript.jscomp.SourceFile",
        " Type": "warning",
        "  Cat": "DefaultCharset",
        "  Msg": "Implicit use of the platform default charset, which can result in e.g. non-ASCII characters being silently replaced with '?' in many environments",
        " Code": "        return new FileReader(file);",
        " Mark": "               ^",
        " Line": 456
    },
    {
        " Proj": "Closure-57",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-58",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-59",
        "Class": "com.googlescript.jscomp.Compiler",
        " Type": "warning",
        "  Cat": "JavaLangClash",
        "  Msg": "com.google.javascript.jscomp.Compiler clashes with java.lang.Compiler",
        " Code": "public class Compiler extends AbstractCompiler {",
        " Mark": "       ^",
        " Line": 68
    },
    {
        " Proj": "Closure-59",
        "Class": "com.googlescript.jscomp.Compiler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "call implements method in Callable; expected @Override",
        " Code": "      public Result call() throws Exception {",
        " Mark": "                    ^",
        " Line": 557
    },
    {
        " Proj": "Closure-59",
        "Class": "com.googlescript.jscomp.Compiler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "run implements method in Runnable; expected @Override",
        " Code": "      public void run() {",
        " Mark": "                  ^",
        " Line": 594
    },
    {
        " Proj": "Closure-59",
        "Class": "com.googlescript.jscomp.Compiler",
        " Type": "warning",
        "  Cat": "ThreadJoinLoop",
        "  Msg": "Thread.join needs to be surrounded by a loop until it succeeds, as in Uninterruptibles.joinUninterruptibly.",
        " Code": "          th.join();",
        " Mark": "                 ^",
        " Line": 615
    },
    {
        " Proj": "Closure-59",
        "Class": "com.googlescript.jscomp.Compiler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "get implements method in Supplier; expected @Override",
        " Code": "      public String get() {",
        " Mark": "                    ^",
        " Line": 937
    },
    {
        " Proj": "Closure-59",
        "Class": "com.googlescript.jscomp.Compiler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "call implements method in Callable; expected @Override",
        " Code": "      public String call() throws Exception {",
        " Mark": "                    ^",
        " Line": 1322
    },
    {
        " Proj": "Closure-59",
        "Class": "com.googlescript.jscomp.Compiler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "call implements method in Callable; expected @Override",
        " Code": "      public String[] call() throws Exception {",
        " Mark": "                      ^",
        " Line": 1347
    },
    {
        " Proj": "Closure-59",
        "Class": "com.googlescript.jscomp.Compiler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "call implements method in Callable; expected @Override",
        " Code": "      public String call() throws Exception {",
        " Mark": "                    ^",
        " Line": 1372
    },
    {
        " Proj": "Closure-59",
        "Class": "com.googlescript.jscomp.Compiler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "call implements method in Callable; expected @Override",
        " Code": "      public String[] call() throws Exception {",
        " Mark": "                      ^",
        " Line": 1398
    },
    {
        " Proj": "Closure-59",
        "Class": "com.googlescript.jscomp.Compiler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "call implements method in Callable; expected @Override",
        " Code": "      public Void call() throws Exception {",
        " Mark": "                  ^",
        " Line": 1434
    },
    {
        " Proj": "Closure-59",
        "Class": "com.googlescript.jscomp.Compiler",
        " Type": "error",
        "  Cat": "MissingCasesInEnumSwitch",
        "  Msg": "Non-exhaustive switch; either add a default or handle the remaining cases: ECMASCRIPT3",
        " Code": "    switch (options.getLanguageIn()) {",
        " Mark": "    ^",
        " Line": 1713
    },
    {
        " Proj": "Closure-59",
        "Class": "com.googlescript.jscomp.Compiler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getSourceLine implements method in SourceExcerptProvider; expected @Override",
        " Code": "  public String getSourceLine(String sourceName, int lineNumber) {",
        " Mark": "                ^",
        " Line": 1860
    },
    {
        " Proj": "Closure-59",
        "Class": "com.googlescript.jscomp.Compiler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getSourceRegion implements method in SourceExcerptProvider; expected @Override",
        " Code": "  public Region getSourceRegion(String sourceName, int lineNumber) {",
        " Mark": "                ^",
        " Line": 1871
    },
    {
        " Proj": "Closure-6",
        "Class": "com.googlescript.jscomp.TypeValidator",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        varType != typeRegistry.getNativeType(UNKNOWN_TYPE) &&",
        " Mark": "                ^",
        " Line": 538
    },
    {
        " Proj": "Closure-6",
        "Class": "com.googlescript.jscomp.TypeValidator",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        newType != typeRegistry.getNativeType(UNKNOWN_TYPE)) {",
        " Mark": "                ^",
        " Line": 540
    },
    {
        " Proj": "Closure-60",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final Set<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS =",
        " Mark": "                          ^",
        " Line": 909
    },
    {
        " Proj": "Closure-60",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final Set<String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS =",
        " Mark": "                          ^",
        " Line": 912
    },
    {
        " Proj": "Closure-60",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final Set<String> REGEXP_METHODS =",
        " Mark": "                          ^",
        " Line": 914
    },
    {
        " Proj": "Closure-60",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final Set<String> STRING_REGEXP_METHODS =",
        " Mark": "                          ^",
        " Line": 916
    },
    {
        " Proj": "Closure-60",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 1206
    },
    {
        " Proj": "Closure-60",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 1258
    },
    {
        " Proj": "Closure-60",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 1319
    },
    {
        " Proj": "Closure-60",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "visit implements method in Visitor; expected @Override",
        " Code": "    public void visit(Node n) {",
        " Mark": "                ^",
        " Line": 2490
    },
    {
        " Proj": "Closure-60",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 2598
    },
    {
        " Proj": "Closure-60",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 2614
    },
    {
        " Proj": "Closure-60",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 2624
    },
    {
        " Proj": "Closure-60",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 2633
    },
    {
        " Proj": "Closure-60",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 2644
    },
    {
        " Proj": "Closure-61",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final Set<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS =",
        " Mark": "                          ^",
        " Line": 900
    },
    {
        " Proj": "Closure-61",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final Set<String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS =",
        " Mark": "                          ^",
        " Line": 903
    },
    {
        " Proj": "Closure-61",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final Set<String> REGEXP_METHODS =",
        " Mark": "                          ^",
        " Line": 905
    },
    {
        " Proj": "Closure-61",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final Set<String> STRING_REGEXP_METHODS =",
        " Mark": "                          ^",
        " Line": 907
    },
    {
        " Proj": "Closure-61",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 1196
    },
    {
        " Proj": "Closure-61",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 1248
    },
    {
        " Proj": "Closure-61",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 1309
    },
    {
        " Proj": "Closure-61",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "visit implements method in Visitor; expected @Override",
        " Code": "    public void visit(Node n) {",
        " Mark": "                ^",
        " Line": 2480
    },
    {
        " Proj": "Closure-61",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 2588
    },
    {
        " Proj": "Closure-61",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 2604
    },
    {
        " Proj": "Closure-61",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 2614
    },
    {
        " Proj": "Closure-61",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 2623
    },
    {
        " Proj": "Closure-61",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 2634
    },
    {
        " Proj": "Closure-62",
        "Class": "com.googlescript.jscomp.LightweightMessageFormatter",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "formatError implements method in MessageFormatter; expected @Override",
        " Code": "  public String formatError(JSError error) {",
        " Mark": "                ^",
        " Line": 58
    },
    {
        " Proj": "Closure-62",
        "Class": "com.googlescript.jscomp.LightweightMessageFormatter",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "formatWarning implements method in MessageFormatter; expected @Override",
        " Code": "  public String formatWarning(JSError warning) {",
        " Mark": "                ^",
        " Line": 62
    },
    {
        " Proj": "Closure-62",
        "Class": "com.googlescript.jscomp.LightweightMessageFormatter",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "formatLine implements method in ExcerptFormatter; expected @Override",
        " Code": "    public String formatLine(String line, int lineNumber) {",
        " Mark": "                  ^",
        " Line": 121
    },
    {
        " Proj": "Closure-62",
        "Class": "com.googlescript.jscomp.LightweightMessageFormatter",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "formatRegion implements method in ExcerptFormatter; expected @Override",
        " Code": "    public String formatRegion(Region region) {",
        " Mark": "                  ^",
        " Line": 125
    },
    {
        " Proj": "Closure-63",
        "Class": "com.googlescript.jscomp.LightweightMessageFormatter",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "formatError implements method in MessageFormatter; expected @Override",
        " Code": "  public String formatError(JSError error) {",
        " Mark": "                ^",
        " Line": 58
    },
    {
        " Proj": "Closure-63",
        "Class": "com.googlescript.jscomp.LightweightMessageFormatter",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "formatWarning implements method in MessageFormatter; expected @Override",
        " Code": "  public String formatWarning(JSError warning) {",
        " Mark": "                ^",
        " Line": 62
    },
    {
        " Proj": "Closure-63",
        "Class": "com.googlescript.jscomp.LightweightMessageFormatter",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "formatLine implements method in ExcerptFormatter; expected @Override",
        " Code": "    public String formatLine(String line, int lineNumber) {",
        " Mark": "                  ^",
        " Line": 121
    },
    {
        " Proj": "Closure-63",
        "Class": "com.googlescript.jscomp.LightweightMessageFormatter",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "formatRegion implements method in ExcerptFormatter; expected @Override",
        " Code": "    public String formatRegion(Region region) {",
        " Mark": "                  ^",
        " Line": 125
    },
    {
        " Proj": "Closure-64",
        "Class": "com.googlescript.jscomp.Compiler",
        " Type": "warning",
        "  Cat": "JavaLangClash",
        "  Msg": "com.google.javascript.jscomp.Compiler clashes with java.lang.Compiler",
        " Code": "public class Compiler extends AbstractCompiler {",
        " Mark": "       ^",
        " Line": 68
    },
    {
        " Proj": "Closure-64",
        "Class": "com.googlescript.jscomp.Compiler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "call implements method in Callable; expected @Override",
        " Code": "      public Result call() throws Exception {",
        " Mark": "                    ^",
        " Line": 549
    },
    {
        " Proj": "Closure-64",
        "Class": "com.googlescript.jscomp.Compiler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "run implements method in Runnable; expected @Override",
        " Code": "      public void run() {",
        " Mark": "                  ^",
        " Line": 586
    },
    {
        " Proj": "Closure-64",
        "Class": "com.googlescript.jscomp.Compiler",
        " Type": "warning",
        "  Cat": "ThreadJoinLoop",
        "  Msg": "Thread.join needs to be surrounded by a loop until it succeeds, as in Uninterruptibles.joinUninterruptibly.",
        " Code": "          th.join();",
        " Mark": "                 ^",
        " Line": 607
    },
    {
        " Proj": "Closure-64",
        "Class": "com.googlescript.jscomp.Compiler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "get implements method in Supplier; expected @Override",
        " Code": "      public String get() {",
        " Mark": "                    ^",
        " Line": 929
    },
    {
        " Proj": "Closure-64",
        "Class": "com.googlescript.jscomp.Compiler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "call implements method in Callable; expected @Override",
        " Code": "      public String call() throws Exception {",
        " Mark": "                    ^",
        " Line": 1285
    },
    {
        " Proj": "Closure-64",
        "Class": "com.googlescript.jscomp.Compiler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "call implements method in Callable; expected @Override",
        " Code": "      public String[] call() throws Exception {",
        " Mark": "                      ^",
        " Line": 1310
    },
    {
        " Proj": "Closure-64",
        "Class": "com.googlescript.jscomp.Compiler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "call implements method in Callable; expected @Override",
        " Code": "      public String call() throws Exception {",
        " Mark": "                    ^",
        " Line": 1335
    },
    {
        " Proj": "Closure-64",
        "Class": "com.googlescript.jscomp.Compiler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "call implements method in Callable; expected @Override",
        " Code": "      public String[] call() throws Exception {",
        " Mark": "                      ^",
        " Line": 1361
    },
    {
        " Proj": "Closure-64",
        "Class": "com.googlescript.jscomp.Compiler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "call implements method in Callable; expected @Override",
        " Code": "      public Void call() throws Exception {",
        " Mark": "                  ^",
        " Line": 1397
    },
    {
        " Proj": "Closure-64",
        "Class": "com.googlescript.jscomp.Compiler",
        " Type": "error",
        "  Cat": "MissingCasesInEnumSwitch",
        "  Msg": "Non-exhaustive switch; either add a default or handle the remaining cases: ECMASCRIPT3",
        " Code": "    switch (options.getLanguageIn()) {",
        " Mark": "    ^",
        " Line": 1676
    },
    {
        " Proj": "Closure-64",
        "Class": "com.googlescript.jscomp.Compiler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getSourceLine implements method in SourceExcerptProvider; expected @Override",
        " Code": "  public String getSourceLine(String sourceName, int lineNumber) {",
        " Mark": "                ^",
        " Line": 1822
    },
    {
        " Proj": "Closure-64",
        "Class": "com.googlescript.jscomp.Compiler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getSourceRegion implements method in SourceExcerptProvider; expected @Override",
        " Code": "  public Region getSourceRegion(String sourceName, int lineNumber) {",
        " Mark": "                ^",
        " Line": 1833
    },
    {
        " Proj": "Closure-65",
        "Class": "com.googlescript.jscomp.CodeGenerator",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "    if (outputCharset == null || outputCharset == Charsets.US_ASCII) {",
        " Mark": "                                               ^",
        " Line": 52
    },
    {
        " Proj": "Closure-65",
        "Class": "com.googlescript.jscomp.CodeGenerator",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {",
        " Mark": "                                                ^",
        " Line": 521
    },
    {
        " Proj": "Closure-66",
        "Class": "com.googlescript.jscomp.TypeCheck",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "process implements method in CompilerPass; expected @Override",
        " Code": "  public void process(Node externsRoot, Node jsRoot) {",
        " Mark": "              ^",
        " Line": 346
    },
    {
        " Proj": "Closure-66",
        "Class": "com.googlescript.jscomp.TypeCheck",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "shouldTraverse implements method in Callback; expected @Override",
        " Code": "  public boolean shouldTraverse(",
        " Mark": "                 ^",
        " Line": 423
    },
    {
        " Proj": "Closure-66",
        "Class": "com.googlescript.jscomp.TypeCheck",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "visit implements method in Callback; expected @Override",
        " Code": "  public void visit(NodeTraversal t, Node n, Node parent) {",
        " Mark": "              ^",
        " Line": 461
    },
    {
        " Proj": "Closure-66",
        "Class": "com.googlescript.jscomp.TypeCheck",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "          baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE) &&",
        " Mark": "                          ^",
        " Line": 1483
    },
    {
        " Proj": "Closure-66",
        "Class": "com.googlescript.jscomp.TypeCheck",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "            parameter != null && parameter.isVarArgs())) {",
        " Mark": "                              ^",
        " Line": 1616
    },
    {
        " Proj": "Closure-67",
        "Class": "com.googlescript.jscomp.AnalyzePrototypeProperties",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final Set<String> IMPLICITLY_USED_PROPERTIES =",
        " Mark": "                          ^",
        " Line": 65
    },
    {
        " Proj": "Closure-67",
        "Class": "com.googlescript.jscomp.AnalyzePrototypeProperties",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "process implements method in CompilerPass; expected @Override",
        " Code": "  public void process(Node externRoot, Node root) {",
        " Mark": "              ^",
        " Line": 145
    },
    {
        " Proj": "Closure-67",
        "Class": "com.googlescript.jscomp.AnalyzePrototypeProperties",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "shouldTraverse implements method in Callback; expected @Override",
        " Code": "    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {",
        " Mark": "                   ^",
        " Line": 205
    },
    {
        " Proj": "Closure-67",
        "Class": "com.googlescript.jscomp.AnalyzePrototypeProperties",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "visit implements method in Callback; expected @Override",
        " Code": "    public void visit(NodeTraversal t, Node n, Node parent) {",
        " Mark": "                ^",
        " Line": 220
    },
    {
        " Proj": "Closure-67",
        "Class": "com.googlescript.jscomp.AnalyzePrototypeProperties",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "           n.getType() == Token.FUNCTION &&",
        " Mark": "                                         ^",
        " Line": 310
    },
    {
        " Proj": "Closure-67",
        "Class": "com.googlescript.jscomp.AnalyzePrototypeProperties",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "          firstChild != null &&",
        " Mark": "                             ^",
        " Line": 347
    },
    {
        " Proj": "Closure-67",
        "Class": "com.googlescript.jscomp.AnalyzePrototypeProperties",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "visit implements method in Callback; expected @Override",
        " Code": "    public void visit(NodeTraversal t, Node n, Node parent) {",
        " Mark": "                ^",
        " Line": 411
    },
    {
        " Proj": "Closure-67",
        "Class": "com.googlescript.jscomp.AnalyzePrototypeProperties",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "traverseEdge implements method in EdgeCallback; expected @Override",
        " Code": "    public boolean traverseEdge(NameInfo start, JSModule edge, NameInfo dest) {",
        " Mark": "                   ^",
        " Line": 421
    },
    {
        " Proj": "Closure-67",
        "Class": "com.googlescript.jscomp.AnalyzePrototypeProperties",
        " Type": "warning",
        "  Cat": "ClassCanBeStatic",
        "  Msg": "Inner class is non-static but does not reference enclosing class",
        " Code": "   class GlobalFunction implements Symbol {",
        " Mark": "   ^",
        " Line": 462
    },
    {
        " Proj": "Closure-67",
        "Class": "com.googlescript.jscomp.AnalyzePrototypeProperties",
        " Type": "warning",
        "  Cat": "ClassCanBeStatic",
        "  Msg": "Inner class is non-static but does not reference enclosing class",
        " Code": "  private class NameContext {",
        " Mark": "          ^",
        " Line": 605
    },
    {
        " Proj": "Closure-68",
        "Class": "com.googlescript.jscomp.parsing.JsDocInfoParser",
        " Type": "error",
        "  Cat": "MissingCasesInEnumSwitch",
        "  Msg": "Non-exhaustive switch; either add a default or handle the remaining cases: AUTHOR, CONSTANT, CONSTRUCTOR, and 35 others",
        " Code": "                    switch (annotation) {",
        " Mark": "                    ^",
        " Line": 813
    },
    {
        " Proj": "Closure-69",
        "Class": "com.googlescript.jscomp.TypeCheck",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "process implements method in CompilerPass; expected @Override",
        " Code": "  public void process(Node externsRoot, Node jsRoot) {",
        " Mark": "              ^",
        " Line": 346
    },
    {
        " Proj": "Closure-69",
        "Class": "com.googlescript.jscomp.TypeCheck",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "shouldTraverse implements method in Callback; expected @Override",
        " Code": "  public boolean shouldTraverse(",
        " Mark": "                 ^",
        " Line": 423
    },
    {
        " Proj": "Closure-69",
        "Class": "com.googlescript.jscomp.TypeCheck",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "visit implements method in Callback; expected @Override",
        " Code": "  public void visit(NodeTraversal t, Node n, Node parent) {",
        " Mark": "              ^",
        " Line": 461
    },
    {
        " Proj": "Closure-69",
        "Class": "com.googlescript.jscomp.TypeCheck",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "          baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE) &&",
        " Mark": "                          ^",
        " Line": 1480
    },
    {
        " Proj": "Closure-69",
        "Class": "com.googlescript.jscomp.TypeCheck",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "            parameter != null && parameter.isVarArgs())) {",
        " Mark": "                              ^",
        " Line": 1613
    },
    {
        " Proj": "Closure-7",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-70",
        "Class": "com.googlescript.jscomp.TypedScopeCreator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "createScope implements method in ScopeCreator; expected @Override",
        " Code": "  public Scope createScope(Node root, Scope parent) {",
        " Mark": "               ^",
        " Line": 180
    },
    {
        " Proj": "Closure-70",
        "Class": "com.googlescript.jscomp.TypedScopeCreator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "visit implements method in Callback; expected @Override",
        " Code": "      public void visit(NodeTraversal t, Node n, Node parent) {",
        " Mark": "                  ^",
        " Line": 1496
    },
    {
        " Proj": "Closure-71",
        "Class": "com.googlescript.jscomp.CheckAccessControls",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "enterScope implements method in ScopedCallback; expected @Override",
        " Code": "  public void enterScope(NodeTraversal t) {",
        " Mark": "              ^",
        " Line": 128
    },
    {
        " Proj": "Closure-71",
        "Class": "com.googlescript.jscomp.CheckAccessControls",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "exitScope implements method in ScopedCallback; expected @Override",
        " Code": "  public void exitScope(NodeTraversal t) {",
        " Mark": "              ^",
        " Line": 143
    },
    {
        " Proj": "Closure-71",
        "Class": "com.googlescript.jscomp.CheckAccessControls",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "shouldTraverse implements method in Callback; expected @Override",
        " Code": "  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {",
        " Mark": "                 ^",
        " Line": 210
    },
    {
        " Proj": "Closure-71",
        "Class": "com.googlescript.jscomp.CheckAccessControls",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "visit implements method in Callback; expected @Override",
        " Code": "  public void visit(NodeTraversal t, Node n, Node parent) {",
        " Mark": "              ^",
        " Line": 214
    },
    {
        " Proj": "Closure-72",
        "Class": "com.googlescript.jscomp.RenameLabels",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "shouldTraverse implements method in Callback; expected @Override",
        " Code": "    public boolean shouldTraverse(NodeTraversal nodeTraversal, Node node,",
        " Mark": "                   ^",
        " Line": 136
    },
    {
        " Proj": "Closure-72",
        "Class": "com.googlescript.jscomp.RenameLabels",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "visit implements method in Callback; expected @Override",
        " Code": "    public void visit(NodeTraversal nodeTraversal, Node node, Node parent) {",
        " Mark": "                ^",
        " Line": 167
    },
    {
        " Proj": "Closure-73",
        "Class": "com.googlescript.jscomp.CodeGenerator",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "    if (outputCharset == null || outputCharset == Charsets.US_ASCII) {",
        " Mark": "                                               ^",
        " Line": 48
    },
    {
        " Proj": "Closure-73",
        "Class": "com.googlescript.jscomp.CodeGenerator",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {",
        " Mark": "                                                ^",
        " Line": 517
    },
    {
        " Proj": "Closure-74",
        "Class": "com.googlescript.jscomp.PeepholeFoldConstants",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "      if (lval && type == Token.OR ||",
        " Mark": "               ^",
        " Line": 539
    },
    {
        " Proj": "Closure-74",
        "Class": "com.googlescript.jscomp.PeepholeFoldConstants",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "          !lval && type == Token.AND) {",
        " Mark": "                ^",
        " Line": 540
    },
    {
        " Proj": "Closure-74",
        "Class": "com.googlescript.jscomp.PeepholeFoldConstants",
        " Type": "error",
        "  Cat": "MissingCasesInEnumSwitch",
        "  Msg": "Non-exhaustive switch; either add a default or handle the remaining cases: UNKNOWN",
        " Code": "      switch (value) {",
        " Mark": "      ^",
        " Line": 1078
    },
    {
        " Proj": "Closure-75",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final Set<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS =",
        " Mark": "                          ^",
        " Line": 896
    },
    {
        " Proj": "Closure-75",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final Set<String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS =",
        " Mark": "                          ^",
        " Line": 899
    },
    {
        " Proj": "Closure-75",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final Set<String> REGEXP_METHODS =",
        " Mark": "                          ^",
        " Line": 901
    },
    {
        " Proj": "Closure-75",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final Set<String> STRING_REGEXP_METHODS =",
        " Mark": "                          ^",
        " Line": 903
    },
    {
        " Proj": "Closure-75",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 1194
    },
    {
        " Proj": "Closure-75",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 1246
    },
    {
        " Proj": "Closure-75",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 1307
    },
    {
        " Proj": "Closure-75",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "visit implements method in Visitor; expected @Override",
        " Code": "    public void visit(Node n) {",
        " Mark": "                ^",
        " Line": 2451
    },
    {
        " Proj": "Closure-75",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 2559
    },
    {
        " Proj": "Closure-75",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 2575
    },
    {
        " Proj": "Closure-75",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 2585
    },
    {
        " Proj": "Closure-75",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 2594
    },
    {
        " Proj": "Closure-75",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 2603
    },
    {
        " Proj": "Closure-76",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-77",
        "Class": "com.googlescript.jscomp.CodeGenerator",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "    if (outputCharset == null || outputCharset == Charsets.US_ASCII) {",
        " Mark": "                                               ^",
        " Line": 48
    },
    {
        " Proj": "Closure-77",
        "Class": "com.googlescript.jscomp.CodeGenerator",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {",
        " Mark": "                                                ^",
        " Line": 513
    },
    {
        " Proj": "Closure-78",
        "Class": "com.googlescript.jscomp.PeepholeFoldConstants",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "      if (lval && type == Token.OR ||",
        " Mark": "               ^",
        " Line": 539
    },
    {
        " Proj": "Closure-78",
        "Class": "com.googlescript.jscomp.PeepholeFoldConstants",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "          !lval && type == Token.AND) {",
        " Mark": "                ^",
        " Line": 540
    },
    {
        " Proj": "Closure-79",
        "Class": "com.googlescript.jscomp.Normalize",
        " Type": "warning",
        "  Cat": "ClassCanBeStatic",
        "  Msg": "Inner class is non-static but does not reference enclosing class",
        " Code": "  private final class ScopeTicklingCallback",
        " Mark": "                ^",
        " Line": 754
    },
    {
        " Proj": "Closure-79",
        "Class": "com.googlescript.jscomp.VarCheck",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "visit implements method in Callback; expected @Override",
        " Code": "    public void visit(NodeTraversal t, Node n, Node parent) {",
        " Mark": "                ^",
        " Line": 229
    },
    {
        " Proj": "Closure-8",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-80",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final Set<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS =",
        " Mark": "                          ^",
        " Line": 876
    },
    {
        " Proj": "Closure-80",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final Set<String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS =",
        " Mark": "                          ^",
        " Line": 879
    },
    {
        " Proj": "Closure-80",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final Set<String> REGEXP_METHODS =",
        " Mark": "                          ^",
        " Line": 881
    },
    {
        " Proj": "Closure-80",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final Set<String> STRING_REGEXP_METHODS =",
        " Mark": "                          ^",
        " Line": 883
    },
    {
        " Proj": "Closure-80",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 1175
    },
    {
        " Proj": "Closure-80",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 1227
    },
    {
        " Proj": "Closure-80",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 1288
    },
    {
        " Proj": "Closure-80",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "visit implements method in Visitor; expected @Override",
        " Code": "    public void visit(Node n) {",
        " Mark": "                ^",
        " Line": 2438
    },
    {
        " Proj": "Closure-80",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 2546
    },
    {
        " Proj": "Closure-80",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 2562
    },
    {
        " Proj": "Closure-80",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 2572
    },
    {
        " Proj": "Closure-80",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 2581
    },
    {
        " Proj": "Closure-80",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 2590
    },
    {
        " Proj": "Closure-81",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-82",
        "Class": "com.googlescript.rhino.jstype.JSType",
        " Type": "warning",
        "  Cat": "AmbiguousMethodReference",
        "  Msg": "This method's reference is ambiguous, its name and functional interface type are the same as: getLeastSupertype(JSType, JSType)",
        " Code": "  public JSType getLeastSupertype(JSType that) {",
        " Mark": "                ^",
        " Line": 588
    },
    {
        " Proj": "Closure-82",
        "Class": "com.googlescript.rhino.jstype.JSType",
        " Type": "warning",
        "  Cat": "AmbiguousMethodReference",
        "  Msg": "This method's reference is ambiguous, its name and functional interface type are the same as: getGreatestSubtype(JSType, JSType)",
        " Code": "  public JSType getGreatestSubtype(JSType that) {",
        " Mark": "                ^",
        " Line": 619
    },
    {
        " Proj": "Closure-82",
        "Class": "com.googlescript.rhino.jstype.JSType",
        " Type": "warning",
        "  Cat": "AmbiguousMethodReference",
        "  Msg": "This method's reference is ambiguous, its name and functional interface type are the same as: isSubtype(JSType, JSType)",
        " Code": "  public abstract boolean isSubtype(JSType that);",
        " Mark": "                          ^",
        " Line": 872
    },
    {
        " Proj": "Closure-82",
        "Class": "com.googlescript.rhino.jstype.JSType",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compare implements method in Comparator; expected @Override",
        " Code": "    public int compare(JSType t1, JSType t2) {",
        " Mark": "               ^",
        " Line": 91
    },
    {
        " Proj": "Closure-82",
        "Class": "com.googlescript.rhino.jstype.JSType",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "             JSTypeNative.LEAST_FUNCTION_TYPE) == this);",
        " Mark": "                                               ^",
        " Line": 165
    },
    {
        " Proj": "Closure-82",
        "Class": "com.googlescript.rhino.jstype.JSType",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "    return this == jsType;",
        " Mark": "                ^",
        " Line": 337
    },
    {
        " Proj": "Closure-82",
        "Class": "com.googlescript.rhino.jstype.JSType",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        typeA == typeB : typeA.isEquivalentTo(typeB);",
        " Mark": "              ^",
        " Line": 342
    },
    {
        " Proj": "Closure-82",
        "Class": "com.googlescript.rhino.jstype.JSType",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "    if (this.isNullType() && that.isNullType() ||",
        " Mark": "                          ^",
        " Line": 830
    },
    {
        " Proj": "Closure-82",
        "Class": "com.googlescript.rhino.jstype.JSType",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "        this.isVoidType() && that.isVoidType()) {",
        " Mark": "                          ^",
        " Line": 831
    },
    {
        " Proj": "Closure-83",
        "Class": "com.googlescript.jscomp.CommandLineRunner",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final List<String> DEFAULT_EXTERNS_NAMES = ImmutableList.of(",
        " Mark": "                           ^",
        " Line": 528
    },
    {
        " Proj": "Closure-84",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-85",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-86",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final Set<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS =",
        " Mark": "                          ^",
        " Line": 707
    },
    {
        " Proj": "Closure-86",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final Set<String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS =",
        " Mark": "                          ^",
        " Line": 710
    },
    {
        " Proj": "Closure-86",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final Set<String> REGEXP_METHODS =",
        " Mark": "                          ^",
        " Line": 712
    },
    {
        " Proj": "Closure-86",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final Set<String> STRING_REGEXP_METHODS =",
        " Mark": "                          ^",
        " Line": 714
    },
    {
        " Proj": "Closure-86",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "visit implements method in Visitor; expected @Override",
        " Code": "    public void visit(Node n) {",
        " Mark": "                ^",
        " Line": 1996
    },
    {
        " Proj": "Closure-86",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 2105
    },
    {
        " Proj": "Closure-86",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 2121
    },
    {
        " Proj": "Closure-86",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 2131
    },
    {
        " Proj": "Closure-86",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 2140
    },
    {
        " Proj": "Closure-86",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 2149
    },
    {
        " Proj": "Closure-87",
        "Class": "com.googlescript.jscomp.PeepholeSubstituteAlternateSyntax",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "            result.checkTreeEqualsSilent(follow.getFirstChild())) &&",
        " Mark": "                                                                  ^",
        " Line": 174
    },
    {
        " Proj": "Closure-87",
        "Class": "com.googlescript.jscomp.PeepholeSubstituteAlternateSyntax",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "          if (type == Token.OR && !rval ||",
        " Mark": "                               ^",
        " Line": 747
    },
    {
        " Proj": "Closure-87",
        "Class": "com.googlescript.jscomp.PeepholeSubstituteAlternateSyntax",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "              type == Token.AND && rval) {",
        " Mark": "                                ^",
        " Line": 748
    },
    {
        " Proj": "Closure-88",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Closure-89",
        "Class": "com.googlescript.jscomp.CollapseProperties",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "visit implements method in Callback; expected @Override",
        " Code": "            public void visit(NodeTraversal t, Node n, Node parent) {",
        " Mark": "                        ^",
        " Line": 645
    },
    {
        " Proj": "Closure-89",
        "Class": "com.googlescript.jscomp.GlobalNamespace",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 127
    },
    {
        " Proj": "Closure-89",
        "Class": "com.googlescript.jscomp.GlobalNamespace",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "             (info.isConstructor() && valueNodeType == Token.FUNCTION ||",
        " Mark": "                                   ^",
        " Line": 495
    },
    {
        " Proj": "Closure-89",
        "Class": "com.googlescript.jscomp.GlobalNamespace",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "              info.hasEnumParameterType() && valueNodeType == Token.OBJECTLIT);",
        " Mark": "                                          ^",
        " Line": 496
    },
    {
        " Proj": "Closure-89",
        "Class": "com.googlescript.jscomp.GlobalNamespace",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "          (parent == null || parent.canCollapseUnannotatedChildNames()) &&",
        " Mark": "                                                                        ^",
        " Line": 892
    },
    {
        " Proj": "Closure-9",
        "Class": "com.googlescript.jscomp.ProcessCommonJSModules",
        " Type": "warning",
        "  Cat": "ClassCanBeStatic",
        "  Msg": "Inner class is non-static but does not reference enclosing class",
        " Code": "  private class SuffixVarsCallback extends AbstractPostOrderCallback {",
        " Mark": "          ^",
        " Line": 257
    },
    {
        " Proj": "Closure-90",
        "Class": "com.googlescript.jscomp.FunctionTypeBuilder",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "        if (cType == Token.RETURN && current.getFirstChild() != null ||",
        " Mark": "                                  ^",
        " Line": 318
    },
    {
        " Proj": "Closure-90",
        "Class": "com.googlescript.rhino.jstype.FunctionType",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "    if (isConstructor() && prototype == getInstanceType()) {",
        " Mark": "                                     ^",
        " Line": 291
    },
    {
        " Proj": "Closure-90",
        "Class": "com.googlescript.rhino.jstype.FunctionType",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        return this == that;",
        " Mark": "                    ^",
        " Line": 664
    },
    {
        " Proj": "Closure-90",
        "Class": "com.googlescript.rhino.jstype.FunctionType",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "    if (this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)) {",
        " Mark": "             ^",
        " Line": 698
    },
    {
        " Proj": "Closure-90",
        "Class": "com.googlescript.rhino.jstype.FunctionType",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "      changed |= (resolvedIface != iface);",
        " Mark": "                                ^",
        " Line": 893
    },
    {
        " Proj": "Closure-90",
        "Class": "com.googlescript.rhino.jstype.FunctionType",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "    if (this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)) {",
        " Mark": "             ^",
        " Line": 910
    },
    {
        " Proj": "Closure-90",
        "Class": "com.googlescript.rhino.jstype.FunctionType",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "    if (type == this) {",
        " Mark": "             ^",
        " Line": 942
    },
    {
        " Proj": "Closure-91",
        "Class": "com.googlescript.jscomp.CheckGlobalThis",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "shouldTraverse implements method in Callback; expected @Override",
        " Code": "  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {",
        " Mark": "                 ^",
        " Line": 82
    },
    {
        " Proj": "Closure-91",
        "Class": "com.googlescript.jscomp.CheckGlobalThis",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "visit implements method in Callback; expected @Override",
        " Code": "  public void visit(NodeTraversal t, Node n, Node parent) {",
        " Mark": "              ^",
        " Line": 157
    },
    {
        " Proj": "Closure-92",
        "Class": "com.googlescript.jscomp.ProcessClosurePrimitives",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "            parent.getLastChild() == scopeRoot &&",
        " Mark": "                                               ^",
        " Line": 443
    },
    {
        " Proj": "Closure-92",
        "Class": "com.googlescript.jscomp.ProcessClosurePrimitives",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "get implements method in CssRenamingMap; expected @Override",
        " Code": "          public String get(String value) {",
        " Mark": "                        ^",
        " Line": 529
    },
    {
        " Proj": "Closure-92",
        "Class": "com.googlescript.jscomp.ProcessClosurePrimitives",
        " Type": "warning",
        "  Cat": "ClassCanBeStatic",
        "  Msg": "Inner class is non-static but does not reference enclosing class",
        " Code": "  private class UnrecognizedRequire {",
        " Mark": "          ^",
        " Line": 905
    },
    {
        " Proj": "Closure-93",
        "Class": "com.googlescript.jscomp.ProcessClosurePrimitives",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "            parent.getLastChild() == scopeRoot &&",
        " Mark": "                                               ^",
        " Line": 443
    },
    {
        " Proj": "Closure-93",
        "Class": "com.googlescript.jscomp.ProcessClosurePrimitives",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "get implements method in CssRenamingMap; expected @Override",
        " Code": "          public String get(String value) {",
        " Mark": "                        ^",
        " Line": 529
    },
    {
        " Proj": "Closure-93",
        "Class": "com.googlescript.jscomp.ProcessClosurePrimitives",
        " Type": "warning",
        "  Cat": "ClassCanBeStatic",
        "  Msg": "Inner class is non-static but does not reference enclosing class",
        " Code": "  private class UnrecognizedRequire {",
        " Mark": "          ^",
        " Line": 905
    },
    {
        " Proj": "Closure-94",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final Set<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS =",
        " Mark": "                          ^",
        " Line": 641
    },
    {
        " Proj": "Closure-94",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final Set<String> REGEXP_METHODS =",
        " Mark": "                          ^",
        " Line": 644
    },
    {
        " Proj": "Closure-94",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "  private static final Set<String> STRING_REGEXP_METHODS =",
        " Mark": "                          ^",
        " Line": 646
    },
    {
        " Proj": "Closure-94",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "visit implements method in Visitor; expected @Override",
        " Code": "    public void visit(Node n) {",
        " Mark": "                ^",
        " Line": 1852
    },
    {
        " Proj": "Closure-94",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 1961
    },
    {
        " Proj": "Closure-94",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 1977
    },
    {
        " Proj": "Closure-94",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 1987
    },
    {
        " Proj": "Closure-94",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 1996
    },
    {
        " Proj": "Closure-94",
        "Class": "com.googlescript.jscomp.NodeUtil",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "apply implements method in Predicate; expected @Override",
        " Code": "    public boolean apply(Node n) {",
        " Mark": "                   ^",
        " Line": 2005
    },
    {
        " Proj": "Closure-95",
        "Class": "com.googlescript.jscomp.TypedScopeCreator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "createScope implements method in ScopeCreator; expected @Override",
        " Code": "  public Scope createScope(Node root, Scope parent) {",
        " Mark": "               ^",
        " Line": 156
    },
    {
        " Proj": "Closure-95",
        "Class": "com.googlescript.jscomp.TypedScopeCreator",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "          info != null && info.isConstructor()) {",
        " Mark": "                       ^",
        " Line": 618
    },
    {
        " Proj": "Closure-95",
        "Class": "com.googlescript.jscomp.TypedScopeCreator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "visit implements method in Callback; expected @Override",
        " Code": "      public void visit(NodeTraversal t, Node n, Node parent) {",
        " Mark": "                  ^",
        " Line": 1275
    },
    {
        " Proj": "Closure-96",
        "Class": "com.googlescript.jscomp.TypeCheck",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "process implements method in CompilerPass; expected @Override",
        " Code": "  public void process(Node externsRoot, Node jsRoot) {",
        " Mark": "              ^",
        " Line": 330
    },
    {
        " Proj": "Closure-96",
        "Class": "com.googlescript.jscomp.TypeCheck",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "shouldTraverse implements method in Callback; expected @Override",
        " Code": "  public boolean shouldTraverse(",
        " Mark": "                 ^",
        " Line": 407
    },
    {
        " Proj": "Closure-96",
        "Class": "com.googlescript.jscomp.TypeCheck",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "visit implements method in Callback; expected @Override",
        " Code": "  public void visit(NodeTraversal t, Node n, Node parent) {",
        " Mark": "              ^",
        " Line": 445
    },
    {
        " Proj": "Closure-96",
        "Class": "com.googlescript.jscomp.TypeCheck",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "          baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE) &&",
        " Mark": "                          ^",
        " Line": 1327
    },
    {
        " Proj": "Closure-96",
        "Class": "com.googlescript.jscomp.TypeCheck",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "          (baseConstructor.isConstructor() && functionType.isInterface() ||",
        " Mark": "                                           ^",
        " Line": 1328
    },
    {
        " Proj": "Closure-96",
        "Class": "com.googlescript.jscomp.TypeCheck",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "           baseConstructor.isInterface() && functionType.isConstructor())) {",
        " Mark": "                                         ^",
        " Line": 1329
    },
    {
        " Proj": "Closure-96",
        "Class": "com.googlescript.jscomp.TypeCheck",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "            parameter != null && parameter.isVarArgs())) {",
        " Mark": "                              ^",
        " Line": 1410
    },
    {
        " Proj": "Closure-97",
        "Class": "com.googlescript.jscomp.PeepholeFoldConstants",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "      if (lval && type == Token.OR ||",
        " Mark": "               ^",
        " Line": 412
    },
    {
        " Proj": "Closure-97",
        "Class": "com.googlescript.jscomp.PeepholeFoldConstants",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "          !lval && type == Token.AND) {",
        " Mark": "                ^",
        " Line": 413
    },
    {
        " Proj": "Closure-97",
        "Class": "com.googlescript.jscomp.PeepholeFoldConstants",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "        if (type == Token.OR && !rval ||",
        " Mark": "                             ^",
        " Line": 441
    },
    {
        " Proj": "Closure-97",
        "Class": "com.googlescript.jscomp.PeepholeFoldConstants",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "            type == Token.AND && rval) {",
        " Mark": "                              ^",
        " Line": 442
    },
    {
        " Proj": "Closure-98",
        "Class": "com.googlescript.jscomp.ReferenceCollectingCallback",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "process implements method in CompilerPass; expected @Override",
        " Code": "  public void process(Node externs, Node root) {",
        " Mark": "              ^",
        " Line": 99
    },
    {
        " Proj": "Closure-98",
        "Class": "com.googlescript.jscomp.ReferenceCollectingCallback",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "visit implements method in Callback; expected @Override",
        " Code": "  public void visit(NodeTraversal t, Node n, Node parent) {",
        " Mark": "              ^",
        " Line": 114
    },
    {
        " Proj": "Closure-98",
        "Class": "com.googlescript.jscomp.ReferenceCollectingCallback",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "enterScope implements method in ScopedCallback; expected @Override",
        " Code": "  public void enterScope(NodeTraversal t) {",
        " Mark": "              ^",
        " Line": 131
    },
    {
        " Proj": "Closure-98",
        "Class": "com.googlescript.jscomp.ReferenceCollectingCallback",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "exitScope implements method in ScopedCallback; expected @Override",
        " Code": "  public void exitScope(NodeTraversal t) {",
        " Mark": "              ^",
        " Line": 140
    },
    {
        " Proj": "Closure-98",
        "Class": "com.googlescript.jscomp.ReferenceCollectingCallback",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "shouldTraverse implements method in Callback; expected @Override",
        " Code": "  public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,",
        " Mark": "                 ^",
        " Line": 148
    },
    {
        " Proj": "Closure-98",
        "Class": "com.googlescript.jscomp.ReferenceCollectingCallback",
        " Type": "warning",
        "  Cat": "MutableConstantField",
        "  Msg": "Constant field declarations should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)",
        " Code": "    private static final Set<Integer> DECLARATION_PARENTS =",
        " Mark": "                            ^",
        " Line": 421
    },
    {
        " Proj": "Closure-98",
        "Class": "com.googlescript.jscomp.ReferenceCollectingCallback",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "          parent.getType() == Token.LP &&",
        " Mark": "                                       ^",
        " Line": 457
    },
    {
        " Proj": "Closure-99",
        "Class": "com.googlescript.jscomp.CheckGlobalThis",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "shouldTraverse implements method in Callback; expected @Override",
        " Code": "  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {",
        " Mark": "                 ^",
        " Line": 84
    },
    {
        " Proj": "Closure-99",
        "Class": "com.googlescript.jscomp.CheckGlobalThis",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "visit implements method in Callback; expected @Override",
        " Code": "  public void visit(NodeTraversal t, Node n, Node parent) {",
        " Mark": "              ^",
        " Line": 143
    },
    {
        " Proj": "Lang-1",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {",
        " Mark": "                                                     ^",
        " Line": 532
    },
    {
        " Proj": "Lang-1",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `str.startsWith(\"0x\", pos)`.",
        " Code": "        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex",
        " Mark": "                                      ^",
        " Line": 734
    },
    {
        " Proj": "Lang-10",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Lang-11",
        "Class": "org.apache.commons.lang3.RandomStringUtils",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "            if (letters && Character.isLetter(ch)",
        " Mark": "                        ^",
        " Line": 261
    },
    {
        " Proj": "Lang-11",
        "Class": "org.apache.commons.lang3.RandomStringUtils",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "                    || numbers && Character.isDigit(ch)",
        " Mark": "                               ^",
        " Line": 262
    },
    {
        " Proj": "Lang-11",
        "Class": "org.apache.commons.lang3.RandomStringUtils",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "                    || !letters && !numbers) {",
        " Mark": "                                ^",
        " Line": 263
    },
    {
        " Proj": "Lang-12",
        "Class": "org.apache.commons.lang3.RandomStringUtils",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "            if (letters && Character.isLetter(ch)",
        " Mark": "                        ^",
        " Line": 257
    },
    {
        " Proj": "Lang-12",
        "Class": "org.apache.commons.lang3.RandomStringUtils",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "                    || numbers && Character.isDigit(ch)",
        " Mark": "                               ^",
        " Line": 258
    },
    {
        " Proj": "Lang-12",
        "Class": "org.apache.commons.lang3.RandomStringUtils",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "                    || !letters && !numbers) {",
        " Mark": "                                ^",
        " Line": 259
    },
    {
        " Proj": "Lang-13",
        "Class": "org.apache.commons.lang3.SerializationUtils",
        " Type": "warning",
        "  Cat": "Finally",
        "  Msg": "If you return or throw from a finally, then values returned or thrown from the try-catch block will be ignored. Consider using try-with-resources instead.",
        " Code": "                throw new SerializationException(\"IOException on closing cloned object data InputStream.\", ex);",
        " Mark": "                ^",
        " Line": 108
    },
    {
        " Proj": "Lang-14",
        "Class": "org.apache.commons.lang3.StringUtils",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "        if (match || preserveAllTokens && lastMatch) {",
        " Mark": "                                       ^",
        " Line": 2944
    },
    {
        " Proj": "Lang-14",
        "Class": "org.apache.commons.lang3.StringUtils",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "        if (match || preserveAllTokens && lastMatch) {",
        " Mark": "                                       ^",
        " Line": 3120
    },
    {
        " Proj": "Lang-14",
        "Class": "org.apache.commons.lang3.StringUtils",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "        if (allStringsNull || longestStrLen == 0 && !anyStringNull) {",
        " Mark": "                                                 ^",
        " Line": 5946
    },
    {
        " Proj": "Lang-14",
        "Class": "org.apache.commons.lang3.StringUtils",
        " Type": "warning",
        "  Cat": "DefaultCharset",
        "  Msg": "Implicit use of the platform default charset, which can result in e.g. non-ASCII characters being silently replaced with '?' in many environments",
        " Code": "        return charsetName == null ? new String(bytes) : new String(bytes, charsetName);",
        " Mark": "                                     ^",
        " Line": 6588
    },
    {
        " Proj": "Lang-15",
        "Class": "org.apache.commons.lang3.reflect.TypeUtils",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "                    && isAssignable(((GenericArrayType) type).getGenericComponentType(), toClass",
        " Mark": "                    ^",
        " Line": 157
    },
    {
        " Proj": "Lang-15",
        "Class": "org.apache.commons.lang3.reflect.TypeUtils",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "        return type instanceof GenericArrayType || type instanceof Class<?> && ((Class<?>) type).isArray();",
        " Mark": "                                                                            ^",
        " Line": 1082
    },
    {
        " Proj": "Lang-16",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {",
        " Mark": "                                                     ^",
        " Line": 504
    },
    {
        " Proj": "Lang-17",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {",
        " Mark": "                     ^",
        " Line": 600
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {",
        " Mark": "                                             ^",
        " Line": 600
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "                         (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {",
        " Mark": "                                   ^",
        " Line": 632
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "                         (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {",
        " Mark": "                                                           ^",
        " Line": 632
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 943
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 950
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 974
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 981
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1008
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1022
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1045
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1052
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public final void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                          ^",
        " Line": 1059
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1088
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1095
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public final void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                          ^",
        " Line": 1102
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1137
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1144
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public final void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                          ^",
        " Line": 1151
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1192
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1199
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public final void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                          ^",
        " Line": 1206
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1232
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1239
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public final void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                          ^",
        " Line": 1246
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1268
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1275
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public final void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                          ^",
        " Line": 1282
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1307
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1314
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                    ^",
        " Line": 1325
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1349
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1356
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                    ^",
        " Line": 1367
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1397
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1404
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1435
    },
    {
        " Proj": "Lang-18",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1442
    },
    {
        " Proj": "Lang-19",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Lang-2",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Lang-21",
        "Class": "org.apache.commons.lang3.time.DateUtils",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hasNext implements method in Iterator; expected @Override",
        " Code": "        public boolean hasNext() {",
        " Mark": "                       ^",
        " Line": 1843
    },
    {
        " Proj": "Lang-21",
        "Class": "org.apache.commons.lang3.time.DateUtils",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "next implements method in Iterator; expected @Override",
        " Code": "        public Calendar next() {",
        " Mark": "                        ^",
        " Line": 1852
    },
    {
        " Proj": "Lang-21",
        "Class": "org.apache.commons.lang3.time.DateUtils",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "remove implements method in Iterator; expected @Override",
        " Code": "        public void remove() {",
        " Mark": "                    ^",
        " Line": 1866
    },
    {
        " Proj": "Lang-22",
        "Class": "org.apache.commons.lang3.math.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compareTo implements method in Comparable; expected @Override",
        " Code": "    public int compareTo(Fraction other) {",
        " Mark": "               ^",
        " Line": 887
    },
    {
        " Proj": "Lang-23",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Lang-24",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Long LONG_ZERO = new Long(0L);",
        " Mark": "                                         ^",
        " Line": 41
    },
    {
        " Proj": "Lang-24",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Long LONG_ONE = new Long(1L);",
        " Mark": "                                        ^",
        " Line": 43
    },
    {
        " Proj": "Lang-24",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Long LONG_MINUS_ONE = new Long(-1L);",
        " Mark": "                                              ^",
        " Line": 45
    },
    {
        " Proj": "Lang-24",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Integer INTEGER_ZERO = new Integer(0);",
        " Mark": "                                               ^",
        " Line": 47
    },
    {
        " Proj": "Lang-24",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Integer INTEGER_ONE = new Integer(1);",
        " Mark": "                                              ^",
        " Line": 49
    },
    {
        " Proj": "Lang-24",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Integer INTEGER_MINUS_ONE = new Integer(-1);",
        " Mark": "                                                    ^",
        " Line": 51
    },
    {
        " Proj": "Lang-24",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Short SHORT_ZERO = new Short((short) 0);",
        " Mark": "                                           ^",
        " Line": 53
    },
    {
        " Proj": "Lang-24",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Short SHORT_ONE = new Short((short) 1);",
        " Mark": "                                          ^",
        " Line": 55
    },
    {
        " Proj": "Lang-24",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Short SHORT_MINUS_ONE = new Short((short) -1);",
        " Mark": "                                                ^",
        " Line": 57
    },
    {
        " Proj": "Lang-24",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Double DOUBLE_ZERO = new Double(0.0d);",
        " Mark": "                                             ^",
        " Line": 65
    },
    {
        " Proj": "Lang-24",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Double DOUBLE_ONE = new Double(1.0d);",
        " Mark": "                                            ^",
        " Line": 67
    },
    {
        " Proj": "Lang-24",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Double DOUBLE_MINUS_ONE = new Double(-1.0d);",
        " Mark": "                                                  ^",
        " Line": 69
    },
    {
        " Proj": "Lang-24",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Float FLOAT_ZERO = new Float(0.0f);",
        " Mark": "                                           ^",
        " Line": 71
    },
    {
        " Proj": "Lang-24",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Float FLOAT_ONE = new Float(1.0f);",
        " Mark": "                                          ^",
        " Line": 73
    },
    {
        " Proj": "Lang-24",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Float FLOAT_MINUS_ONE = new Float(-1.0f);",
        " Mark": "                                                ^",
        " Line": 75
    },
    {
        " Proj": "Lang-24",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {",
        " Mark": "                                                     ^",
        " Line": 512
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {",
        " Mark": "                     ^",
        " Line": 714
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {",
        " Mark": "                                             ^",
        " Line": 714
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "                         (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {",
        " Mark": "                                   ^",
        " Line": 746
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "                         (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {",
        " Mark": "                                                           ^",
        " Line": 746
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            (mPattern == other.mPattern || mPattern.equals(other.mPattern)) &&",
        " Mark": "                      ^",
        " Line": 985
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            (mLocale == other.mLocale || mLocale.equals(other.mLocale)) &&",
        " Mark": "                     ^",
        " Line": 987
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1091
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1098
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1122
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1129
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1156
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1170
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1193
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1200
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public final void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                          ^",
        " Line": 1207
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1236
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1243
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public final void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                          ^",
        " Line": 1250
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1285
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1292
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public final void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                          ^",
        " Line": 1299
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1340
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1347
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public final void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                          ^",
        " Line": 1354
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1380
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1387
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public final void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                          ^",
        " Line": 1394
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1416
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1423
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public final void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                          ^",
        " Line": 1430
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1455
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1462
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                    ^",
        " Line": 1473
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1497
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1504
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                    ^",
        " Line": 1515
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1557
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1570
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1610
    },
    {
        " Proj": "Lang-26",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1617
    },
    {
        " Proj": "Lang-27",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Long LONG_ZERO = new Long(0L);",
        " Mark": "                                         ^",
        " Line": 41
    },
    {
        " Proj": "Lang-27",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Long LONG_ONE = new Long(1L);",
        " Mark": "                                        ^",
        " Line": 43
    },
    {
        " Proj": "Lang-27",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Long LONG_MINUS_ONE = new Long(-1L);",
        " Mark": "                                              ^",
        " Line": 45
    },
    {
        " Proj": "Lang-27",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Integer INTEGER_ZERO = new Integer(0);",
        " Mark": "                                               ^",
        " Line": 47
    },
    {
        " Proj": "Lang-27",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Integer INTEGER_ONE = new Integer(1);",
        " Mark": "                                              ^",
        " Line": 49
    },
    {
        " Proj": "Lang-27",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Integer INTEGER_MINUS_ONE = new Integer(-1);",
        " Mark": "                                                    ^",
        " Line": 51
    },
    {
        " Proj": "Lang-27",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Short SHORT_ZERO = new Short((short) 0);",
        " Mark": "                                           ^",
        " Line": 53
    },
    {
        " Proj": "Lang-27",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Short SHORT_ONE = new Short((short) 1);",
        " Mark": "                                          ^",
        " Line": 55
    },
    {
        " Proj": "Lang-27",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Short SHORT_MINUS_ONE = new Short((short) -1);",
        " Mark": "                                                ^",
        " Line": 57
    },
    {
        " Proj": "Lang-27",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Double DOUBLE_ZERO = new Double(0.0d);",
        " Mark": "                                             ^",
        " Line": 65
    },
    {
        " Proj": "Lang-27",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Double DOUBLE_ONE = new Double(1.0d);",
        " Mark": "                                            ^",
        " Line": 67
    },
    {
        " Proj": "Lang-27",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Double DOUBLE_MINUS_ONE = new Double(-1.0d);",
        " Mark": "                                                  ^",
        " Line": 69
    },
    {
        " Proj": "Lang-27",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Float FLOAT_ZERO = new Float(0.0f);",
        " Mark": "                                           ^",
        " Line": 71
    },
    {
        " Proj": "Lang-27",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Float FLOAT_ONE = new Float(1.0f);",
        " Mark": "                                          ^",
        " Line": 73
    },
    {
        " Proj": "Lang-27",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Float FLOAT_MINUS_ONE = new Float(-1.0f);",
        " Mark": "                                                ^",
        " Line": 75
    },
    {
        " Proj": "Lang-27",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {",
        " Mark": "                                                     ^",
        " Line": 512
    },
    {
        " Proj": "Lang-28",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Lang-29",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Lang-3",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {",
        " Mark": "                                                     ^",
        " Line": 523
    },
    {
        " Proj": "Lang-3",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `str.startsWith(\"0x\", pos)`.",
        " Code": "        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex",
        " Mark": "                                      ^",
        " Line": 725
    },
    {
        " Proj": "Lang-30",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Lang-31",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Lang-32",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Lang-33",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Lang-34",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Lang-36",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Long LONG_ZERO = new Long(0L);",
        " Mark": "                                         ^",
        " Line": 41
    },
    {
        " Proj": "Lang-36",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Long LONG_ONE = new Long(1L);",
        " Mark": "                                        ^",
        " Line": 43
    },
    {
        " Proj": "Lang-36",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Long LONG_MINUS_ONE = new Long(-1L);",
        " Mark": "                                              ^",
        " Line": 45
    },
    {
        " Proj": "Lang-36",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Integer INTEGER_ZERO = new Integer(0);",
        " Mark": "                                               ^",
        " Line": 47
    },
    {
        " Proj": "Lang-36",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Integer INTEGER_ONE = new Integer(1);",
        " Mark": "                                              ^",
        " Line": 49
    },
    {
        " Proj": "Lang-36",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Integer INTEGER_MINUS_ONE = new Integer(-1);",
        " Mark": "                                                    ^",
        " Line": 51
    },
    {
        " Proj": "Lang-36",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Short SHORT_ZERO = new Short((short) 0);",
        " Mark": "                                           ^",
        " Line": 53
    },
    {
        " Proj": "Lang-36",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Short SHORT_ONE = new Short((short) 1);",
        " Mark": "                                          ^",
        " Line": 55
    },
    {
        " Proj": "Lang-36",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Short SHORT_MINUS_ONE = new Short((short) -1);",
        " Mark": "                                                ^",
        " Line": 57
    },
    {
        " Proj": "Lang-36",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Double DOUBLE_ZERO = new Double(0.0d);",
        " Mark": "                                             ^",
        " Line": 65
    },
    {
        " Proj": "Lang-36",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Double DOUBLE_ONE = new Double(1.0d);",
        " Mark": "                                            ^",
        " Line": 67
    },
    {
        " Proj": "Lang-36",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Double DOUBLE_MINUS_ONE = new Double(-1.0d);",
        " Mark": "                                                  ^",
        " Line": 69
    },
    {
        " Proj": "Lang-36",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Float FLOAT_ZERO = new Float(0.0f);",
        " Mark": "                                           ^",
        " Line": 71
    },
    {
        " Proj": "Lang-36",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Float FLOAT_ONE = new Float(1.0f);",
        " Mark": "                                          ^",
        " Line": 73
    },
    {
        " Proj": "Lang-36",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Float FLOAT_MINUS_ONE = new Float(-1.0f);",
        " Mark": "                                                ^",
        " Line": 75
    },
    {
        " Proj": "Lang-36",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {",
        " Mark": "                                                     ^",
        " Line": 505
    },
    {
        " Proj": "Lang-37",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {",
        " Mark": "                     ^",
        " Line": 714
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {",
        " Mark": "                                             ^",
        " Line": 714
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "                         (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {",
        " Mark": "                                   ^",
        " Line": 746
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "                         (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {",
        " Mark": "                                                           ^",
        " Line": 746
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            (mPattern == other.mPattern || mPattern.equals(other.mPattern)) &&",
        " Mark": "                      ^",
        " Line": 985
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            (mLocale == other.mLocale || mLocale.equals(other.mLocale)) &&",
        " Mark": "                     ^",
        " Line": 987
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1091
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1098
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1122
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1129
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1156
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1170
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1193
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1200
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public final void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                          ^",
        " Line": 1207
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1236
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1243
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public final void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                          ^",
        " Line": 1250
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1285
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1292
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public final void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                          ^",
        " Line": 1299
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1340
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1347
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public final void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                          ^",
        " Line": 1354
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1380
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1387
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public final void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                          ^",
        " Line": 1394
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1416
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1423
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public final void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                          ^",
        " Line": 1430
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1455
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1462
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                    ^",
        " Line": 1473
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1497
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1504
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                    ^",
        " Line": 1515
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1557
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1570
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1610
    },
    {
        " Proj": "Lang-38",
        "Class": "org.apache.commons.lang3.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1617
    },
    {
        " Proj": "Lang-39",
        "Class": "org.apache.commons.lang3.StringUtils",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (str1 == str2) {",
        " Mark": "                 ^",
        " Line": 5364
    },
    {
        " Proj": "Lang-4",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Lang-40",
        "Class": "org.apache.commons.lang.StringUtils",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (str1 == str2) {",
        " Mark": "                 ^",
        " Line": 5298
    },
    {
        " Proj": "Lang-41",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Lang-42",
        "Class": "org.apache.commons.lang.Entities",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in EntityMap; expected @Override",
        " Code": "        public void add(String name, int value) {",
        " Mark": "                    ^",
        " Line": 448
    },
    {
        " Proj": "Lang-42",
        "Class": "org.apache.commons.lang.Entities",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "            mapNameToValue.put(name, new Integer(value));",
        " Mark": "                                     ^",
        " Line": 449
    },
    {
        " Proj": "Lang-42",
        "Class": "org.apache.commons.lang.Entities",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "name implements method in EntityMap; expected @Override",
        " Code": "        public String name(int value) {",
        " Mark": "                      ^",
        " Line": 456
    },
    {
        " Proj": "Lang-42",
        "Class": "org.apache.commons.lang.Entities",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "value implements method in EntityMap; expected @Override",
        " Code": "        public int value(String name) {",
        " Mark": "                   ^",
        " Line": 463
    },
    {
        " Proj": "Lang-42",
        "Class": "org.apache.commons.lang.Entities",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in EntityMap; expected @Override",
        " Code": "        public void add(String name, int value) {",
        " Mark": "                    ^",
        " Line": 480
    },
    {
        " Proj": "Lang-42",
        "Class": "org.apache.commons.lang.Entities",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "            mapNameToValue.put(name, new Integer(value));",
        " Mark": "                                     ^",
        " Line": 481
    },
    {
        " Proj": "Lang-42",
        "Class": "org.apache.commons.lang.Entities",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "            mapValueToName.put(new Integer(value), name);",
        " Mark": "                               ^",
        " Line": 482
    },
    {
        " Proj": "Lang-42",
        "Class": "org.apache.commons.lang.Entities",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "name implements method in EntityMap; expected @Override",
        " Code": "        public String name(int value) {",
        " Mark": "                      ^",
        " Line": 488
    },
    {
        " Proj": "Lang-42",
        "Class": "org.apache.commons.lang.Entities",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "            return (String) mapValueToName.get(new Integer(value));",
        " Mark": "                                               ^",
        " Line": 489
    },
    {
        " Proj": "Lang-42",
        "Class": "org.apache.commons.lang.Entities",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "value implements method in EntityMap; expected @Override",
        " Code": "        public int value(String name) {",
        " Mark": "                   ^",
        " Line": 495
    },
    {
        " Proj": "Lang-42",
        "Class": "org.apache.commons.lang.Entities",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "name overrides method in PrimitiveEntityMap; expected @Override",
        " Code": "        public String name(int value) {",
        " Mark": "                      ^",
        " Line": 532
    },
    {
        " Proj": "Lang-42",
        "Class": "org.apache.commons.lang.Entities",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in EntityMap; expected @Override",
        " Code": "        public void add(String name, int value) {",
        " Mark": "                    ^",
        " Line": 599
    },
    {
        " Proj": "Lang-42",
        "Class": "org.apache.commons.lang.Entities",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "name implements method in EntityMap; expected @Override",
        " Code": "        public String name(int value) {",
        " Mark": "                      ^",
        " Line": 627
    },
    {
        " Proj": "Lang-42",
        "Class": "org.apache.commons.lang.Entities",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "value implements method in EntityMap; expected @Override",
        " Code": "        public int value(String name) {",
        " Mark": "                   ^",
        " Line": 639
    },
    {
        " Proj": "Lang-42",
        "Class": "org.apache.commons.lang.Entities",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add overrides method in ArrayEntityMap; expected @Override",
        " Code": "        public void add(String name, int value) {",
        " Mark": "                    ^",
        " Line": 699
    },
    {
        " Proj": "Lang-42",
        "Class": "org.apache.commons.lang.Entities",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "name overrides method in ArrayEntityMap; expected @Override",
        " Code": "        public String name(int value) {",
        " Mark": "                      ^",
        " Line": 716
    },
    {
        " Proj": "Lang-43",
        "Class": "org.apache.commons.lang.text.ExtendedMessageFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toPattern overrides method in MessageFormat; expected @Override",
        " Code": "    public String toPattern() {",
        " Mark": "                  ^",
        " Line": 133
    },
    {
        " Proj": "Lang-43",
        "Class": "org.apache.commons.lang.text.ExtendedMessageFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "applyPattern overrides method in MessageFormat; expected @Override",
        " Code": "    public final void applyPattern(String pattern) {",
        " Mark": "                      ^",
        " Line": 142
    },
    {
        " Proj": "Lang-43",
        "Class": "org.apache.commons.lang.text.ExtendedMessageFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setFormat overrides method in MessageFormat; expected @Override",
        " Code": "    public void setFormat(int formatElementIndex, Format newFormat) {",
        " Mark": "                ^",
        " Line": 212
    },
    {
        " Proj": "Lang-43",
        "Class": "org.apache.commons.lang.text.ExtendedMessageFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setFormatByArgumentIndex overrides method in MessageFormat; expected @Override",
        " Code": "    public void setFormatByArgumentIndex(int argumentIndex, Format newFormat) {",
        " Mark": "                ^",
        " Line": 220
    },
    {
        " Proj": "Lang-43",
        "Class": "org.apache.commons.lang.text.ExtendedMessageFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setFormats overrides method in MessageFormat; expected @Override",
        " Code": "    public void setFormats(Format[] newFormats) {",
        " Mark": "                ^",
        " Line": 228
    },
    {
        " Proj": "Lang-43",
        "Class": "org.apache.commons.lang.text.ExtendedMessageFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setFormatsByArgumentIndex overrides method in MessageFormat; expected @Override",
        " Code": "    public void setFormatsByArgumentIndex(Format[] newFormats) {",
        " Mark": "                ^",
        " Line": 236
    },
    {
        " Proj": "Lang-44",
        "Class": "org.apache.commons.lang.NumberUtils",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {",
        " Mark": "                                                     ^",
        " Line": 198
    },
    {
        " Proj": "Lang-45",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Lang-46",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Lang-47",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (this == other) {",
        " Mark": "                 ^",
        " Line": 2430
    },
    {
        " Proj": "Lang-47",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "NonOverridingEquals",
        "  Msg": "equals method doesn't override Object.equals; if this is a type-specific helper for a method that does override Object.equals, either inline it into the callers or rename it to avoid ambiguity",
        " Code": "    public boolean equals(StrBuilder other) {",
        " Mark": "                   ^",
        " Line": 2455
    },
    {
        " Proj": "Lang-47",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (this == other) {",
        " Mark": "                 ^",
        " Line": 2456
    },
    {
        " Proj": "Lang-47",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 2479
    },
    {
        " Proj": "Lang-47",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Object; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 2491
    },
    {
        " Proj": "Lang-47",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString overrides method in Object; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 2510
    },
    {
        " Proj": "Lang-47",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "tokenize overrides method in StrTokenizer; expected @Override",
        " Code": "        protected List tokenize(char[] chars, int offset, int count) {",
        " Mark": "                       ^",
        " Line": 2571
    },
    {
        " Proj": "Lang-47",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getContent overrides method in StrTokenizer; expected @Override",
        " Code": "        public String getContent() {",
        " Mark": "                      ^",
        " Line": 2580
    },
    {
        " Proj": "Lang-47",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "close implements method in Reader; expected @Override",
        " Code": "        public void close() {",
        " Mark": "                    ^",
        " Line": 2606
    },
    {
        " Proj": "Lang-47",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "read overrides method in Reader; expected @Override",
        " Code": "        public int read() {",
        " Mark": "                   ^",
        " Line": 2611
    },
    {
        " Proj": "Lang-47",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "read implements method in Reader; expected @Override",
        " Code": "        public int read(char b[], int off, int len) {",
        " Mark": "                   ^",
        " Line": 2619
    },
    {
        " Proj": "Lang-47",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "skip overrides method in Reader; expected @Override",
        " Code": "        public long skip(long n) {",
        " Mark": "                    ^",
        " Line": 2639
    },
    {
        " Proj": "Lang-47",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "IntLongMath",
        "  Msg": "Expression of type int may overflow before being assigned to a long",
        " Code": "                n = StrBuilder.this.size() - pos;",
        " Mark": "                                           ^",
        " Line": 2641
    },
    {
        " Proj": "Lang-47",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "NarrowingCompoundAssignment",
        "  Msg": "Compound assignments from long to int hide lossy casts",
        " Code": "            pos += n;",
        " Mark": "                ^",
        " Line": 2646
    },
    {
        " Proj": "Lang-47",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "ready overrides method in Reader; expected @Override",
        " Code": "        public boolean ready() {",
        " Mark": "                       ^",
        " Line": 2651
    },
    {
        " Proj": "Lang-47",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "markSupported overrides method in Reader; expected @Override",
        " Code": "        public boolean markSupported() {",
        " Mark": "                       ^",
        " Line": 2656
    },
    {
        " Proj": "Lang-47",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mark overrides method in Reader; expected @Override",
        " Code": "        public void mark(int readAheadLimit) {",
        " Mark": "                    ^",
        " Line": 2661
    },
    {
        " Proj": "Lang-47",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "reset overrides method in Reader; expected @Override",
        " Code": "        public void reset() {",
        " Mark": "                    ^",
        " Line": 2666
    },
    {
        " Proj": "Lang-47",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "close implements method in Writer; expected @Override",
        " Code": "        public void close() {",
        " Mark": "                    ^",
        " Line": 2683
    },
    {
        " Proj": "Lang-47",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "flush implements method in Writer; expected @Override",
        " Code": "        public void flush() {",
        " Mark": "                    ^",
        " Line": 2688
    },
    {
        " Proj": "Lang-47",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "write overrides method in Writer; expected @Override",
        " Code": "        public void write(int c) {",
        " Mark": "                    ^",
        " Line": 2693
    },
    {
        " Proj": "Lang-47",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "write overrides method in Writer; expected @Override",
        " Code": "        public void write(char[] cbuf) {",
        " Mark": "                    ^",
        " Line": 2698
    },
    {
        " Proj": "Lang-47",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "write implements method in Writer; expected @Override",
        " Code": "        public void write(char[] cbuf, int off, int len) {",
        " Mark": "                    ^",
        " Line": 2703
    },
    {
        " Proj": "Lang-47",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "write overrides method in Writer; expected @Override",
        " Code": "        public void write(String str) {",
        " Mark": "                    ^",
        " Line": 2708
    },
    {
        " Proj": "Lang-47",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "write overrides method in Writer; expected @Override",
        " Code": "        public void write(String str, int off, int len) {",
        " Mark": "                    ^",
        " Line": 2713
    },
    {
        " Proj": "Lang-49",
        "Class": "org.apache.commons.lang.math.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "intValue implements method in Number; expected @Override",
        " Code": "    public int intValue() {",
        " Mark": "               ^",
        " Line": 419
    },
    {
        " Proj": "Lang-49",
        "Class": "org.apache.commons.lang.math.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "longValue implements method in Number; expected @Override",
        " Code": "    public long longValue() {",
        " Mark": "                ^",
        " Line": 429
    },
    {
        " Proj": "Lang-49",
        "Class": "org.apache.commons.lang.math.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "floatValue implements method in Number; expected @Override",
        " Code": "    public float floatValue() {",
        " Mark": "                 ^",
        " Line": 439
    },
    {
        " Proj": "Lang-49",
        "Class": "org.apache.commons.lang.math.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "doubleValue implements method in Number; expected @Override",
        " Code": "    public double doubleValue() {",
        " Mark": "                  ^",
        " Line": 449
    },
    {
        " Proj": "Lang-49",
        "Class": "org.apache.commons.lang.math.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 832
    },
    {
        " Proj": "Lang-49",
        "Class": "org.apache.commons.lang.math.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Object; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 849
    },
    {
        " Proj": "Lang-49",
        "Class": "org.apache.commons.lang.math.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compareTo implements method in Comparable; expected @Override",
        " Code": "    public int compareTo(Object object) {",
        " Mark": "               ^",
        " Line": 869
    },
    {
        " Proj": "Lang-49",
        "Class": "org.apache.commons.lang.math.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString overrides method in Object; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 897
    },
    {
        " Proj": "Lang-5",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        Object key = new Integer(style);",
        " Mark": "                     ^",
        " Line": 280
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        Object key = new Integer(style);",
        " Mark": "                     ^",
        " Line": 365
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));",
        " Mark": "                              ^",
        " Line": 459
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));",
        " Mark": "                                                      ^",
        " Line": 459
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {",
        " Mark": "                     ^",
        " Line": 713
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {",
        " Mark": "                                             ^",
        " Line": 713
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "                         (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {",
        " Mark": "                                   ^",
        " Line": 745
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "                         (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {",
        " Mark": "                                                           ^",
        " Line": 745
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "format implements method in Format; expected @Override",
        " Code": "    public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {",
        " Mark": "                        ^",
        " Line": 787
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "parseObject implements method in Format; expected @Override",
        " Code": "    public Object parseObject(String source, ParsePosition pos) {",
        " Mark": "                  ^",
        " Line": 902
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 974
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            (mPattern == other.mPattern || mPattern.equals(other.mPattern)) &&",
        " Mark": "                      ^",
        " Line": 980
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            (mLocale == other.mLocale || mLocale.equals(other.mLocale)) &&",
        " Mark": "                     ^",
        " Line": 982
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Object; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 996
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString overrides method in Object; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 1011
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1084
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1091
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1115
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1122
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1149
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1163
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1188
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1195
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public final void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                          ^",
        " Line": 1202
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1231
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1238
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public final void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                          ^",
        " Line": 1245
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1280
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1287
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public final void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                          ^",
        " Line": 1294
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1335
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1342
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public final void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                          ^",
        " Line": 1349
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1375
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1382
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public final void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                          ^",
        " Line": 1389
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1411
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1418
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public final void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                          ^",
        " Line": 1425
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1450
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1457
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                    ^",
        " Line": 1468
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1492
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1499
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                    ^",
        " Line": 1510
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1552
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1565
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1605
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1612
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Object; expected @Override",
        " Code": "        public int hashCode() {",
        " Mark": "                   ^",
        " Line": 1666
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "        public boolean equals(Object obj) {",
        " Mark": "                       ^",
        " Line": 1673
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "        public boolean equals(Object obj) {",
        " Mark": "                       ^",
        " Line": 1712
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Object; expected @Override",
        " Code": "        public int hashCode() {",
        " Mark": "                   ^",
        " Line": 1733
    },
    {
        " Proj": "Lang-50",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString overrides method in Object; expected @Override",
        " Code": "        public String toString() {",
        " Mark": "                      ^",
        " Line": 1742
    },
    {
        " Proj": "Lang-51",
        "Class": "org.apache.commons.lang.BooleanUtils",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (str == \"true\") {",
        " Mark": "                ^",
        " Line": 656
    },
    {
        " Proj": "Lang-52",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Lang-53",
        "Class": "org.apache.commons.lang.time.DateUtils",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hasNext implements method in Iterator; expected @Override",
        " Code": "        public boolean hasNext() {",
        " Mark": "                       ^",
        " Line": 933
    },
    {
        " Proj": "Lang-53",
        "Class": "org.apache.commons.lang.time.DateUtils",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "next implements method in Iterator; expected @Override",
        " Code": "        public Object next() {",
        " Mark": "                      ^",
        " Line": 942
    },
    {
        " Proj": "Lang-53",
        "Class": "org.apache.commons.lang.time.DateUtils",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "remove implements method in Iterator; expected @Override",
        " Code": "        public void remove() {",
        " Mark": "                    ^",
        " Line": 956
    },
    {
        " Proj": "Lang-55",
        "Class": "org.apache.commons.lang.time.StopWatch",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString overrides method in Object; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 248
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        Object key = new Integer(style);",
        " Mark": "                     ^",
        " Line": 281
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        Object key = new Integer(style);",
        " Mark": "                     ^",
        " Line": 367
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));",
        " Mark": "                              ^",
        " Line": 461
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));",
        " Mark": "                                                      ^",
        " Line": 461
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {",
        " Mark": "                     ^",
        " Line": 718
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {",
        " Mark": "                                             ^",
        " Line": 718
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "                         (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {",
        " Mark": "                                   ^",
        " Line": 750
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "                         (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {",
        " Mark": "                                                           ^",
        " Line": 750
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "format implements method in Format; expected @Override",
        " Code": "    public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {",
        " Mark": "                        ^",
        " Line": 792
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "parseObject implements method in Format; expected @Override",
        " Code": "    public Object parseObject(String source, ParsePosition pos) {",
        " Mark": "                  ^",
        " Line": 907
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 979
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            (mPattern == other.mPattern || mPattern.equals(other.mPattern)) &&",
        " Mark": "                      ^",
        " Line": 985
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            (mLocale == other.mLocale || mLocale.equals(other.mLocale)) &&",
        " Mark": "                     ^",
        " Line": 987
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Object; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 1001
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString overrides method in Object; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 1016
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1081
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1088
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1112
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1119
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1146
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1160
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1185
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1192
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public final void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                          ^",
        " Line": 1199
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1228
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1235
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public final void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                          ^",
        " Line": 1242
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1277
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1284
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public final void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                          ^",
        " Line": 1291
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1332
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1339
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public final void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                          ^",
        " Line": 1346
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1372
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1379
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public final void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                          ^",
        " Line": 1386
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1408
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1415
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public final void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                          ^",
        " Line": 1422
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1447
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1454
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                    ^",
        " Line": 1465
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1489
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1496
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in NumberRule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, int value) {",
        " Mark": "                    ^",
        " Line": 1507
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1549
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1562
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateLength implements method in Rule; expected @Override",
        " Code": "        public int estimateLength() {",
        " Mark": "                   ^",
        " Line": 1602
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "appendTo implements method in Rule; expected @Override",
        " Code": "        public void appendTo(StringBuffer buffer, Calendar calendar) {",
        " Mark": "                    ^",
        " Line": 1609
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Object; expected @Override",
        " Code": "        public int hashCode() {",
        " Mark": "                   ^",
        " Line": 1663
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "        public boolean equals(Object obj) {",
        " Mark": "                       ^",
        " Line": 1670
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "        public boolean equals(Object obj) {",
        " Mark": "                       ^",
        " Line": 1709
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Object; expected @Override",
        " Code": "        public int hashCode() {",
        " Mark": "                   ^",
        " Line": 1730
    },
    {
        " Proj": "Lang-56",
        "Class": "org.apache.commons.lang.time.FastDateFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString overrides method in Object; expected @Override",
        " Code": "        public String toString() {",
        " Mark": "                      ^",
        " Line": 1739
    },
    {
        " Proj": "Lang-58",
        "Class": "org.apache.commons.lang.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Long LONG_ZERO = new Long(0L);",
        " Mark": "                                         ^",
        " Line": 41
    },
    {
        " Proj": "Lang-58",
        "Class": "org.apache.commons.lang.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Long LONG_ONE = new Long(1L);",
        " Mark": "                                        ^",
        " Line": 43
    },
    {
        " Proj": "Lang-58",
        "Class": "org.apache.commons.lang.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Long LONG_MINUS_ONE = new Long(-1L);",
        " Mark": "                                              ^",
        " Line": 45
    },
    {
        " Proj": "Lang-58",
        "Class": "org.apache.commons.lang.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Integer INTEGER_ZERO = new Integer(0);",
        " Mark": "                                               ^",
        " Line": 47
    },
    {
        " Proj": "Lang-58",
        "Class": "org.apache.commons.lang.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Integer INTEGER_ONE = new Integer(1);",
        " Mark": "                                              ^",
        " Line": 49
    },
    {
        " Proj": "Lang-58",
        "Class": "org.apache.commons.lang.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Integer INTEGER_MINUS_ONE = new Integer(-1);",
        " Mark": "                                                    ^",
        " Line": 51
    },
    {
        " Proj": "Lang-58",
        "Class": "org.apache.commons.lang.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Short SHORT_ZERO = new Short((short) 0);",
        " Mark": "                                           ^",
        " Line": 53
    },
    {
        " Proj": "Lang-58",
        "Class": "org.apache.commons.lang.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Short SHORT_ONE = new Short((short) 1);",
        " Mark": "                                          ^",
        " Line": 55
    },
    {
        " Proj": "Lang-58",
        "Class": "org.apache.commons.lang.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Short SHORT_MINUS_ONE = new Short((short) -1);",
        " Mark": "                                                ^",
        " Line": 57
    },
    {
        " Proj": "Lang-58",
        "Class": "org.apache.commons.lang.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Byte BYTE_ZERO = new Byte((byte) 0);",
        " Mark": "                                         ^",
        " Line": 59
    },
    {
        " Proj": "Lang-58",
        "Class": "org.apache.commons.lang.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Byte BYTE_ONE = new Byte((byte) 1);",
        " Mark": "                                        ^",
        " Line": 61
    },
    {
        " Proj": "Lang-58",
        "Class": "org.apache.commons.lang.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Byte BYTE_MINUS_ONE = new Byte((byte) -1);",
        " Mark": "                                              ^",
        " Line": 63
    },
    {
        " Proj": "Lang-58",
        "Class": "org.apache.commons.lang.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Double DOUBLE_ZERO = new Double(0.0d);",
        " Mark": "                                             ^",
        " Line": 65
    },
    {
        " Proj": "Lang-58",
        "Class": "org.apache.commons.lang.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Double DOUBLE_ONE = new Double(1.0d);",
        " Mark": "                                            ^",
        " Line": 67
    },
    {
        " Proj": "Lang-58",
        "Class": "org.apache.commons.lang.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Double DOUBLE_MINUS_ONE = new Double(-1.0d);",
        " Mark": "                                                  ^",
        " Line": 69
    },
    {
        " Proj": "Lang-58",
        "Class": "org.apache.commons.lang.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Float FLOAT_ZERO = new Float(0.0f);",
        " Mark": "                                           ^",
        " Line": 71
    },
    {
        " Proj": "Lang-58",
        "Class": "org.apache.commons.lang.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Float FLOAT_ONE = new Float(1.0f);",
        " Mark": "                                          ^",
        " Line": 73
    },
    {
        " Proj": "Lang-58",
        "Class": "org.apache.commons.lang.math.NumberUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "    public static final Float FLOAT_MINUS_ONE = new Float(-1.0f);",
        " Mark": "                                                ^",
        " Line": 75
    },
    {
        " Proj": "Lang-58",
        "Class": "org.apache.commons.lang.math.NumberUtils",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {",
        " Mark": "                                                     ^",
        " Line": 454
    },
    {
        " Proj": "Lang-59",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (this == other) {",
        " Mark": "                 ^",
        " Line": 2076
    },
    {
        " Proj": "Lang-59",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "NonOverridingEquals",
        "  Msg": "equals method doesn't override Object.equals; if this is a type-specific helper for a method that does override Object.equals, either inline it into the callers or rename it to avoid ambiguity",
        " Code": "    public boolean equals(StrBuilder other) {",
        " Mark": "                   ^",
        " Line": 2101
    },
    {
        " Proj": "Lang-59",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (this == other) {",
        " Mark": "                 ^",
        " Line": 2102
    },
    {
        " Proj": "Lang-59",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 2125
    },
    {
        " Proj": "Lang-59",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Object; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 2137
    },
    {
        " Proj": "Lang-59",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString overrides method in Object; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 2156
    },
    {
        " Proj": "Lang-59",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "tokenize overrides method in StrTokenizer; expected @Override",
        " Code": "        protected List tokenize(char[] chars, int offset, int count) {",
        " Mark": "                       ^",
        " Line": 2217
    },
    {
        " Proj": "Lang-59",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getContent overrides method in StrTokenizer; expected @Override",
        " Code": "        public String getContent() {",
        " Mark": "                      ^",
        " Line": 2226
    },
    {
        " Proj": "Lang-59",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "close implements method in Reader; expected @Override",
        " Code": "        public void close() {",
        " Mark": "                    ^",
        " Line": 2252
    },
    {
        " Proj": "Lang-59",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "read overrides method in Reader; expected @Override",
        " Code": "        public int read() {",
        " Mark": "                   ^",
        " Line": 2257
    },
    {
        " Proj": "Lang-59",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "read implements method in Reader; expected @Override",
        " Code": "        public int read(char b[], int off, int len) {",
        " Mark": "                   ^",
        " Line": 2265
    },
    {
        " Proj": "Lang-59",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "skip overrides method in Reader; expected @Override",
        " Code": "        public long skip(long n) {",
        " Mark": "                    ^",
        " Line": 2285
    },
    {
        " Proj": "Lang-59",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "IntLongMath",
        "  Msg": "Expression of type int may overflow before being assigned to a long",
        " Code": "                n = StrBuilder.this.size() - pos;",
        " Mark": "                                           ^",
        " Line": 2287
    },
    {
        " Proj": "Lang-59",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "NarrowingCompoundAssignment",
        "  Msg": "Compound assignments from long to int hide lossy casts",
        " Code": "            pos += n;",
        " Mark": "                ^",
        " Line": 2292
    },
    {
        " Proj": "Lang-59",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "ready overrides method in Reader; expected @Override",
        " Code": "        public boolean ready() {",
        " Mark": "                       ^",
        " Line": 2297
    },
    {
        " Proj": "Lang-59",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "markSupported overrides method in Reader; expected @Override",
        " Code": "        public boolean markSupported() {",
        " Mark": "                       ^",
        " Line": 2302
    },
    {
        " Proj": "Lang-59",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mark overrides method in Reader; expected @Override",
        " Code": "        public void mark(int readAheadLimit) {",
        " Mark": "                    ^",
        " Line": 2307
    },
    {
        " Proj": "Lang-59",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "reset overrides method in Reader; expected @Override",
        " Code": "        public void reset() {",
        " Mark": "                    ^",
        " Line": 2312
    },
    {
        " Proj": "Lang-59",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "close implements method in Writer; expected @Override",
        " Code": "        public void close() {",
        " Mark": "                    ^",
        " Line": 2329
    },
    {
        " Proj": "Lang-59",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "flush implements method in Writer; expected @Override",
        " Code": "        public void flush() {",
        " Mark": "                    ^",
        " Line": 2334
    },
    {
        " Proj": "Lang-59",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "write overrides method in Writer; expected @Override",
        " Code": "        public void write(int c) {",
        " Mark": "                    ^",
        " Line": 2339
    },
    {
        " Proj": "Lang-59",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "write overrides method in Writer; expected @Override",
        " Code": "        public void write(char[] cbuf) {",
        " Mark": "                    ^",
        " Line": 2344
    },
    {
        " Proj": "Lang-59",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "write implements method in Writer; expected @Override",
        " Code": "        public void write(char[] cbuf, int off, int len) {",
        " Mark": "                    ^",
        " Line": 2349
    },
    {
        " Proj": "Lang-59",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "write overrides method in Writer; expected @Override",
        " Code": "        public void write(String str) {",
        " Mark": "                    ^",
        " Line": 2354
    },
    {
        " Proj": "Lang-59",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "write overrides method in Writer; expected @Override",
        " Code": "        public void write(String str, int off, int len) {",
        " Mark": "                    ^",
        " Line": 2359
    },
    {
        " Proj": "Lang-6",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Lang-60",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (this == other) {",
        " Mark": "                 ^",
        " Line": 2076
    },
    {
        " Proj": "Lang-60",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "NonOverridingEquals",
        "  Msg": "equals method doesn't override Object.equals; if this is a type-specific helper for a method that does override Object.equals, either inline it into the callers or rename it to avoid ambiguity",
        " Code": "    public boolean equals(StrBuilder other) {",
        " Mark": "                   ^",
        " Line": 2101
    },
    {
        " Proj": "Lang-60",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (this == other) {",
        " Mark": "                 ^",
        " Line": 2102
    },
    {
        " Proj": "Lang-60",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 2125
    },
    {
        " Proj": "Lang-60",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Object; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 2137
    },
    {
        " Proj": "Lang-60",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString overrides method in Object; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 2156
    },
    {
        " Proj": "Lang-60",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "tokenize overrides method in StrTokenizer; expected @Override",
        " Code": "        protected List tokenize(char[] chars, int offset, int count) {",
        " Mark": "                       ^",
        " Line": 2217
    },
    {
        " Proj": "Lang-60",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getContent overrides method in StrTokenizer; expected @Override",
        " Code": "        public String getContent() {",
        " Mark": "                      ^",
        " Line": 2226
    },
    {
        " Proj": "Lang-60",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "close implements method in Reader; expected @Override",
        " Code": "        public void close() {",
        " Mark": "                    ^",
        " Line": 2252
    },
    {
        " Proj": "Lang-60",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "read overrides method in Reader; expected @Override",
        " Code": "        public int read() {",
        " Mark": "                   ^",
        " Line": 2257
    },
    {
        " Proj": "Lang-60",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "read implements method in Reader; expected @Override",
        " Code": "        public int read(char b[], int off, int len) {",
        " Mark": "                   ^",
        " Line": 2265
    },
    {
        " Proj": "Lang-60",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "skip overrides method in Reader; expected @Override",
        " Code": "        public long skip(long n) {",
        " Mark": "                    ^",
        " Line": 2285
    },
    {
        " Proj": "Lang-60",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "IntLongMath",
        "  Msg": "Expression of type int may overflow before being assigned to a long",
        " Code": "                n = StrBuilder.this.size() - pos;",
        " Mark": "                                           ^",
        " Line": 2287
    },
    {
        " Proj": "Lang-60",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "NarrowingCompoundAssignment",
        "  Msg": "Compound assignments from long to int hide lossy casts",
        " Code": "            pos += n;",
        " Mark": "                ^",
        " Line": 2292
    },
    {
        " Proj": "Lang-60",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "ready overrides method in Reader; expected @Override",
        " Code": "        public boolean ready() {",
        " Mark": "                       ^",
        " Line": 2297
    },
    {
        " Proj": "Lang-60",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "markSupported overrides method in Reader; expected @Override",
        " Code": "        public boolean markSupported() {",
        " Mark": "                       ^",
        " Line": 2302
    },
    {
        " Proj": "Lang-60",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mark overrides method in Reader; expected @Override",
        " Code": "        public void mark(int readAheadLimit) {",
        " Mark": "                    ^",
        " Line": 2307
    },
    {
        " Proj": "Lang-60",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "reset overrides method in Reader; expected @Override",
        " Code": "        public void reset() {",
        " Mark": "                    ^",
        " Line": 2312
    },
    {
        " Proj": "Lang-60",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "close implements method in Writer; expected @Override",
        " Code": "        public void close() {",
        " Mark": "                    ^",
        " Line": 2329
    },
    {
        " Proj": "Lang-60",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "flush implements method in Writer; expected @Override",
        " Code": "        public void flush() {",
        " Mark": "                    ^",
        " Line": 2334
    },
    {
        " Proj": "Lang-60",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "write overrides method in Writer; expected @Override",
        " Code": "        public void write(int c) {",
        " Mark": "                    ^",
        " Line": 2339
    },
    {
        " Proj": "Lang-60",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "write overrides method in Writer; expected @Override",
        " Code": "        public void write(char[] cbuf) {",
        " Mark": "                    ^",
        " Line": 2344
    },
    {
        " Proj": "Lang-60",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "write implements method in Writer; expected @Override",
        " Code": "        public void write(char[] cbuf, int off, int len) {",
        " Mark": "                    ^",
        " Line": 2349
    },
    {
        " Proj": "Lang-60",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "write overrides method in Writer; expected @Override",
        " Code": "        public void write(String str) {",
        " Mark": "                    ^",
        " Line": 2354
    },
    {
        " Proj": "Lang-60",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "write overrides method in Writer; expected @Override",
        " Code": "        public void write(String str, int off, int len) {",
        " Mark": "                    ^",
        " Line": 2359
    },
    {
        " Proj": "Lang-61",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (this == other) {",
        " Mark": "                 ^",
        " Line": 2076
    },
    {
        " Proj": "Lang-61",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "NonOverridingEquals",
        "  Msg": "equals method doesn't override Object.equals; if this is a type-specific helper for a method that does override Object.equals, either inline it into the callers or rename it to avoid ambiguity",
        " Code": "    public boolean equals(StrBuilder other) {",
        " Mark": "                   ^",
        " Line": 2101
    },
    {
        " Proj": "Lang-61",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (this == other) {",
        " Mark": "                 ^",
        " Line": 2102
    },
    {
        " Proj": "Lang-61",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 2125
    },
    {
        " Proj": "Lang-61",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Object; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 2137
    },
    {
        " Proj": "Lang-61",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString overrides method in Object; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 2156
    },
    {
        " Proj": "Lang-61",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "tokenize overrides method in StrTokenizer; expected @Override",
        " Code": "        protected List tokenize(char[] chars, int offset, int count) {",
        " Mark": "                       ^",
        " Line": 2217
    },
    {
        " Proj": "Lang-61",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getContent overrides method in StrTokenizer; expected @Override",
        " Code": "        public String getContent() {",
        " Mark": "                      ^",
        " Line": 2226
    },
    {
        " Proj": "Lang-61",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "close implements method in Reader; expected @Override",
        " Code": "        public void close() {",
        " Mark": "                    ^",
        " Line": 2252
    },
    {
        " Proj": "Lang-61",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "read overrides method in Reader; expected @Override",
        " Code": "        public int read() {",
        " Mark": "                   ^",
        " Line": 2257
    },
    {
        " Proj": "Lang-61",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "read implements method in Reader; expected @Override",
        " Code": "        public int read(char b[], int off, int len) {",
        " Mark": "                   ^",
        " Line": 2265
    },
    {
        " Proj": "Lang-61",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "skip overrides method in Reader; expected @Override",
        " Code": "        public long skip(long n) {",
        " Mark": "                    ^",
        " Line": 2285
    },
    {
        " Proj": "Lang-61",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "IntLongMath",
        "  Msg": "Expression of type int may overflow before being assigned to a long",
        " Code": "                n = StrBuilder.this.size() - pos;",
        " Mark": "                                           ^",
        " Line": 2287
    },
    {
        " Proj": "Lang-61",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "NarrowingCompoundAssignment",
        "  Msg": "Compound assignments from long to int hide lossy casts",
        " Code": "            pos += n;",
        " Mark": "                ^",
        " Line": 2292
    },
    {
        " Proj": "Lang-61",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "ready overrides method in Reader; expected @Override",
        " Code": "        public boolean ready() {",
        " Mark": "                       ^",
        " Line": 2297
    },
    {
        " Proj": "Lang-61",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "markSupported overrides method in Reader; expected @Override",
        " Code": "        public boolean markSupported() {",
        " Mark": "                       ^",
        " Line": 2302
    },
    {
        " Proj": "Lang-61",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mark overrides method in Reader; expected @Override",
        " Code": "        public void mark(int readAheadLimit) {",
        " Mark": "                    ^",
        " Line": 2307
    },
    {
        " Proj": "Lang-61",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "reset overrides method in Reader; expected @Override",
        " Code": "        public void reset() {",
        " Mark": "                    ^",
        " Line": 2312
    },
    {
        " Proj": "Lang-61",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "close implements method in Writer; expected @Override",
        " Code": "        public void close() {",
        " Mark": "                    ^",
        " Line": 2329
    },
    {
        " Proj": "Lang-61",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "flush implements method in Writer; expected @Override",
        " Code": "        public void flush() {",
        " Mark": "                    ^",
        " Line": 2334
    },
    {
        " Proj": "Lang-61",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "write overrides method in Writer; expected @Override",
        " Code": "        public void write(int c) {",
        " Mark": "                    ^",
        " Line": 2339
    },
    {
        " Proj": "Lang-61",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "write overrides method in Writer; expected @Override",
        " Code": "        public void write(char[] cbuf) {",
        " Mark": "                    ^",
        " Line": 2344
    },
    {
        " Proj": "Lang-61",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "write implements method in Writer; expected @Override",
        " Code": "        public void write(char[] cbuf, int off, int len) {",
        " Mark": "                    ^",
        " Line": 2349
    },
    {
        " Proj": "Lang-61",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "write overrides method in Writer; expected @Override",
        " Code": "        public void write(String str) {",
        " Mark": "                    ^",
        " Line": 2354
    },
    {
        " Proj": "Lang-61",
        "Class": "org.apache.commons.lang.text.StrBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "write overrides method in Writer; expected @Override",
        " Code": "        public void write(String str, int off, int len) {",
        " Mark": "                    ^",
        " Line": 2359
    },
    {
        " Proj": "Lang-62",
        "Class": "org.apache.commons.lang.Entities",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in EntityMap; expected @Override",
        " Code": "        public void add(String name, int value) {",
        " Mark": "                    ^",
        " Line": 426
    },
    {
        " Proj": "Lang-62",
        "Class": "org.apache.commons.lang.Entities",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "            mapNameToValue.put(name, new Integer(value));",
        " Mark": "                                     ^",
        " Line": 427
    },
    {
        " Proj": "Lang-62",
        "Class": "org.apache.commons.lang.Entities",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "name implements method in EntityMap; expected @Override",
        " Code": "        public String name(int value) {",
        " Mark": "                      ^",
        " Line": 434
    },
    {
        " Proj": "Lang-62",
        "Class": "org.apache.commons.lang.Entities",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "value implements method in EntityMap; expected @Override",
        " Code": "        public int value(String name) {",
        " Mark": "                   ^",
        " Line": 441
    },
    {
        " Proj": "Lang-62",
        "Class": "org.apache.commons.lang.Entities",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in EntityMap; expected @Override",
        " Code": "        public void add(String name, int value) {",
        " Mark": "                    ^",
        " Line": 458
    },
    {
        " Proj": "Lang-62",
        "Class": "org.apache.commons.lang.Entities",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "            mapNameToValue.put(name, new Integer(value));",
        " Mark": "                                     ^",
        " Line": 459
    },
    {
        " Proj": "Lang-62",
        "Class": "org.apache.commons.lang.Entities",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "            mapValueToName.put(new Integer(value), name);",
        " Mark": "                               ^",
        " Line": 460
    },
    {
        " Proj": "Lang-62",
        "Class": "org.apache.commons.lang.Entities",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "name implements method in EntityMap; expected @Override",
        " Code": "        public String name(int value) {",
        " Mark": "                      ^",
        " Line": 466
    },
    {
        " Proj": "Lang-62",
        "Class": "org.apache.commons.lang.Entities",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "            return (String) mapValueToName.get(new Integer(value));",
        " Mark": "                                               ^",
        " Line": 467
    },
    {
        " Proj": "Lang-62",
        "Class": "org.apache.commons.lang.Entities",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "value implements method in EntityMap; expected @Override",
        " Code": "        public int value(String name) {",
        " Mark": "                   ^",
        " Line": 473
    },
    {
        " Proj": "Lang-62",
        "Class": "org.apache.commons.lang.Entities",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "name overrides method in PrimitiveEntityMap; expected @Override",
        " Code": "        public String name(int value) {",
        " Mark": "                      ^",
        " Line": 509
    },
    {
        " Proj": "Lang-62",
        "Class": "org.apache.commons.lang.Entities",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in EntityMap; expected @Override",
        " Code": "        public void add(String name, int value) {",
        " Mark": "                    ^",
        " Line": 569
    },
    {
        " Proj": "Lang-62",
        "Class": "org.apache.commons.lang.Entities",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "name implements method in EntityMap; expected @Override",
        " Code": "        public String name(int value) {",
        " Mark": "                      ^",
        " Line": 596
    },
    {
        " Proj": "Lang-62",
        "Class": "org.apache.commons.lang.Entities",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "value implements method in EntityMap; expected @Override",
        " Code": "        public int value(String name) {",
        " Mark": "                   ^",
        " Line": 608
    },
    {
        " Proj": "Lang-62",
        "Class": "org.apache.commons.lang.Entities",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add overrides method in ArrayEntityMap; expected @Override",
        " Code": "        public void add(String name, int value) {",
        " Mark": "                    ^",
        " Line": 666
    },
    {
        " Proj": "Lang-62",
        "Class": "org.apache.commons.lang.Entities",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "name overrides method in ArrayEntityMap; expected @Override",
        " Code": "        public String name(int value) {",
        " Mark": "                      ^",
        " Line": 683
    },
    {
        " Proj": "Lang-63",
        "Class": "org.apache.commons.lang.time.DurationFormatUtils",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "        public boolean equals(Object obj2) {",
        " Mark": "                       ^",
        " Line": 576
    },
    {
        " Proj": "Lang-63",
        "Class": "org.apache.commons.lang.time.DurationFormatUtils",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Object; expected @Override",
        " Code": "        public int hashCode() {",
        " Mark": "                   ^",
        " Line": 604
    },
    {
        " Proj": "Lang-63",
        "Class": "org.apache.commons.lang.time.DurationFormatUtils",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString overrides method in Object; expected @Override",
        " Code": "        public String toString() {",
        " Mark": "                      ^",
        " Line": 613
    },
    {
        " Proj": "Lang-64",
        "Class": "org.apache.commons.lang.enums.ValuedEnum",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compareTo overrides method in Enum; expected @Override",
        " Code": "    public int compareTo(Object other) {",
        " Mark": "               ^",
        " Line": 182
    },
    {
        " Proj": "Lang-64",
        "Class": "org.apache.commons.lang.enums.ValuedEnum",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString overrides method in Enum; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 224
    },
    {
        " Proj": "Lang-65",
        "Class": "org.apache.commons.lang.time.DateUtils",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hasNext implements method in Iterator; expected @Override",
        " Code": "        public boolean hasNext() {",
        " Mark": "                       ^",
        " Line": 932
    },
    {
        " Proj": "Lang-65",
        "Class": "org.apache.commons.lang.time.DateUtils",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "next implements method in Iterator; expected @Override",
        " Code": "        public Object next() {",
        " Mark": "                      ^",
        " Line": 941
    },
    {
        " Proj": "Lang-65",
        "Class": "org.apache.commons.lang.time.DateUtils",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "remove implements method in Iterator; expected @Override",
        " Code": "        public void remove() {",
        " Mark": "                    ^",
        " Line": 955
    },
    {
        " Proj": "Lang-7",
        "Class": "org.apache.commons.lang3.math.NumberUtils",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {",
        " Mark": "                                                     ^",
        " Line": 505
    },
    {
        " Proj": "Lang-8",
        "Class": "org.apache.commons.lang3.time.FastDatePrinter",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {",
        " Mark": "                     ^",
        " Line": 304
    },
    {
        " Proj": "Lang-8",
        "Class": "org.apache.commons.lang3.time.FastDatePrinter",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {",
        " Mark": "                                             ^",
        " Line": 304
    },
    {
        " Proj": "Lang-8",
        "Class": "org.apache.commons.lang3.time.FastDatePrinter",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "                         (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {",
        " Mark": "                                   ^",
        " Line": 336
    },
    {
        " Proj": "Lang-8",
        "Class": "org.apache.commons.lang3.time.FastDatePrinter",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "                         (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {",
        " Mark": "                                                           ^",
        " Line": 336
    },
    {
        " Proj": "Lang-9",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Math-1",
        "Class": "org.apache.commons.math3.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compareTo implements method in Comparable; expected @Override",
        " Code": "    public int compareTo(Fraction object) {",
        " Mark": "               ^",
        " Line": 314
    },
    {
        " Proj": "Math-1",
        "Class": "org.apache.commons.math3.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "negate implements method in FieldElement; expected @Override",
        " Code": "    public Fraction negate() {",
        " Mark": "                    ^",
        " Line": 413
    },
    {
        " Proj": "Math-1",
        "Class": "org.apache.commons.math3.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "reciprocal implements method in FieldElement; expected @Override",
        " Code": "    public Fraction reciprocal() {",
        " Mark": "                    ^",
        " Line": 424
    },
    {
        " Proj": "Math-1",
        "Class": "org.apache.commons.math3.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in FieldElement; expected @Override",
        " Code": "    public Fraction add(Fraction fraction) {",
        " Mark": "                    ^",
        " Line": 438
    },
    {
        " Proj": "Math-1",
        "Class": "org.apache.commons.math3.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "subtract implements method in FieldElement; expected @Override",
        " Code": "    public Fraction subtract(Fraction fraction) {",
        " Mark": "                    ^",
        " Line": 461
    },
    {
        " Proj": "Math-1",
        "Class": "org.apache.commons.math3.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "multiply implements method in FieldElement; expected @Override",
        " Code": "    public Fraction multiply(Fraction fraction) {",
        " Mark": "                    ^",
        " Line": 541
    },
    {
        " Proj": "Math-1",
        "Class": "org.apache.commons.math3.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "multiply implements method in FieldElement; expected @Override",
        " Code": "    public Fraction multiply(final int i) {",
        " Mark": "                    ^",
        " Line": 562
    },
    {
        " Proj": "Math-1",
        "Class": "org.apache.commons.math3.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "divide implements method in FieldElement; expected @Override",
        " Code": "    public Fraction divide(Fraction fraction) {",
        " Mark": "                    ^",
        " Line": 576
    },
    {
        " Proj": "Math-1",
        "Class": "org.apache.commons.math3.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getField implements method in FieldElement; expected @Override",
        " Code": "    public FractionField getField() {",
        " Mark": "                         ^",
        " Line": 670
    },
    {
        " Proj": "Math-1",
        "Class": "org.apache.commons.math3.fraction.BigFraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in FieldElement; expected @Override",
        " Code": "    public BigFraction add(final BigFraction fraction) {",
        " Mark": "                       ^",
        " Line": 512
    },
    {
        " Proj": "Math-1",
        "Class": "org.apache.commons.math3.fraction.BigFraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compareTo implements method in Comparable; expected @Override",
        " Code": "    public int compareTo(final BigFraction object) {",
        " Mark": "               ^",
        " Line": 599
    },
    {
        " Proj": "Math-1",
        "Class": "org.apache.commons.math3.fraction.BigFraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "divide implements method in FieldElement; expected @Override",
        " Code": "    public BigFraction divide(final BigFraction fraction) {",
        " Mark": "                       ^",
        " Line": 665
    },
    {
        " Proj": "Math-1",
        "Class": "org.apache.commons.math3.fraction.BigFraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "multiply implements method in FieldElement; expected @Override",
        " Code": "    public BigFraction multiply(final int i) {",
        " Mark": "                       ^",
        " Line": 886
    },
    {
        " Proj": "Math-1",
        "Class": "org.apache.commons.math3.fraction.BigFraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "multiply implements method in FieldElement; expected @Override",
        " Code": "    public BigFraction multiply(final BigFraction fraction) {",
        " Mark": "                       ^",
        " Line": 914
    },
    {
        " Proj": "Math-1",
        "Class": "org.apache.commons.math3.fraction.BigFraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "negate implements method in FieldElement; expected @Override",
        " Code": "    public BigFraction negate() {",
        " Mark": "                       ^",
        " Line": 934
    },
    {
        " Proj": "Math-1",
        "Class": "org.apache.commons.math3.fraction.BigFraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "reciprocal implements method in FieldElement; expected @Override",
        " Code": "    public BigFraction reciprocal() {",
        " Mark": "                       ^",
        " Line": 1029
    },
    {
        " Proj": "Math-1",
        "Class": "org.apache.commons.math3.fraction.BigFraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "subtract implements method in FieldElement; expected @Override",
        " Code": "    public BigFraction subtract(final BigFraction fraction) {",
        " Mark": "                       ^",
        " Line": 1099
    },
    {
        " Proj": "Math-1",
        "Class": "org.apache.commons.math3.fraction.BigFraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getField implements method in FieldElement; expected @Override",
        " Code": "    public BigFractionField getField() {",
        " Mark": "                            ^",
        " Line": 1143
    },
    {
        " Proj": "Math-10",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Math-100",
        "Class": "org.apache.commons.math.estimation.AbstractEstimator",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                                          new Object[] { new Integer(maxCostEval) });",
        " Mark": "                                                         ^",
        " Line": 101
    },
    {
        " Proj": "Math-100",
        "Class": "org.apache.commons.math.estimation.AbstractEstimator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRMS implements method in Estimator; expected @Override",
        " Code": "    public double getRMS(EstimationProblem problem) {",
        " Mark": "                  ^",
        " Line": 126
    },
    {
        " Proj": "Math-100",
        "Class": "org.apache.commons.math.estimation.AbstractEstimator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getCovariances implements method in Estimator; expected @Override",
        " Code": "    public double[][] getCovariances(EstimationProblem problem)",
        " Mark": "                      ^",
        " Line": 158
    },
    {
        " Proj": "Math-100",
        "Class": "org.apache.commons.math.estimation.AbstractEstimator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "guessParametersErrors implements method in Estimator; expected @Override",
        " Code": "    public double[] guessParametersErrors(EstimationProblem problem)",
        " Mark": "                    ^",
        " Line": 199
    },
    {
        " Proj": "Math-100",
        "Class": "org.apache.commons.math.estimation.AbstractEstimator",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                                          new Object[] { new Integer(m), new Integer(p)});",
        " Mark": "                                                         ^",
        " Line": 205
    },
    {
        " Proj": "Math-100",
        "Class": "org.apache.commons.math.estimation.AbstractEstimator",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                                          new Object[] { new Integer(m), new Integer(p)});",
        " Mark": "                                                                         ^",
        " Line": 205
    },
    {
        " Proj": "Math-100",
        "Class": "org.apache.commons.math.estimation.AbstractEstimator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimate implements method in Estimator; expected @Override",
        " Code": "    public abstract void estimate(EstimationProblem problem)",
        " Mark": "                         ^",
        " Line": 257
    },
    {
        " Proj": "Math-101",
        "Class": "org.apache.commons.math.complex.ComplexFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "format implements method in Format; expected @Override",
        " Code": "    public StringBuffer format(Object obj, StringBuffer toAppendTo,",
        " Mark": "                        ^",
        " Line": 174
    },
    {
        " Proj": "Math-101",
        "Class": "org.apache.commons.math.complex.ComplexFormat",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                ret = new Double(value);",
        " Mark": "                      ^",
        " Line": 453
    },
    {
        " Proj": "Math-101",
        "Class": "org.apache.commons.math.complex.ComplexFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "parseObject implements method in Format; expected @Override",
        " Code": "    public Object parseObject(String source, ParsePosition pos) {",
        " Mark": "                  ^",
        " Line": 499
    },
    {
        " Proj": "Math-102",
        "Class": "org.apache.commons.math.stat.inference.ChiSquareTestImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "chiSquare implements method in ChiSquareTest; expected @Override",
        " Code": "    public double chiSquare(double[] expected, long[] observed)",
        " Mark": "                  ^",
        " Line": 64
    },
    {
        " Proj": "Math-102",
        "Class": "org.apache.commons.math.stat.inference.ChiSquareTestImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "chiSquareTest implements method in ChiSquareTest; expected @Override",
        " Code": "    public double chiSquareTest(double[] expected, long[] observed)",
        " Mark": "                  ^",
        " Line": 112
    },
    {
        " Proj": "Math-102",
        "Class": "org.apache.commons.math.stat.inference.ChiSquareTestImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "chiSquareTest implements method in ChiSquareTest; expected @Override",
        " Code": "    public boolean chiSquareTest(double[] expected, long[] observed, ",
        " Mark": "                   ^",
        " Line": 133
    },
    {
        " Proj": "Math-102",
        "Class": "org.apache.commons.math.stat.inference.ChiSquareTestImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "chiSquare implements method in ChiSquareTest; expected @Override",
        " Code": "    public double chiSquare(long[][] counts) throws IllegalArgumentException {",
        " Mark": "                  ^",
        " Line": 147
    },
    {
        " Proj": "Math-102",
        "Class": "org.apache.commons.math.stat.inference.ChiSquareTestImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "chiSquareTest implements method in ChiSquareTest; expected @Override",
        " Code": "    public double chiSquareTest(long[][] counts)",
        " Mark": "                  ^",
        " Line": 184
    },
    {
        " Proj": "Math-102",
        "Class": "org.apache.commons.math.stat.inference.ChiSquareTestImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "chiSquareTest implements method in ChiSquareTest; expected @Override",
        " Code": "    public boolean chiSquareTest(long[][] counts, double alpha)",
        " Mark": "                   ^",
        " Line": 200
    },
    {
        " Proj": "Math-102",
        "Class": "org.apache.commons.math.stat.inference.ChiSquareTestImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "chiSquareDataSetsComparison implements method in UnknownDistributionChiSquareTest; expected @Override",
        " Code": "    public double chiSquareDataSetsComparison(long[] observed1, long[] observed2)",
        " Mark": "                  ^",
        " Line": 214
    },
    {
        " Proj": "Math-102",
        "Class": "org.apache.commons.math.stat.inference.ChiSquareTestImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "chiSquareTestDataSetsComparison implements method in UnknownDistributionChiSquareTest; expected @Override",
        " Code": "    public double chiSquareTestDataSetsComparison(long[] observed1, long[] observed2)",
        " Mark": "                  ^",
        " Line": 276
    },
    {
        " Proj": "Math-102",
        "Class": "org.apache.commons.math.stat.inference.ChiSquareTestImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "chiSquareTestDataSetsComparison implements method in UnknownDistributionChiSquareTest; expected @Override",
        " Code": "    public boolean chiSquareTestDataSetsComparison(long[] observed1, long[] observed2,",
        " Mark": "                   ^",
        " Line": 292
    },
    {
        " Proj": "Math-103",
        "Class": "org.apache.commons.math.distribution.NormalDistributionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMean implements method in NormalDistribution; expected @Override",
        " Code": "    public double getMean() {",
        " Mark": "                  ^",
        " Line": 67
    },
    {
        " Proj": "Math-103",
        "Class": "org.apache.commons.math.distribution.NormalDistributionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setMean implements method in NormalDistribution; expected @Override",
        " Code": "    public void setMean(double mean) {",
        " Mark": "                ^",
        " Line": 75
    },
    {
        " Proj": "Math-103",
        "Class": "org.apache.commons.math.distribution.NormalDistributionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getStandardDeviation implements method in NormalDistribution; expected @Override",
        " Code": "    public double getStandardDeviation() {",
        " Mark": "                  ^",
        " Line": 83
    },
    {
        " Proj": "Math-103",
        "Class": "org.apache.commons.math.distribution.NormalDistributionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setStandardDeviation implements method in NormalDistribution; expected @Override",
        " Code": "    public void setStandardDeviation(double sd) {",
        " Mark": "                ^",
        " Line": 92
    },
    {
        " Proj": "Math-103",
        "Class": "org.apache.commons.math.distribution.NormalDistributionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "cumulativeProbability implements method in Distribution; expected @Override",
        " Code": "    public double cumulativeProbability(double x) throws MathException {",
        " Mark": "                  ^",
        " Line": 108
    },
    {
        " Proj": "Math-103",
        "Class": "org.apache.commons.math.distribution.NormalDistributionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "inverseCumulativeProbability overrides method in AbstractContinuousDistribution; expected @Override",
        " Code": "    public double inverseCumulativeProbability(final double p) ",
        " Mark": "                  ^",
        " Line": 137
    },
    {
        " Proj": "Math-103",
        "Class": "org.apache.commons.math.distribution.NormalDistributionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDomainLowerBound implements method in AbstractContinuousDistribution; expected @Override",
        " Code": "    protected double getDomainLowerBound(double p) {",
        " Mark": "                     ^",
        " Line": 157
    },
    {
        " Proj": "Math-103",
        "Class": "org.apache.commons.math.distribution.NormalDistributionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDomainUpperBound implements method in AbstractContinuousDistribution; expected @Override",
        " Code": "    protected double getDomainUpperBound(double p) {",
        " Mark": "                     ^",
        " Line": 178
    },
    {
        " Proj": "Math-103",
        "Class": "org.apache.commons.math.distribution.NormalDistributionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getInitialDomain implements method in AbstractContinuousDistribution; expected @Override",
        " Code": "    protected double getInitialDomain(double p) {",
        " Mark": "                     ^",
        " Line": 198
    },
    {
        " Proj": "Math-104",
        "Class": "org.apache.commons.math.special.Gamma",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "        0.99999999999999709182,",
        " Mark": "        ^",
        " Line": 42
    },
    {
        " Proj": "Math-104",
        "Class": "org.apache.commons.math.special.Gamma",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "        57.156235665862923517,",
        " Mark": "        ^",
        " Line": 43
    },
    {
        " Proj": "Math-104",
        "Class": "org.apache.commons.math.special.Gamma",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "        -59.597960355475491248,",
        " Mark": "         ^",
        " Line": 44
    },
    {
        " Proj": "Math-104",
        "Class": "org.apache.commons.math.special.Gamma",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "        14.136097974741747174,",
        " Mark": "        ^",
        " Line": 45
    },
    {
        " Proj": "Math-104",
        "Class": "org.apache.commons.math.special.Gamma",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "        -0.49191381609762019978,",
        " Mark": "         ^",
        " Line": 46
    },
    {
        " Proj": "Math-104",
        "Class": "org.apache.commons.math.special.Gamma",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "        .33994649984811888699e-4,",
        " Mark": "        ^",
        " Line": 47
    },
    {
        " Proj": "Math-104",
        "Class": "org.apache.commons.math.special.Gamma",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "        .46523628927048575665e-4,",
        " Mark": "        ^",
        " Line": 48
    },
    {
        " Proj": "Math-104",
        "Class": "org.apache.commons.math.special.Gamma",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "        -.98374475304879564677e-4,",
        " Mark": "         ^",
        " Line": 49
    },
    {
        " Proj": "Math-104",
        "Class": "org.apache.commons.math.special.Gamma",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "        .15808870322491248884e-3,",
        " Mark": "        ^",
        " Line": 50
    },
    {
        " Proj": "Math-104",
        "Class": "org.apache.commons.math.special.Gamma",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "        -.21026444172410488319e-3,",
        " Mark": "         ^",
        " Line": 51
    },
    {
        " Proj": "Math-104",
        "Class": "org.apache.commons.math.special.Gamma",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "        .21743961811521264320e-3,",
        " Mark": "        ^",
        " Line": 52
    },
    {
        " Proj": "Math-104",
        "Class": "org.apache.commons.math.special.Gamma",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "        -.16431810653676389022e-3,",
        " Mark": "         ^",
        " Line": 53
    },
    {
        " Proj": "Math-104",
        "Class": "org.apache.commons.math.special.Gamma",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "        .84418223983852743293e-4,",
        " Mark": "        ^",
        " Line": 54
    },
    {
        " Proj": "Math-104",
        "Class": "org.apache.commons.math.special.Gamma",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "        -.26190838401581408670e-4,",
        " Mark": "         ^",
        " Line": 55
    },
    {
        " Proj": "Math-104",
        "Class": "org.apache.commons.math.special.Gamma",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "        .36899182659531622704e-5,",
        " Mark": "        ^",
        " Line": 56
    },
    {
        " Proj": "Math-104",
        "Class": "org.apache.commons.math.special.Gamma",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getA implements method in ContinuedFraction; expected @Override",
        " Code": "                protected double getA(int n, double x) {",
        " Mark": "                                 ^",
        " Line": 247
    },
    {
        " Proj": "Math-104",
        "Class": "org.apache.commons.math.special.Gamma",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getB implements method in ContinuedFraction; expected @Override",
        " Code": "                protected double getB(int n, double x) {",
        " Mark": "                                 ^",
        " Line": 251
    },
    {
        " Proj": "Math-105",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Math-106",
        "Class": "org.apache.commons.math.fraction.ProperFractionFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "format overrides method in FractionFormat; expected @Override",
        " Code": "    public StringBuffer format(Fraction fraction, StringBuffer toAppendTo,",
        " Mark": "                        ^",
        " Line": 86
    },
    {
        " Proj": "Math-106",
        "Class": "org.apache.commons.math.fraction.ProperFractionFormat",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "parse overrides method in FractionFormat; expected @Override",
        " Code": "    public Fraction parse(String source, ParsePosition pos) {",
        " Mark": "                    ^",
        " Line": 130
    },
    {
        " Proj": "Math-11",
        "Class": "org.apache.commons.math3.distribution.MultivariateNormalDistribution",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "density implements method in MultivariateRealDistribution; expected @Override",
        " Code": "    public double density(final double[] vals) throws DimensionMismatchException {",
        " Mark": "                  ^",
        " Line": 177
    },
    {
        " Proj": "Math-11",
        "Class": "org.apache.commons.math3.distribution.MultivariateNormalDistribution",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "sample implements method in AbstractMultivariateRealDistribution; expected @Override",
        " Code": "    public double[] sample() {",
        " Mark": "                    ^",
        " Line": 205
    },
    {
        " Proj": "Math-12",
        "Class": "org.apache.commons.math3.random.BitsStreamGenerator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setSeed implements method in RandomGenerator; expected @Override",
        " Code": "    public abstract void setSeed(int seed);",
        " Mark": "                         ^",
        " Line": 45
    },
    {
        " Proj": "Math-12",
        "Class": "org.apache.commons.math3.random.BitsStreamGenerator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setSeed implements method in RandomGenerator; expected @Override",
        " Code": "    public abstract void setSeed(int[] seed);",
        " Mark": "                         ^",
        " Line": 48
    },
    {
        " Proj": "Math-12",
        "Class": "org.apache.commons.math3.random.BitsStreamGenerator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setSeed implements method in RandomGenerator; expected @Override",
        " Code": "    public abstract void setSeed(long seed);",
        " Mark": "                         ^",
        " Line": 51
    },
    {
        " Proj": "Math-12",
        "Class": "org.apache.commons.math3.random.BitsStreamGenerator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "nextBoolean implements method in RandomGenerator; expected @Override",
        " Code": "    public boolean nextBoolean() {",
        " Mark": "                   ^",
        " Line": 65
    },
    {
        " Proj": "Math-12",
        "Class": "org.apache.commons.math3.random.BitsStreamGenerator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "nextBytes implements method in RandomGenerator; expected @Override",
        " Code": "    public void nextBytes(byte[] bytes) {",
        " Mark": "                ^",
        " Line": 70
    },
    {
        " Proj": "Math-12",
        "Class": "org.apache.commons.math3.random.BitsStreamGenerator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "nextDouble implements method in RandomGenerator; expected @Override",
        " Code": "    public double nextDouble() {",
        " Mark": "                  ^",
        " Line": 89
    },
    {
        " Proj": "Math-12",
        "Class": "org.apache.commons.math3.random.BitsStreamGenerator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "nextFloat implements method in RandomGenerator; expected @Override",
        " Code": "    public float nextFloat() {",
        " Mark": "                 ^",
        " Line": 96
    },
    {
        " Proj": "Math-12",
        "Class": "org.apache.commons.math3.random.BitsStreamGenerator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "nextGaussian implements method in RandomGenerator; expected @Override",
        " Code": "    public double nextGaussian() {",
        " Mark": "                  ^",
        " Line": 101
    },
    {
        " Proj": "Math-12",
        "Class": "org.apache.commons.math3.random.BitsStreamGenerator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "nextInt implements method in RandomGenerator; expected @Override",
        " Code": "    public int nextInt() {",
        " Mark": "               ^",
        " Line": 123
    },
    {
        " Proj": "Math-12",
        "Class": "org.apache.commons.math3.random.BitsStreamGenerator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "nextInt implements method in RandomGenerator; expected @Override",
        " Code": "    public int nextInt(int n) throws IllegalArgumentException {",
        " Mark": "               ^",
        " Line": 142
    },
    {
        " Proj": "Math-12",
        "Class": "org.apache.commons.math3.random.BitsStreamGenerator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "nextLong implements method in RandomGenerator; expected @Override",
        " Code": "    public long nextLong() {",
        " Mark": "                ^",
        " Line": 159
    },
    {
        " Proj": "Math-14",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Math-15",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "    public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;",
        " Mark": "                                                               ^",
        " Line": 85
    },
    {
        " Proj": "Math-15",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "    public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;",
        " Mark": "                                                           ^",
        " Line": 88
    },
    {
        " Proj": "Math-15",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "    private static final double LN_2_A = 0.693147063255310059;",
        " Mark": "                                         ^",
        " Line": 109
    },
    {
        " Proj": "Math-15",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "    private static final double LN_2_B = 1.17304635250823482e-7;",
        " Mark": "                                         ^",
        " Line": 112
    },
    {
        " Proj": "Math-15",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "      if (x != x) {",
        " Mark": "            ^",
        " Line": 387
    },
    {
        " Proj": "Math-15",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "      if (x != x) {",
        " Mark": "            ^",
        " Line": 457
    },
    {
        " Proj": "Math-15",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "      if (x != x) {",
        " Mark": "            ^",
        " Line": 583
    },
    {
        " Proj": "Math-15",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",
        " Mark": "                                                                          ^",
        " Line": 873
    },
    {
        " Proj": "Math-15",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "                    hiPrec[0] /= 4.455505956692756620;",
        " Mark": "                                 ^",
        " Line": 875
    },
    {
        " Proj": "Math-15",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "                    hiPrec[1] /= 4.455505956692756620;",
        " Mark": "                                 ^",
        " Line": 876
    },
    {
        " Proj": "Math-15",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "        if (x != x || x == 0.0) { // NaN or zero",
        " Mark": "              ^",
        " Line": 972
    },
    {
        " Proj": "Math-15",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "        if ((bits & 0x8000000000000000L) != 0 || x != x) {",
        " Mark": "                                                   ^",
        " Line": 1136
    },
    {
        " Proj": "Math-15",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "        if (x != x) { // X is NaN",
        " Mark": "              ^",
        " Line": 1449
    },
    {
        " Proj": "Math-15",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(y)`.",
        " Code": "            if (y != y) { // y is NaN",
        " Mark": "                  ^",
        " Line": 1480
    },
    {
        " Proj": "Math-15",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(y)`.",
        " Code": "            if (y != y) { // y is NaN",
        " Mark": "                  ^",
        " Line": 1503
    },
    {
        " Proj": "Math-15",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "            double tmp1 = y * 9.31322574615478515625E-10;",
        " Mark": "                              ^",
        " Line": 1562
    },
    {
        " Proj": "Math-15",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "            double tmp2 = tmp1 * 9.31322574615478515625E-10;",
        " Mark": "                                 ^",
        " Line": 1563
    },
    {
        " Proj": "Math-15",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(xa)`.",
        " Code": "        if (xa != xa || xa == Double.POSITIVE_INFINITY) {",
        " Mark": "               ^",
        " Line": 2246
    },
    {
        " Proj": "Math-15",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(xa)`.",
        " Code": "        if (xa != xa || xa == Double.POSITIVE_INFINITY) {",
        " Mark": "               ^",
        " Line": 2300
    },
    {
        " Proj": "Math-15",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(xa)`.",
        " Code": "        if (xa != xa || xa == Double.POSITIVE_INFINITY) {",
        " Mark": "               ^",
        " Line": 2365
    },
    {
        " Proj": "Math-15",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);",
        " Mark": "                            ^",
        " Line": 2452
    },
    {
        " Proj": "Math-15",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);",
        " Mark": "                             ^",
        " Line": 2455
    },
    {
        " Proj": "Math-15",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "        if (x != x || y != y) {",
        " Mark": "              ^",
        " Line": 2579
    },
    {
        " Proj": "Math-15",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(y)`.",
        " Code": "        if (x != x || y != y) {",
        " Mark": "                        ^",
        " Line": 2579
    },
    {
        " Proj": "Math-15",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "      if (x != x) {",
        " Mark": "            ^",
        " Line": 2700
    },
    {
        " Proj": "Math-15",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "      if (x != x) {",
        " Mark": "            ^",
        " Line": 2776
    },
    {
        " Proj": "Math-15",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "        if (x != x) { // NaN",
        " Mark": "              ^",
        " Line": 3330
    },
    {
        " Proj": "Math-15",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "        if (x != x) { // NaN",
        " Mark": "              ^",
        " Line": 3357
    },
    {
        " Proj": "Math-16",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "    public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;",
        " Mark": "                                                               ^",
        " Line": 85
    },
    {
        " Proj": "Math-16",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "    public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;",
        " Mark": "                                                           ^",
        " Line": 88
    },
    {
        " Proj": "Math-16",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "    private static final double LN_2_A = 0.693147063255310059;",
        " Mark": "                                         ^",
        " Line": 109
    },
    {
        " Proj": "Math-16",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "    private static final double LN_2_B = 1.17304635250823482e-7;",
        " Mark": "                                         ^",
        " Line": 112
    },
    {
        " Proj": "Math-16",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "      if (x != x) {",
        " Mark": "            ^",
        " Line": 385
    },
    {
        " Proj": "Math-16",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "      if (x != x) {",
        " Mark": "            ^",
        " Line": 455
    },
    {
        " Proj": "Math-16",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "      if (x != x) {",
        " Mark": "            ^",
        " Line": 581
    },
    {
        " Proj": "Math-16",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",
        " Mark": "                                                                          ^",
        " Line": 871
    },
    {
        " Proj": "Math-16",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "                    hiPrec[0] /= 4.455505956692756620;",
        " Mark": "                                 ^",
        " Line": 873
    },
    {
        " Proj": "Math-16",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "                    hiPrec[1] /= 4.455505956692756620;",
        " Mark": "                                 ^",
        " Line": 874
    },
    {
        " Proj": "Math-16",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "        if (x != x || x == 0.0) { // NaN or zero",
        " Mark": "              ^",
        " Line": 970
    },
    {
        " Proj": "Math-16",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "        if ((bits & 0x8000000000000000L) != 0 || x != x) {",
        " Mark": "                                                   ^",
        " Line": 1134
    },
    {
        " Proj": "Math-16",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "        if (x != x) { // X is NaN",
        " Mark": "              ^",
        " Line": 1447
    },
    {
        " Proj": "Math-16",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(y)`.",
        " Code": "            if (y != y) { // y is NaN",
        " Mark": "                  ^",
        " Line": 1478
    },
    {
        " Proj": "Math-16",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(y)`.",
        " Code": "            if (y != y) { // y is NaN",
        " Mark": "                  ^",
        " Line": 1501
    },
    {
        " Proj": "Math-16",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "            double tmp1 = y * 9.31322574615478515625E-10;",
        " Mark": "                              ^",
        " Line": 1560
    },
    {
        " Proj": "Math-16",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "            double tmp2 = tmp1 * 9.31322574615478515625E-10;",
        " Mark": "                                 ^",
        " Line": 1561
    },
    {
        " Proj": "Math-16",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(xa)`.",
        " Code": "        if (xa != xa || xa == Double.POSITIVE_INFINITY) {",
        " Mark": "               ^",
        " Line": 2244
    },
    {
        " Proj": "Math-16",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(xa)`.",
        " Code": "        if (xa != xa || xa == Double.POSITIVE_INFINITY) {",
        " Mark": "               ^",
        " Line": 2298
    },
    {
        " Proj": "Math-16",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(xa)`.",
        " Code": "        if (xa != xa || xa == Double.POSITIVE_INFINITY) {",
        " Mark": "               ^",
        " Line": 2363
    },
    {
        " Proj": "Math-16",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);",
        " Mark": "                            ^",
        " Line": 2450
    },
    {
        " Proj": "Math-16",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);",
        " Mark": "                             ^",
        " Line": 2453
    },
    {
        " Proj": "Math-16",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "        if (x != x || y != y) {",
        " Mark": "              ^",
        " Line": 2577
    },
    {
        " Proj": "Math-16",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(y)`.",
        " Code": "        if (x != x || y != y) {",
        " Mark": "                        ^",
        " Line": 2577
    },
    {
        " Proj": "Math-16",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "      if (x != x) {",
        " Mark": "            ^",
        " Line": 2698
    },
    {
        " Proj": "Math-16",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "      if (x != x) {",
        " Mark": "            ^",
        " Line": 2774
    },
    {
        " Proj": "Math-16",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "        if (x != x) { // NaN",
        " Mark": "              ^",
        " Line": 3328
    },
    {
        " Proj": "Math-16",
        "Class": "org.apache.commons.math3.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "        if (x != x) { // NaN",
        " Mark": "              ^",
        " Line": 3355
    },
    {
        " Proj": "Math-17",
        "Class": "org.apache.commons.math3.dfp.Dfp",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "            if (x != x) {",
        " Mark": "                  ^",
        " Line": 291
    },
    {
        " Proj": "Math-17",
        "Class": "org.apache.commons.math3.dfp.Dfp",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getField implements method in FieldElement; expected @Override",
        " Code": "    public DfpField getField() {",
        " Mark": "                    ^",
        " Line": 634
    },
    {
        " Proj": "Math-17",
        "Class": "org.apache.commons.math3.dfp.Dfp",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in FieldElement; expected @Override",
        " Code": "    public Dfp add(final Dfp x) {",
        " Mark": "               ^",
        " Line": 1251
    },
    {
        " Proj": "Math-17",
        "Class": "org.apache.commons.math3.dfp.Dfp",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "negate implements method in FieldElement; expected @Override",
        " Code": "    public Dfp negate() {",
        " Mark": "               ^",
        " Line": 1399
    },
    {
        " Proj": "Math-17",
        "Class": "org.apache.commons.math3.dfp.Dfp",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "subtract implements method in FieldElement; expected @Override",
        " Code": "    public Dfp subtract(final Dfp x) {",
        " Mark": "               ^",
        " Line": 1409
    },
    {
        " Proj": "Math-17",
        "Class": "org.apache.commons.math3.dfp.Dfp",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "multiply implements method in FieldElement; expected @Override",
        " Code": "    public Dfp multiply(final Dfp x) {",
        " Mark": "               ^",
        " Line": 1496
    },
    {
        " Proj": "Math-17",
        "Class": "org.apache.commons.math3.dfp.Dfp",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "multiply implements method in FieldElement; expected @Override",
        " Code": "    public Dfp multiply(final int x) {",
        " Mark": "               ^",
        " Line": 1602
    },
    {
        " Proj": "Math-17",
        "Class": "org.apache.commons.math3.dfp.Dfp",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "divide implements method in FieldElement; expected @Override",
        " Code": "    public Dfp divide(Dfp divisor) {",
        " Mark": "               ^",
        " Line": 1677
    },
    {
        " Proj": "Math-17",
        "Class": "org.apache.commons.math3.dfp.Dfp",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "reciprocal implements method in FieldElement; expected @Override",
        " Code": "    public Dfp reciprocal() {",
        " Mark": "               ^",
        " Line": 1953
    },
    {
        " Proj": "Math-18",
        "Class": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compareTo implements method in Comparable; expected @Override",
        " Code": "        public int compareTo(DoubleIndex o) {",
        " Mark": "                   ^",
        " Line": 871
    },
    {
        " Proj": "Math-19",
        "Class": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compareTo implements method in Comparable; expected @Override",
        " Code": "        public int compareTo(DoubleIndex o) {",
        " Mark": "                   ^",
        " Line": 871
    },
    {
        " Proj": "Math-2",
        "Class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "cumulativeProbability implements method in IntegerDistribution; expected @Override",
        " Code": "    public double cumulativeProbability(int x) {",
        " Mark": "                  ^",
        " Line": 114
    },
    {
        " Proj": "Math-2",
        "Class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "probability implements method in IntegerDistribution; expected @Override",
        " Code": "    public double probability(int x) {",
        " Mark": "                  ^",
        " Line": 195
    },
    {
        " Proj": "Math-2",
        "Class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getNumericalMean implements method in IntegerDistribution; expected @Override",
        " Code": "    public double getNumericalMean() {",
        " Mark": "                  ^",
        " Line": 267
    },
    {
        " Proj": "Math-2",
        "Class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getNumericalVariance implements method in IntegerDistribution; expected @Override",
        " Code": "    public double getNumericalVariance() {",
        " Mark": "                  ^",
        " Line": 278
    },
    {
        " Proj": "Math-2",
        "Class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getSupportLowerBound implements method in IntegerDistribution; expected @Override",
        " Code": "    public int getSupportLowerBound() {",
        " Mark": "               ^",
        " Line": 307
    },
    {
        " Proj": "Math-2",
        "Class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getSupportUpperBound implements method in IntegerDistribution; expected @Override",
        " Code": "    public int getSupportUpperBound() {",
        " Mark": "               ^",
        " Line": 320
    },
    {
        " Proj": "Math-2",
        "Class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isSupportConnected implements method in IntegerDistribution; expected @Override",
        " Code": "    public boolean isSupportConnected() {",
        " Mark": "                   ^",
        " Line": 331
    },
    {
        " Proj": "Math-20",
        "Class": "org.apache.commons.math3.optimization.direct.CMAESOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compareTo implements method in Comparable; expected @Override",
        " Code": "        public int compareTo(DoubleIndex o) {",
        " Mark": "                   ^",
        " Line": 850
    },
    {
        " Proj": "Math-21",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Math-22",
        "Class": "org.apache.commons.math3.distribution.FDistribution",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "density implements method in RealDistribution; expected @Override",
        " Code": "    public double density(double x) {",
        " Mark": "                  ^",
        " Line": 128
    },
    {
        " Proj": "Math-22",
        "Class": "org.apache.commons.math3.distribution.FDistribution",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "cumulativeProbability implements method in RealDistribution; expected @Override",
        " Code": "    public double cumulativeProbability(double x)  {",
        " Mark": "                  ^",
        " Line": 152
    },
    {
        " Proj": "Math-22",
        "Class": "org.apache.commons.math3.distribution.FDistribution",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getNumericalMean implements method in RealDistribution; expected @Override",
        " Code": "    public double getNumericalMean() {",
        " Mark": "                  ^",
        " Line": 200
    },
    {
        " Proj": "Math-22",
        "Class": "org.apache.commons.math3.distribution.FDistribution",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getNumericalVariance implements method in RealDistribution; expected @Override",
        " Code": "    public double getNumericalVariance() {",
        " Mark": "                  ^",
        " Line": 223
    },
    {
        " Proj": "Math-22",
        "Class": "org.apache.commons.math3.distribution.FDistribution",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getSupportLowerBound implements method in RealDistribution; expected @Override",
        " Code": "    public double getSupportLowerBound() {",
        " Mark": "                  ^",
        " Line": 257
    },
    {
        " Proj": "Math-22",
        "Class": "org.apache.commons.math3.distribution.FDistribution",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getSupportUpperBound implements method in RealDistribution; expected @Override",
        " Code": "    public double getSupportUpperBound() {",
        " Mark": "                  ^",
        " Line": 269
    },
    {
        " Proj": "Math-22",
        "Class": "org.apache.commons.math3.distribution.FDistribution",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isSupportLowerBoundInclusive implements method in RealDistribution; expected @Override",
        " Code": "    public boolean isSupportLowerBoundInclusive() {",
        " Mark": "                   ^",
        " Line": 274
    },
    {
        " Proj": "Math-22",
        "Class": "org.apache.commons.math3.distribution.FDistribution",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isSupportUpperBoundInclusive implements method in RealDistribution; expected @Override",
        " Code": "    public boolean isSupportUpperBoundInclusive() {",
        " Mark": "                   ^",
        " Line": 279
    },
    {
        " Proj": "Math-22",
        "Class": "org.apache.commons.math3.distribution.FDistribution",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isSupportConnected implements method in RealDistribution; expected @Override",
        " Code": "    public boolean isSupportConnected() {",
        " Mark": "                   ^",
        " Line": 290
    },
    {
        " Proj": "Math-22",
        "Class": "org.apache.commons.math3.distribution.UniformRealDistribution",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "density implements method in RealDistribution; expected @Override",
        " Code": "    public double density(double x) {",
        " Mark": "                  ^",
        " Line": 108
    },
    {
        " Proj": "Math-22",
        "Class": "org.apache.commons.math3.distribution.UniformRealDistribution",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "cumulativeProbability implements method in RealDistribution; expected @Override",
        " Code": "    public double cumulativeProbability(double x)  {",
        " Mark": "                  ^",
        " Line": 116
    },
    {
        " Proj": "Math-22",
        "Class": "org.apache.commons.math3.distribution.UniformRealDistribution",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getNumericalMean implements method in RealDistribution; expected @Override",
        " Code": "    public double getNumericalMean() {",
        " Mark": "                  ^",
        " Line": 138
    },
    {
        " Proj": "Math-22",
        "Class": "org.apache.commons.math3.distribution.UniformRealDistribution",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getNumericalVariance implements method in RealDistribution; expected @Override",
        " Code": "    public double getNumericalVariance() {",
        " Mark": "                  ^",
        " Line": 148
    },
    {
        " Proj": "Math-22",
        "Class": "org.apache.commons.math3.distribution.UniformRealDistribution",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getSupportLowerBound implements method in RealDistribution; expected @Override",
        " Code": "    public double getSupportLowerBound() {",
        " Mark": "                  ^",
        " Line": 161
    },
    {
        " Proj": "Math-22",
        "Class": "org.apache.commons.math3.distribution.UniformRealDistribution",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getSupportUpperBound implements method in RealDistribution; expected @Override",
        " Code": "    public double getSupportUpperBound() {",
        " Mark": "                  ^",
        " Line": 173
    },
    {
        " Proj": "Math-22",
        "Class": "org.apache.commons.math3.distribution.UniformRealDistribution",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isSupportLowerBoundInclusive implements method in RealDistribution; expected @Override",
        " Code": "    public boolean isSupportLowerBoundInclusive() {",
        " Mark": "                   ^",
        " Line": 178
    },
    {
        " Proj": "Math-22",
        "Class": "org.apache.commons.math3.distribution.UniformRealDistribution",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isSupportUpperBoundInclusive implements method in RealDistribution; expected @Override",
        " Code": "    public boolean isSupportUpperBoundInclusive() {",
        " Mark": "                   ^",
        " Line": 183
    },
    {
        " Proj": "Math-22",
        "Class": "org.apache.commons.math3.distribution.UniformRealDistribution",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isSupportConnected implements method in RealDistribution; expected @Override",
        " Code": "    public boolean isSupportConnected() {",
        " Mark": "                   ^",
        " Line": 194
    },
    {
        " Proj": "Math-23",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Math-24",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Math-25",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Math-26",
        "Class": "org.apache.commons.math3.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compareTo implements method in Comparable; expected @Override",
        " Code": "    public int compareTo(Fraction object) {",
        " Mark": "               ^",
        " Line": 306
    },
    {
        " Proj": "Math-26",
        "Class": "org.apache.commons.math3.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "negate implements method in FieldElement; expected @Override",
        " Code": "    public Fraction negate() {",
        " Mark": "                    ^",
        " Line": 405
    },
    {
        " Proj": "Math-26",
        "Class": "org.apache.commons.math3.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "reciprocal implements method in FieldElement; expected @Override",
        " Code": "    public Fraction reciprocal() {",
        " Mark": "                    ^",
        " Line": 416
    },
    {
        " Proj": "Math-26",
        "Class": "org.apache.commons.math3.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in FieldElement; expected @Override",
        " Code": "    public Fraction add(Fraction fraction) {",
        " Mark": "                    ^",
        " Line": 430
    },
    {
        " Proj": "Math-26",
        "Class": "org.apache.commons.math3.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "subtract implements method in FieldElement; expected @Override",
        " Code": "    public Fraction subtract(Fraction fraction) {",
        " Mark": "                    ^",
        " Line": 453
    },
    {
        " Proj": "Math-26",
        "Class": "org.apache.commons.math3.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "multiply implements method in FieldElement; expected @Override",
        " Code": "    public Fraction multiply(Fraction fraction) {",
        " Mark": "                    ^",
        " Line": 533
    },
    {
        " Proj": "Math-26",
        "Class": "org.apache.commons.math3.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "multiply implements method in FieldElement; expected @Override",
        " Code": "    public Fraction multiply(final int i) {",
        " Mark": "                    ^",
        " Line": 554
    },
    {
        " Proj": "Math-26",
        "Class": "org.apache.commons.math3.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "divide implements method in FieldElement; expected @Override",
        " Code": "    public Fraction divide(Fraction fraction) {",
        " Mark": "                    ^",
        " Line": 568
    },
    {
        " Proj": "Math-26",
        "Class": "org.apache.commons.math3.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getField implements method in FieldElement; expected @Override",
        " Code": "    public FractionField getField() {",
        " Mark": "                         ^",
        " Line": 662
    },
    {
        " Proj": "Math-27",
        "Class": "org.apache.commons.math3.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compareTo implements method in Comparable; expected @Override",
        " Code": "    public int compareTo(Fraction object) {",
        " Mark": "               ^",
        " Line": 306
    },
    {
        " Proj": "Math-27",
        "Class": "org.apache.commons.math3.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "negate implements method in FieldElement; expected @Override",
        " Code": "    public Fraction negate() {",
        " Mark": "                    ^",
        " Line": 405
    },
    {
        " Proj": "Math-27",
        "Class": "org.apache.commons.math3.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "reciprocal implements method in FieldElement; expected @Override",
        " Code": "    public Fraction reciprocal() {",
        " Mark": "                    ^",
        " Line": 416
    },
    {
        " Proj": "Math-27",
        "Class": "org.apache.commons.math3.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in FieldElement; expected @Override",
        " Code": "    public Fraction add(Fraction fraction) {",
        " Mark": "                    ^",
        " Line": 430
    },
    {
        " Proj": "Math-27",
        "Class": "org.apache.commons.math3.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "subtract implements method in FieldElement; expected @Override",
        " Code": "    public Fraction subtract(Fraction fraction) {",
        " Mark": "                    ^",
        " Line": 453
    },
    {
        " Proj": "Math-27",
        "Class": "org.apache.commons.math3.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "multiply implements method in FieldElement; expected @Override",
        " Code": "    public Fraction multiply(Fraction fraction) {",
        " Mark": "                    ^",
        " Line": 533
    },
    {
        " Proj": "Math-27",
        "Class": "org.apache.commons.math3.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "multiply implements method in FieldElement; expected @Override",
        " Code": "    public Fraction multiply(final int i) {",
        " Mark": "                    ^",
        " Line": 554
    },
    {
        " Proj": "Math-27",
        "Class": "org.apache.commons.math3.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "divide implements method in FieldElement; expected @Override",
        " Code": "    public Fraction divide(Fraction fraction) {",
        " Mark": "                    ^",
        " Line": 568
    },
    {
        " Proj": "Math-27",
        "Class": "org.apache.commons.math3.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getField implements method in FieldElement; expected @Override",
        " Code": "    public FractionField getField() {",
        " Mark": "                         ^",
        " Line": 662
    },
    {
        " Proj": "Math-28",
        "Class": "org.apache.commons.math3.optimization.linear.SimplexSolver",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {",
        " Mark": "                                                                ^",
        " Line": 145
    },
    {
        " Proj": "Math-28",
        "Class": "org.apache.commons.math3.optimization.linear.SimplexSolver",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "                        if (row == tableau.getBasicRow(i)) {",
        " Mark": "                                ^",
        " Line": 146
    },
    {
        " Proj": "Math-29",
        "Class": "org.apache.commons.math3.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hasNext implements method in Iterator; expected @Override",
        " Code": "        public boolean hasNext() {",
        " Mark": "                       ^",
        " Line": 829
    },
    {
        " Proj": "Math-29",
        "Class": "org.apache.commons.math3.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "next implements method in Iterator; expected @Override",
        " Code": "        public Entry next() {",
        " Mark": "                     ^",
        " Line": 834
    },
    {
        " Proj": "Math-29",
        "Class": "org.apache.commons.math3.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "remove implements method in Iterator; expected @Override",
        " Code": "        public void remove() {",
        " Mark": "                    ^",
        " Line": 840
    },
    {
        " Proj": "Math-3",
        "Class": "org.apache.commons.math3.util.MathArrays",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compare implements method in Comparator; expected @Override",
        " Code": "            public int compare(Pair<Double, Integer> o1,",
        " Mark": "                       ^",
        " Line": 710
    },
    {
        " Proj": "Math-3",
        "Class": "org.apache.commons.math3.util.MathArrays",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compare implements method in Comparator; expected @Override",
        " Code": "            public int compare(Pair<Double, Integer> o1,",
        " Mark": "                       ^",
        " Line": 715
    },
    {
        " Proj": "Math-30",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Math-31",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Math-32",
        "Class": "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compareTo implements method in Comparable; expected @Override",
        " Code": "        public int compareTo(final ComparableSegment o) {",
        " Mark": "                   ^",
        " Line": 385
    },
    {
        " Proj": "Math-32",
        "Class": "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "visitOrder implements method in BSPTreeVisitor; expected @Override",
        " Code": "        public Order visitOrder(final BSPTree<Euclidean2D> node) {",
        " Mark": "                     ^",
        " Line": 422
    },
    {
        " Proj": "Math-32",
        "Class": "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "visitInternalNode implements method in BSPTreeVisitor; expected @Override",
        " Code": "        public void visitInternalNode(final BSPTree<Euclidean2D> node) {",
        " Mark": "                    ^",
        " Line": 427
    },
    {
        " Proj": "Math-32",
        "Class": "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "visitLeafNode implements method in BSPTreeVisitor; expected @Override",
        " Code": "        public void visitLeafNode(final BSPTree<Euclidean2D> node) {",
        " Mark": "                    ^",
        " Line": 439
    },
    {
        " Proj": "Math-33",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Math-34",
        "Class": "org.apache.commons.math3.genetics.ListPopulation",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "addChromosome implements method in Population; expected @Override",
        " Code": "    public void addChromosome(final Chromosome chromosome) {",
        " Mark": "                ^",
        " Line": 137
    },
    {
        " Proj": "Math-34",
        "Class": "org.apache.commons.math3.genetics.ListPopulation",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getFittestChromosome implements method in Population; expected @Override",
        " Code": "    public Chromosome getFittestChromosome() {",
        " Mark": "                      ^",
        " Line": 149
    },
    {
        " Proj": "Math-34",
        "Class": "org.apache.commons.math3.genetics.ListPopulation",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getPopulationLimit implements method in Population; expected @Override",
        " Code": "    public int getPopulationLimit() {",
        " Mark": "               ^",
        " Line": 165
    },
    {
        " Proj": "Math-34",
        "Class": "org.apache.commons.math3.genetics.ListPopulation",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getPopulationSize implements method in Population; expected @Override",
        " Code": "    public int getPopulationSize() {",
        " Mark": "               ^",
        " Line": 190
    },
    {
        " Proj": "Math-34",
        "Class": "org.apache.commons.math3.genetics.ListPopulation",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "iterator implements method in Iterable; expected @Override",
        " Code": "    public Iterator<Chromosome> iterator() {",
        " Mark": "                                ^",
        " Line": 208
    },
    {
        " Proj": "Math-35",
        "Class": "org.apache.commons.math3.genetics.ElitisticListPopulation",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "nextGeneration implements method in Population; expected @Override",
        " Code": "    public Population nextGeneration() {",
        " Mark": "                      ^",
        " Line": 74
    },
    {
        " Proj": "Math-36",
        "Class": "org.apache.commons.math.fraction.BigFraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in FieldElement; expected @Override",
        " Code": "    public BigFraction add(final BigFraction fraction) {",
        " Mark": "                       ^",
        " Line": 506
    },
    {
        " Proj": "Math-36",
        "Class": "org.apache.commons.math.fraction.BigFraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compareTo implements method in Comparable; expected @Override",
        " Code": "    public int compareTo(final BigFraction object) {",
        " Mark": "               ^",
        " Line": 593
    },
    {
        " Proj": "Math-36",
        "Class": "org.apache.commons.math.fraction.BigFraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "divide implements method in FieldElement; expected @Override",
        " Code": "    public BigFraction divide(final BigFraction fraction) {",
        " Mark": "                       ^",
        " Line": 663
    },
    {
        " Proj": "Math-36",
        "Class": "org.apache.commons.math.fraction.BigFraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "multiply implements method in FieldElement; expected @Override",
        " Code": "    public BigFraction multiply(final int i) {",
        " Mark": "                       ^",
        " Line": 884
    },
    {
        " Proj": "Math-36",
        "Class": "org.apache.commons.math.fraction.BigFraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "multiply implements method in FieldElement; expected @Override",
        " Code": "    public BigFraction multiply(final BigFraction fraction) {",
        " Mark": "                       ^",
        " Line": 912
    },
    {
        " Proj": "Math-36",
        "Class": "org.apache.commons.math.fraction.BigFraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "negate implements method in FieldElement; expected @Override",
        " Code": "    public BigFraction negate() {",
        " Mark": "                       ^",
        " Line": 932
    },
    {
        " Proj": "Math-36",
        "Class": "org.apache.commons.math.fraction.BigFraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "reciprocal implements method in FieldElement; expected @Override",
        " Code": "    public BigFraction reciprocal() {",
        " Mark": "                       ^",
        " Line": 1027
    },
    {
        " Proj": "Math-36",
        "Class": "org.apache.commons.math.fraction.BigFraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "subtract implements method in FieldElement; expected @Override",
        " Code": "    public BigFraction subtract(final BigFraction fraction) {",
        " Mark": "                       ^",
        " Line": 1097
    },
    {
        " Proj": "Math-36",
        "Class": "org.apache.commons.math.fraction.BigFraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getField implements method in FieldElement; expected @Override",
        " Code": "    public BigFractionField getField() {",
        " Mark": "                            ^",
        " Line": 1141
    },
    {
        " Proj": "Math-37",
        "Class": "org.apache.commons.math.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in FieldElement; expected @Override",
        " Code": "    public Complex add(Complex addend) throws NullArgumentException {",
        " Mark": "                   ^",
        " Line": 156
    },
    {
        " Proj": "Math-37",
        "Class": "org.apache.commons.math.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "divide implements method in FieldElement; expected @Override",
        " Code": "    public Complex divide(Complex divisor)",
        " Mark": "                   ^",
        " Line": 246
    },
    {
        " Proj": "Math-37",
        "Class": "org.apache.commons.math.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "reciprocal implements method in FieldElement; expected @Override",
        " Code": "    public Complex reciprocal() {",
        " Mark": "                   ^",
        " Line": 299
    },
    {
        " Proj": "Math-37",
        "Class": "org.apache.commons.math.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "multiply implements method in FieldElement; expected @Override",
        " Code": "    public Complex multiply(Complex factor)",
        " Mark": "                   ^",
        " Line": 436
    },
    {
        " Proj": "Math-37",
        "Class": "org.apache.commons.math.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "multiply implements method in FieldElement; expected @Override",
        " Code": "    public Complex multiply(final int factor) {",
        " Mark": "                   ^",
        " Line": 461
    },
    {
        " Proj": "Math-37",
        "Class": "org.apache.commons.math.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "negate implements method in FieldElement; expected @Override",
        " Code": "    public Complex negate() {",
        " Mark": "                   ^",
        " Line": 500
    },
    {
        " Proj": "Math-37",
        "Class": "org.apache.commons.math.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "subtract implements method in FieldElement; expected @Override",
        " Code": "    public Complex subtract(Complex subtrahend)",
        " Mark": "                   ^",
        " Line": 526
    },
    {
        " Proj": "Math-37",
        "Class": "org.apache.commons.math.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getField implements method in FieldElement; expected @Override",
        " Code": "    public ComplexField getField() {",
        " Mark": "                        ^",
        " Line": 1223
    },
    {
        " Proj": "Math-38",
        "Class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        " Type": "error",
        "  Cat": "FallThrough",
        "  Msg": "Execution may fall through from the previous case; add a `// fall through` comment before this line if it was deliberate",
        " Code": "        case 60: {",
        " Mark": "        ^",
        " Line": 480
    },
    {
        " Proj": "Math-38",
        "Class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        " Type": "error",
        "  Cat": "FallThrough",
        "  Msg": "Execution may fall through from the previous case; add a `// fall through` comment before this line if it was deliberate",
        " Code": "        case 90: {",
        " Mark": "        ^",
        " Line": 554
    },
    {
        " Proj": "Math-38",
        "Class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        " Type": "error",
        "  Cat": "FallThrough",
        "  Msg": "Execution may fall through from the previous case; add a `// fall through` comment before this line if it was deliberate",
        " Code": "        case 230: {",
        " Mark": "        ^",
        " Line": 685
    },
    {
        " Proj": "Math-38",
        "Class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        " Type": "error",
        "  Cat": "FallThrough",
        "  Msg": "Execution may fall through from the previous case; add a `// fall through` comment before this line if it was deliberate",
        " Code": "        case 360: {",
        " Mark": "        ^",
        " Line": 808
    },
    {
        " Proj": "Math-38",
        "Class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        " Type": "error",
        "  Cat": "FallThrough",
        "  Msg": "Execution may fall through from the previous case; add a `// fall through` comment before this line if it was deliberate",
        " Code": "        case 650: {",
        " Mark": "        ^",
        " Line": 1117
    },
    {
        " Proj": "Math-38",
        "Class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        " Type": "error",
        "  Cat": "FallThrough",
        "  Msg": "Execution may fall through from the previous case; add a `// fall through` comment before this line if it was deliberate",
        " Code": "        case 680: {",
        " Mark": "        ^",
        " Line": 1169
    },
    {
        " Proj": "Math-38",
        "Class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        " Type": "error",
        "  Cat": "FallThrough",
        "  Msg": "Execution may fall through from the previous case; add a `// fall through` comment before this line if it was deliberate",
        " Code": "        case 720: {",
        " Mark": "        ^",
        " Line": 1194
    },
    {
        " Proj": "Math-38",
        "Class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        " Type": "error",
        "  Cat": "FallThrough",
        "  Msg": "Execution may fall through from the previous case; add a `// fall through` comment before this line if it was deliberate",
        " Code": "        case 30: {",
        " Mark": "        ^",
        " Line": 1883
    },
    {
        " Proj": "Math-38",
        "Class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        " Type": "error",
        "  Cat": "FallThrough",
        "  Msg": "Execution may fall through from the previous case; add a `// fall through` comment before this line if it was deliberate",
        " Code": "        case 90: {",
        " Mark": "        ^",
        " Line": 2024
    },
    {
        " Proj": "Math-38",
        "Class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        " Type": "error",
        "  Cat": "FallThrough",
        "  Msg": "Execution may fall through from the previous case; add a `// fall through` comment before this line if it was deliberate",
        " Code": "        case 100: {",
        " Mark": "        ^",
        " Line": 2033
    },
    {
        " Proj": "Math-38",
        "Class": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer",
        " Type": "error",
        "  Cat": "FallThrough",
        "  Msg": "Execution may fall through from the previous case; add a `// fall through` comment before this line if it was deliberate",
        " Code": "        case 190: {",
        " Mark": "        ^",
        " Line": 2216
    },
    {
        " Proj": "Math-39",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Math-4",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Math-40",
        "Class": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "solve implements method in BracketedUnivariateRealSolver; expected @Override",
        " Code": "    public double solve(int maxEval, UnivariateFunction f, double min,",
        " Mark": "                  ^",
        " Line": 389
    },
    {
        " Proj": "Math-40",
        "Class": "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "solve implements method in BracketedUnivariateRealSolver; expected @Override",
        " Code": "    public double solve(int maxEval, UnivariateFunction f, double min,",
        " Mark": "                  ^",
        " Line": 396
    },
    {
        " Proj": "Math-41",
        "Class": "org.apache.commons.math.stat.descriptive.moment.Variance",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getN implements method in StorelessUnivariateStatistic; expected @Override",
        " Code": "    public long getN() {",
        " Mark": "                ^",
        " Line": 195
    },
    {
        " Proj": "Math-41",
        "Class": "org.apache.commons.math.stat.descriptive.moment.Variance",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "evaluate implements method in WeightedEvaluation; expected @Override",
        " Code": "    public double evaluate(final double[] values, final double[] weights,",
        " Mark": "                  ^",
        " Line": 313
    },
    {
        " Proj": "Math-41",
        "Class": "org.apache.commons.math.stat.descriptive.moment.Variance",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "evaluate implements method in WeightedEvaluation; expected @Override",
        " Code": "    public double evaluate(final double[] values, final double[] weights) {",
        " Mark": "                  ^",
        " Line": 369
    },
    {
        " Proj": "Math-42",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Math-43",
        "Class": "org.apache.commons.math.stat.descriptive.SummaryStatistics",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getN implements method in StatisticalSummary; expected @Override",
        " Code": "    public long getN() {",
        " Mark": "                ^",
        " Line": 174
    },
    {
        " Proj": "Math-43",
        "Class": "org.apache.commons.math.stat.descriptive.SummaryStatistics",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getSum implements method in StatisticalSummary; expected @Override",
        " Code": "    public double getSum() {",
        " Mark": "                  ^",
        " Line": 182
    },
    {
        " Proj": "Math-43",
        "Class": "org.apache.commons.math.stat.descriptive.SummaryStatistics",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMean implements method in StatisticalSummary; expected @Override",
        " Code": "    public double getMean() {",
        " Mark": "                  ^",
        " Line": 204
    },
    {
        " Proj": "Math-43",
        "Class": "org.apache.commons.math.stat.descriptive.SummaryStatistics",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getStandardDeviation implements method in StatisticalSummary; expected @Override",
        " Code": "    public double getStandardDeviation() {",
        " Mark": "                  ^",
        " Line": 215
    },
    {
        " Proj": "Math-43",
        "Class": "org.apache.commons.math.stat.descriptive.SummaryStatistics",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getVariance implements method in StatisticalSummary; expected @Override",
        " Code": "    public double getVariance() {",
        " Mark": "                  ^",
        " Line": 238
    },
    {
        " Proj": "Math-43",
        "Class": "org.apache.commons.math.stat.descriptive.SummaryStatistics",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMax implements method in StatisticalSummary; expected @Override",
        " Code": "    public double getMax() {",
        " Mark": "                  ^",
        " Line": 263
    },
    {
        " Proj": "Math-43",
        "Class": "org.apache.commons.math.stat.descriptive.SummaryStatistics",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMin implements method in StatisticalSummary; expected @Override",
        " Code": "    public double getMin() {",
        " Mark": "                  ^",
        " Line": 274
    },
    {
        " Proj": "Math-44",
        "Class": "org.apache.commons.math.ode.AbstractIntegrator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getName implements method in ODEIntegrator; expected @Override",
        " Code": "    public String getName() {",
        " Mark": "                  ^",
        " Line": 104
    },
    {
        " Proj": "Math-44",
        "Class": "org.apache.commons.math.ode.AbstractIntegrator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "addStepHandler implements method in ODEIntegrator; expected @Override",
        " Code": "    public void addStepHandler(final StepHandler handler) {",
        " Mark": "                ^",
        " Line": 109
    },
    {
        " Proj": "Math-44",
        "Class": "org.apache.commons.math.ode.AbstractIntegrator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getStepHandlers implements method in ODEIntegrator; expected @Override",
        " Code": "    public Collection<StepHandler> getStepHandlers() {",
        " Mark": "                                   ^",
        " Line": 114
    },
    {
        " Proj": "Math-44",
        "Class": "org.apache.commons.math.ode.AbstractIntegrator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "clearStepHandlers implements method in ODEIntegrator; expected @Override",
        " Code": "    public void clearStepHandlers() {",
        " Mark": "                ^",
        " Line": 119
    },
    {
        " Proj": "Math-44",
        "Class": "org.apache.commons.math.ode.AbstractIntegrator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "addEventHandler implements method in ODEIntegrator; expected @Override",
        " Code": "    public void addEventHandler(final EventHandler handler,",
        " Mark": "                ^",
        " Line": 124
    },
    {
        " Proj": "Math-44",
        "Class": "org.apache.commons.math.ode.AbstractIntegrator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "addEventHandler implements method in ODEIntegrator; expected @Override",
        " Code": "    public void addEventHandler(final EventHandler handler,",
        " Mark": "                ^",
        " Line": 134
    },
    {
        " Proj": "Math-44",
        "Class": "org.apache.commons.math.ode.AbstractIntegrator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getEventHandlers implements method in ODEIntegrator; expected @Override",
        " Code": "    public Collection<EventHandler> getEventHandlers() {",
        " Mark": "                                    ^",
        " Line": 144
    },
    {
        " Proj": "Math-44",
        "Class": "org.apache.commons.math.ode.AbstractIntegrator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "clearEventHandlers implements method in ODEIntegrator; expected @Override",
        " Code": "    public void clearEventHandlers() {",
        " Mark": "                ^",
        " Line": 153
    },
    {
        " Proj": "Math-44",
        "Class": "org.apache.commons.math.ode.AbstractIntegrator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getCurrentStepStart implements method in ODEIntegrator; expected @Override",
        " Code": "    public double getCurrentStepStart() {",
        " Mark": "                  ^",
        " Line": 158
    },
    {
        " Proj": "Math-44",
        "Class": "org.apache.commons.math.ode.AbstractIntegrator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getCurrentSignedStepsize implements method in ODEIntegrator; expected @Override",
        " Code": "    public double getCurrentSignedStepsize() {",
        " Mark": "                  ^",
        " Line": 163
    },
    {
        " Proj": "Math-44",
        "Class": "org.apache.commons.math.ode.AbstractIntegrator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setMaxEvaluations implements method in ODEIntegrator; expected @Override",
        " Code": "    public void setMaxEvaluations(int maxEvaluations) {",
        " Mark": "                ^",
        " Line": 168
    },
    {
        " Proj": "Math-44",
        "Class": "org.apache.commons.math.ode.AbstractIntegrator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMaxEvaluations implements method in ODEIntegrator; expected @Override",
        " Code": "    public int getMaxEvaluations() {",
        " Mark": "               ^",
        " Line": 173
    },
    {
        " Proj": "Math-44",
        "Class": "org.apache.commons.math.ode.AbstractIntegrator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getEvaluations implements method in ODEIntegrator; expected @Override",
        " Code": "    public int getEvaluations() {",
        " Mark": "               ^",
        " Line": 178
    },
    {
        " Proj": "Math-44",
        "Class": "org.apache.commons.math.ode.AbstractIntegrator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "integrate implements method in FirstOrderIntegrator; expected @Override",
        " Code": "    public double integrate(final FirstOrderDifferentialEquations equations,",
        " Mark": "                  ^",
        " Line": 196
    },
    {
        " Proj": "Math-44",
        "Class": "org.apache.commons.math.ode.AbstractIntegrator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compare implements method in Comparator; expected @Override",
        " Code": "                public int compare(EventState es0, EventState es1) {",
        " Mark": "                           ^",
        " Line": 294
    },
    {
        " Proj": "Math-45",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Math-46",
        "Class": "org.apache.commons.math.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in FieldElement; expected @Override",
        " Code": "    public Complex add(Complex addend) throws NullArgumentException {",
        " Mark": "                   ^",
        " Line": 158
    },
    {
        " Proj": "Math-46",
        "Class": "org.apache.commons.math.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "divide implements method in FieldElement; expected @Override",
        " Code": "    public Complex divide(Complex divisor)",
        " Mark": "                   ^",
        " Line": 251
    },
    {
        " Proj": "Math-46",
        "Class": "org.apache.commons.math.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "multiply implements method in FieldElement; expected @Override",
        " Code": "    public Complex multiply(Complex factor)",
        " Mark": "                   ^",
        " Line": 419
    },
    {
        " Proj": "Math-46",
        "Class": "org.apache.commons.math.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "subtract implements method in FieldElement; expected @Override",
        " Code": "    public Complex subtract(Complex subtrahend)",
        " Mark": "                   ^",
        " Line": 490
    },
    {
        " Proj": "Math-46",
        "Class": "org.apache.commons.math.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getField implements method in FieldElement; expected @Override",
        " Code": "    public ComplexField getField() {",
        " Mark": "                        ^",
        " Line": 1176
    },
    {
        " Proj": "Math-47",
        "Class": "org.apache.commons.math.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in FieldElement; expected @Override",
        " Code": "    public Complex add(Complex addend) throws NullArgumentException {",
        " Mark": "                   ^",
        " Line": 158
    },
    {
        " Proj": "Math-47",
        "Class": "org.apache.commons.math.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "divide implements method in FieldElement; expected @Override",
        " Code": "    public Complex divide(Complex divisor)",
        " Mark": "                   ^",
        " Line": 251
    },
    {
        " Proj": "Math-47",
        "Class": "org.apache.commons.math.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "multiply implements method in FieldElement; expected @Override",
        " Code": "    public Complex multiply(Complex factor)",
        " Mark": "                   ^",
        " Line": 417
    },
    {
        " Proj": "Math-47",
        "Class": "org.apache.commons.math.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "subtract implements method in FieldElement; expected @Override",
        " Code": "    public Complex subtract(Complex subtrahend)",
        " Mark": "                   ^",
        " Line": 488
    },
    {
        " Proj": "Math-47",
        "Class": "org.apache.commons.math.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getField implements method in FieldElement; expected @Override",
        " Code": "    public ComplexField getField() {",
        " Mark": "                        ^",
        " Line": 1174
    },
    {
        " Proj": "Math-48",
        "Class": "org.apache.commons.math.analysis.solvers.BaseSecantSolver",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "solve implements method in BracketedUnivariateRealSolver; expected @Override",
        " Code": "    public double solve(final int maxEval, final UnivariateRealFunction f,",
        " Mark": "                  ^",
        " Line": 107
    },
    {
        " Proj": "Math-48",
        "Class": "org.apache.commons.math.analysis.solvers.BaseSecantSolver",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "solve implements method in BracketedUnivariateRealSolver; expected @Override",
        " Code": "    public double solve(final int maxEval, final UnivariateRealFunction f,",
        " Mark": "                  ^",
        " Line": 114
    },
    {
        " Proj": "Math-48",
        "Class": "org.apache.commons.math.analysis.solvers.BaseSecantSolver",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "doSolve implements method in BaseAbstractUnivariateRealSolver; expected @Override",
        " Code": "    protected final double doSolve() {",
        " Mark": "                           ^",
        " Line": 129
    },
    {
        " Proj": "Math-49",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "append implements method in RealVector; expected @Override",
        " Code": "    public OpenMapRealVector append(RealVector v) {",
        " Mark": "                             ^",
        " Line": 277
    },
    {
        " Proj": "Math-49",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "append implements method in RealVector; expected @Override",
        " Code": "    public OpenMapRealVector append(double d) {",
        " Mark": "                             ^",
        " Line": 285
    },
    {
        " Proj": "Math-49",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "append implements method in RealVector; expected @Override",
        " Code": "    public OpenMapRealVector append(double[] a) {",
        " Mark": "                             ^",
        " Line": 292
    },
    {
        " Proj": "Math-49",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "ebeDivide implements method in RealVector; expected @Override",
        " Code": "    public OpenMapRealVector ebeDivide(RealVector v) {",
        " Mark": "                             ^",
        " Line": 342
    },
    {
        " Proj": "Math-49",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "ebeMultiply implements method in RealVector; expected @Override",
        " Code": "    public OpenMapRealVector ebeMultiply(RealVector v) {",
        " Mark": "                             ^",
        " Line": 367
    },
    {
        " Proj": "Math-49",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getSubVector implements method in RealVector; expected @Override",
        " Code": "    public OpenMapRealVector getSubVector(int index, int n) {",
        " Mark": "                             ^",
        " Line": 392
    },
    {
        " Proj": "Math-49",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDimension implements method in RealVector; expected @Override",
        " Code": "    public int getDimension() {",
        " Mark": "               ^",
        " Line": 421
    },
    {
        " Proj": "Math-49",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getEntry implements method in RealVector; expected @Override",
        " Code": "    public double getEntry(int index) {",
        " Mark": "                  ^",
        " Line": 478
    },
    {
        " Proj": "Math-49",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isInfinite implements method in RealVector; expected @Override",
        " Code": "    public boolean isInfinite() {",
        " Mark": "                   ^",
        " Line": 588
    },
    {
        " Proj": "Math-49",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isNaN implements method in RealVector; expected @Override",
        " Code": "    public boolean isNaN() {",
        " Mark": "                   ^",
        " Line": 605
    },
    {
        " Proj": "Math-49",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "projection implements method in RealVector; expected @Override",
        " Code": "    public RealVector projection(RealVector v) {",
        " Mark": "                      ^",
        " Line": 649
    },
    {
        " Proj": "Math-49",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setEntry implements method in RealVector; expected @Override",
        " Code": "    public void setEntry(int index, double value) {",
        " Mark": "                ^",
        " Line": 662
    },
    {
        " Proj": "Math-49",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hasNext implements method in Iterator; expected @Override",
        " Code": "        public boolean hasNext() {",
        " Mark": "                       ^",
        " Line": 910
    },
    {
        " Proj": "Math-49",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "next implements method in Iterator; expected @Override",
        " Code": "        public Entry next() {",
        " Mark": "                     ^",
        " Line": 915
    },
    {
        " Proj": "Math-49",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "remove implements method in Iterator; expected @Override",
        " Code": "        public void remove() {",
        " Mark": "                    ^",
        " Line": 921
    },
    {
        " Proj": "Math-5",
        "Class": "org.apache.commons.math3.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in FieldElement; expected @Override",
        " Code": "    public Complex add(Complex addend) throws NullArgumentException {",
        " Mark": "                   ^",
        " Line": 156
    },
    {
        " Proj": "Math-5",
        "Class": "org.apache.commons.math3.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "divide implements method in FieldElement; expected @Override",
        " Code": "    public Complex divide(Complex divisor)",
        " Mark": "                   ^",
        " Line": 246
    },
    {
        " Proj": "Math-5",
        "Class": "org.apache.commons.math3.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "reciprocal implements method in FieldElement; expected @Override",
        " Code": "    public Complex reciprocal() {",
        " Mark": "                   ^",
        " Line": 299
    },
    {
        " Proj": "Math-5",
        "Class": "org.apache.commons.math3.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "multiply implements method in FieldElement; expected @Override",
        " Code": "    public Complex multiply(Complex factor)",
        " Mark": "                   ^",
        " Line": 436
    },
    {
        " Proj": "Math-5",
        "Class": "org.apache.commons.math3.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "multiply implements method in FieldElement; expected @Override",
        " Code": "    public Complex multiply(final int factor) {",
        " Mark": "                   ^",
        " Line": 461
    },
    {
        " Proj": "Math-5",
        "Class": "org.apache.commons.math3.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "negate implements method in FieldElement; expected @Override",
        " Code": "    public Complex negate() {",
        " Mark": "                   ^",
        " Line": 500
    },
    {
        " Proj": "Math-5",
        "Class": "org.apache.commons.math3.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "subtract implements method in FieldElement; expected @Override",
        " Code": "    public Complex subtract(Complex subtrahend)",
        " Mark": "                   ^",
        " Line": 526
    },
    {
        " Proj": "Math-5",
        "Class": "org.apache.commons.math3.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getField implements method in FieldElement; expected @Override",
        " Code": "    public ComplexField getField() {",
        " Mark": "                        ^",
        " Line": 1221
    },
    {
        " Proj": "Math-50",
        "Class": "org.apache.commons.math.analysis.solvers.BaseSecantSolver",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "solve implements method in BracketedUnivariateRealSolver; expected @Override",
        " Code": "    public double solve(final int maxEval, final UnivariateRealFunction f,",
        " Mark": "                  ^",
        " Line": 106
    },
    {
        " Proj": "Math-50",
        "Class": "org.apache.commons.math.analysis.solvers.BaseSecantSolver",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "solve implements method in BracketedUnivariateRealSolver; expected @Override",
        " Code": "    public double solve(final int maxEval, final UnivariateRealFunction f,",
        " Mark": "                  ^",
        " Line": 113
    },
    {
        " Proj": "Math-50",
        "Class": "org.apache.commons.math.analysis.solvers.BaseSecantSolver",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "doSolve implements method in BaseAbstractUnivariateRealSolver; expected @Override",
        " Code": "    protected final double doSolve() {",
        " Mark": "                           ^",
        " Line": 128
    },
    {
        " Proj": "Math-51",
        "Class": "org.apache.commons.math.analysis.solvers.BaseSecantSolver",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "solve implements method in BracketedUnivariateRealSolver; expected @Override",
        " Code": "    public double solve(final int maxEval, final UnivariateRealFunction f,",
        " Mark": "                  ^",
        " Line": 106
    },
    {
        " Proj": "Math-51",
        "Class": "org.apache.commons.math.analysis.solvers.BaseSecantSolver",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "solve implements method in BracketedUnivariateRealSolver; expected @Override",
        " Code": "    public double solve(final int maxEval, final UnivariateRealFunction f,",
        " Mark": "                  ^",
        " Line": 113
    },
    {
        " Proj": "Math-51",
        "Class": "org.apache.commons.math.analysis.solvers.BaseSecantSolver",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "doSolve implements method in BaseAbstractUnivariateRealSolver; expected @Override",
        " Code": "    protected final double doSolve() {",
        " Mark": "                           ^",
        " Line": 128
    },
    {
        " Proj": "Math-52",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Math-53",
        "Class": "org.apache.commons.math.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in FieldElement; expected @Override",
        " Code": "    public Complex add(Complex rhs)",
        " Mark": "                   ^",
        " Line": 150
    },
    {
        " Proj": "Math-53",
        "Class": "org.apache.commons.math.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "divide implements method in FieldElement; expected @Override",
        " Code": "    public Complex divide(Complex rhs)",
        " Mark": "                   ^",
        " Line": 216
    },
    {
        " Proj": "Math-53",
        "Class": "org.apache.commons.math.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "multiply implements method in FieldElement; expected @Override",
        " Code": "    public Complex multiply(Complex rhs)",
        " Mark": "                   ^",
        " Line": 365
    },
    {
        " Proj": "Math-53",
        "Class": "org.apache.commons.math.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "subtract implements method in FieldElement; expected @Override",
        " Code": "    public Complex subtract(Complex rhs)",
        " Mark": "                   ^",
        " Line": 452
    },
    {
        " Proj": "Math-53",
        "Class": "org.apache.commons.math.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getField implements method in FieldElement; expected @Override",
        " Code": "    public ComplexField getField() {",
        " Mark": "                        ^",
        " Line": 1014
    },
    {
        " Proj": "Math-54",
        "Class": "org.apache.commons.math.dfp.Dfp",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "            if (x != x) {",
        " Mark": "                  ^",
        " Line": 291
    },
    {
        " Proj": "Math-54",
        "Class": "org.apache.commons.math.dfp.Dfp",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getField implements method in FieldElement; expected @Override",
        " Code": "    public DfpField getField() {",
        " Mark": "                    ^",
        " Line": 635
    },
    {
        " Proj": "Math-54",
        "Class": "org.apache.commons.math.dfp.Dfp",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in FieldElement; expected @Override",
        " Code": "    public Dfp add(final Dfp x) {",
        " Mark": "               ^",
        " Line": 1168
    },
    {
        " Proj": "Math-54",
        "Class": "org.apache.commons.math.dfp.Dfp",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "subtract implements method in FieldElement; expected @Override",
        " Code": "    public Dfp subtract(final Dfp x) {",
        " Mark": "               ^",
        " Line": 1326
    },
    {
        " Proj": "Math-54",
        "Class": "org.apache.commons.math.dfp.Dfp",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "multiply implements method in FieldElement; expected @Override",
        " Code": "    public Dfp multiply(final Dfp x) {",
        " Mark": "               ^",
        " Line": 1413
    },
    {
        " Proj": "Math-54",
        "Class": "org.apache.commons.math.dfp.Dfp",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "divide implements method in FieldElement; expected @Override",
        " Code": "    public Dfp divide(Dfp divisor) {",
        " Mark": "               ^",
        " Line": 1582
    },
    {
        " Proj": "Math-55",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Math-56",
        "Class": "org.apache.commons.math.util.MultidimensionalCounter",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hasNext implements method in Iterator; expected @Override",
        " Code": "        public boolean hasNext() {",
        " Mark": "                       ^",
        " Line": 92
    },
    {
        " Proj": "Math-56",
        "Class": "org.apache.commons.math.util.MultidimensionalCounter",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "next implements method in Iterator; expected @Override",
        " Code": "        public Integer next() {",
        " Mark": "                       ^",
        " Line": 105
    },
    {
        " Proj": "Math-56",
        "Class": "org.apache.commons.math.util.MultidimensionalCounter",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "remove implements method in Iterator; expected @Override",
        " Code": "        public void remove() {",
        " Mark": "                    ^",
        " Line": 153
    },
    {
        " Proj": "Math-56",
        "Class": "org.apache.commons.math.util.MultidimensionalCounter",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "iterator implements method in Iterable; expected @Override",
        " Code": "    public Iterator iterator() {",
        " Mark": "                    ^",
        " Line": 195
    },
    {
        " Proj": "Math-57",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Math-58",
        "Class": "org.apache.commons.math.optimization.fitting.GaussianFitter",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "value implements method in ParametricUnivariateRealFunction; expected @Override",
        " Code": "                public double value(double x, double[] p) {",
        " Mark": "                              ^",
        " Line": 87
    },
    {
        " Proj": "Math-58",
        "Class": "org.apache.commons.math.optimization.fitting.GaussianFitter",
        " Type": "warning",
        "  Cat": "Overrides",
        "  Msg": "Varargs doesn't agree for overridden method",
        " Code": "                public double value(double x, double[] p) {",
        " Mark": "                              ^",
        " Line": 87
    },
    {
        " Proj": "Math-58",
        "Class": "org.apache.commons.math.optimization.fitting.GaussianFitter",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "gradient implements method in ParametricUnivariateRealFunction; expected @Override",
        " Code": "                public double[] gradient(double x, double[] p) {",
        " Mark": "                                ^",
        " Line": 97
    },
    {
        " Proj": "Math-58",
        "Class": "org.apache.commons.math.optimization.fitting.GaussianFitter",
        " Type": "warning",
        "  Cat": "Overrides",
        "  Msg": "Varargs doesn't agree for overridden method",
        " Code": "                public double[] gradient(double x, double[] p) {",
        " Mark": "                                ^",
        " Line": 97
    },
    {
        " Proj": "Math-58",
        "Class": "org.apache.commons.math.optimization.fitting.GaussianFitter",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compare implements method in Comparator; expected @Override",
        " Code": "                public int compare(WeightedObservedPoint p1, WeightedObservedPoint p2) {",
        " Mark": "                           ^",
        " Line": 303
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "    public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;",
        " Mark": "                                                               ^",
        " Line": 27
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "    public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;",
        " Mark": "                                                           ^",
        " Line": 30
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "    private static final double LN_2_A = 0.693147063255310059;",
        " Mark": "                                         ^",
        " Line": 59
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "    private static final double LN_2_B = 1.17304635250823482e-7;",
        " Mark": "                                         ^",
        " Line": 62
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "      if (x != x) {",
        " Mark": "            ^",
        " Line": 227
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "      if (x != x) {",
        " Mark": "            ^",
        " Line": 282
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "      if (x != x) {",
        " Mark": "            ^",
        " Line": 393
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",
        " Mark": "                                                                          ^",
        " Line": 663
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "                    hiPrec[0] /= 4.455505956692756620;",
        " Mark": "                                 ^",
        " Line": 665
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "                    hiPrec[1] /= 4.455505956692756620;",
        " Mark": "                                 ^",
        " Line": 666
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "        if (x != x || x == 0.0) { // NaN or zero",
        " Mark": "              ^",
        " Line": 762
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "            final double a = d * 9.31322574615478515625E-10;",
        " Mark": "                                 ^",
        " Line": 950
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "            double z = c * 9.31322574615478515625E-10;",
        " Mark": "                           ^",
        " Line": 969
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(result[1])`.",
        " Code": "        if (result[1] != result[1]) { // can happen if result[1] is NAN",
        " Mark": "                      ^",
        " Line": 1030
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "        if ((bits & 0x8000000000000000L) != 0 || x != x) {",
        " Mark": "                                                   ^",
        " Line": 1168
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "        if (x != x) { // X is NaN",
        " Mark": "              ^",
        " Line": 1455
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(y)`.",
        " Code": "            if (y != y) { // y is NaN",
        " Mark": "                  ^",
        " Line": 1490
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(y)`.",
        " Code": "            if (y != y) { // y is NaN",
        " Mark": "                  ^",
        " Line": 1512
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "            double tmp1 = y * 9.31322574615478515625E-10;",
        " Mark": "                              ^",
        " Line": 1571
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "            double tmp2 = tmp1 * 9.31322574615478515625E-10;",
        " Mark": "                                 ^",
        " Line": 1572
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(xa)`.",
        " Code": "        if (xa != xa || xa == Double.POSITIVE_INFINITY) {",
        " Mark": "               ^",
        " Line": 2427
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(xa)`.",
        " Code": "        if (xa != xa || xa == Double.POSITIVE_INFINITY) {",
        " Mark": "               ^",
        " Line": 2511
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(xa)`.",
        " Code": "        if (xa != xa || xa == Double.POSITIVE_INFINITY) {",
        " Mark": "               ^",
        " Line": 2606
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);",
        " Mark": "                            ^",
        " Line": 2720
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);",
        " Mark": "                             ^",
        " Line": 2723
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "        if (x !=x || y != y) {",
        " Mark": "              ^",
        " Line": 2850
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(y)`.",
        " Code": "        if (x !=x || y != y) {",
        " Mark": "                       ^",
        " Line": 2850
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(result)`.",
        " Code": "            if (result != result) { // y must be infinite",
        " Mark": "                       ^",
        " Line": 2867
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "            x *= 9.31322574615478515625E-10;",
        " Mark": "                 ^",
        " Line": 2938
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "warning",
        "  Cat": "FloatingPointLiteralPrecision",
        "  Msg": "Floating point literal loses precision",
        " Code": "            y *= 9.31322574615478515625E-10;",
        " Mark": "                 ^",
        " Line": 2939
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "      if (x != x) {",
        " Mark": "            ^",
        " Line": 2970
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "      if (x != x) {",
        " Mark": "            ^",
        " Line": 3042
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "        if (x != x) { // NaN",
        " Mark": "              ^",
        " Line": 3341
    },
    {
        " Proj": "Math-59",
        "Class": "org.apache.commons.math.util.FastMath",
        " Type": "error",
        "  Cat": "IdentityBinaryExpression",
        "  Msg": "A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.",
        " Code": "        if (x != x) { // NaN",
        " Mark": "              ^",
        " Line": 3368
    },
    {
        " Proj": "Math-6",
        "Class": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer",
        " Type": "warning",
        "  Cat": "OvershadowingSubclassFields",
        "  Msg": "Overshadowing variables of superclass causes confusion and errors. This variable is overshadowing a variable in superclass:  BaseOptimizer",
        " Code": "    private int iterations;",
        " Mark": "                ^",
        " Line": 189
    },
    {
        " Proj": "Math-6",
        "Class": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compareTo implements method in Comparable; expected @Override",
        " Code": "        public int compareTo(DoubleIndex o) {",
        " Mark": "                   ^",
        " Line": 850
    },
    {
        " Proj": "Math-6",
        "Class": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "value implements method in MultivariateFunction; expected @Override",
        " Code": "                public double value(double[] point) {",
        " Mark": "                              ^",
        " Line": 134
    },
    {
        " Proj": "Math-6",
        "Class": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compare implements method in Comparator; expected @Override",
        " Code": "            public int compare(final PointValuePair o1,",
        " Mark": "                       ^",
        " Line": 142
    },
    {
        " Proj": "Math-6",
        "Class": "org.apache.commons.math3.optim.BaseOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "trigger implements method in MaxCountExceededCallback; expected @Override",
        " Code": "        public void trigger(int max) {",
        " Mark": "                    ^",
        " Line": 212
    },
    {
        " Proj": "Math-6",
        "Class": "org.apache.commons.math3.optim.BaseOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "trigger implements method in MaxCountExceededCallback; expected @Override",
        " Code": "        public void trigger(int max) {",
        " Mark": "                    ^",
        " Line": 227
    },
    {
        " Proj": "Math-6",
        "Class": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "value implements method in UnivariateFunction; expected @Override",
        " Code": "                    public double value(double alpha) {",
        " Mark": "                                  ^",
        " Line": 346
    },
    {
        " Proj": "Math-6",
        "Class": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "precondition implements method in Preconditioner; expected @Override",
        " Code": "        public double[] precondition(double[] variables, double[] r) {",
        " Mark": "                        ^",
        " Line": 344
    },
    {
        " Proj": "Math-6",
        "Class": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "value implements method in UnivariateFunction; expected @Override",
        " Code": "        public double value(double x) {",
        " Mark": "                      ^",
        " Line": 376
    },
    {
        " Proj": "Math-60",
        "Class": "org.apache.commons.math.distribution.NormalDistributionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMean implements method in NormalDistribution; expected @Override",
        " Code": "    public double getMean() {",
        " Mark": "                  ^",
        " Line": 94
    },
    {
        " Proj": "Math-60",
        "Class": "org.apache.commons.math.distribution.NormalDistributionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getStandardDeviation implements method in NormalDistribution; expected @Override",
        " Code": "    public double getStandardDeviation() {",
        " Mark": "                  ^",
        " Line": 101
    },
    {
        " Proj": "Math-60",
        "Class": "org.apache.commons.math.distribution.NormalDistributionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "cumulativeProbability implements method in Distribution; expected @Override",
        " Code": "    public double cumulativeProbability(double x) throws MathException {",
        " Mark": "                  ^",
        " Line": 124
    },
    {
        " Proj": "Math-61",
        "Class": "org.apache.commons.math.distribution.PoissonDistributionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMean implements method in PoissonDistribution; expected @Override",
        " Code": "    public double getMean() {",
        " Mark": "                  ^",
        " Line": 129
    },
    {
        " Proj": "Math-61",
        "Class": "org.apache.commons.math.distribution.PoissonDistributionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "probability implements method in IntegerDistribution; expected @Override",
        " Code": "    public double probability(int x) {",
        " Mark": "                  ^",
        " Line": 140
    },
    {
        " Proj": "Math-61",
        "Class": "org.apache.commons.math.distribution.PoissonDistributionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "normalApproximateProbability implements method in PoissonDistribution; expected @Override",
        " Code": "    public double normalApproximateProbability(int x) throws MathException {",
        " Mark": "                  ^",
        " Line": 189
    },
    {
        " Proj": "Math-62",
        "Class": "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setConvergenceChecker implements method in BaseOptimizer; expected @Override",
        " Code": "    public void setConvergenceChecker(ConvergenceChecker<UnivariateRealPointValuePair> checker) {",
        " Mark": "                ^",
        " Line": 81
    },
    {
        " Proj": "Math-62",
        "Class": "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getConvergenceChecker implements method in BaseOptimizer; expected @Override",
        " Code": "    public ConvergenceChecker<UnivariateRealPointValuePair> getConvergenceChecker() {",
        " Mark": "                                                            ^",
        " Line": 88
    },
    {
        " Proj": "Math-62",
        "Class": "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMaxEvaluations implements method in BaseOptimizer; expected @Override",
        " Code": "    public int getMaxEvaluations() {",
        " Mark": "               ^",
        " Line": 93
    },
    {
        " Proj": "Math-62",
        "Class": "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getEvaluations implements method in BaseOptimizer; expected @Override",
        " Code": "    public int getEvaluations() {",
        " Mark": "               ^",
        " Line": 98
    },
    {
        " Proj": "Math-62",
        "Class": "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setMaxEvaluations implements method in BaseOptimizer; expected @Override",
        " Code": "    public void setMaxEvaluations(int maxEvaluations) {",
        " Mark": "                ^",
        " Line": 103
    },
    {
        " Proj": "Math-62",
        "Class": "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "optimize implements method in BaseUnivariateRealOptimizer; expected @Override",
        " Code": "    public UnivariateRealPointValuePair optimize(final FUNC f,",
        " Mark": "                                        ^",
        " Line": 142
    },
    {
        " Proj": "Math-62",
        "Class": "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "optimize implements method in BaseUnivariateRealOptimizer; expected @Override",
        " Code": "    public UnivariateRealPointValuePair optimize(final FUNC f, final GoalType goal,",
        " Mark": "                                        ^",
        " Line": 150
    },
    {
        " Proj": "Math-62",
        "Class": "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compare implements method in Comparator; expected @Override",
        " Code": "                public int compare(final UnivariateRealPointValuePair o1,",
        " Mark": "                           ^",
        " Line": 191
    },
    {
        " Proj": "Math-63",
        "Class": "org.apache.commons.math.util.MathUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        return new Double(value).hashCode();",
        " Mark": "               ^",
        " Line": 843
    },
    {
        " Proj": "Math-64",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Math-65",
        "Class": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setMaxIterations implements method in DifferentiableMultivariateVectorialOptimizer; expected @Override",
        " Code": "    public void setMaxIterations(int maxIterations) {",
        " Mark": "                ^",
        " Line": 123
    },
    {
        " Proj": "Math-65",
        "Class": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMaxIterations implements method in DifferentiableMultivariateVectorialOptimizer; expected @Override",
        " Code": "    public int getMaxIterations() {",
        " Mark": "               ^",
        " Line": 128
    },
    {
        " Proj": "Math-65",
        "Class": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getIterations implements method in DifferentiableMultivariateVectorialOptimizer; expected @Override",
        " Code": "    public int getIterations() {",
        " Mark": "               ^",
        " Line": 133
    },
    {
        " Proj": "Math-65",
        "Class": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setMaxEvaluations implements method in DifferentiableMultivariateVectorialOptimizer; expected @Override",
        " Code": "    public void setMaxEvaluations(int maxEvaluations) {",
        " Mark": "                ^",
        " Line": 138
    },
    {
        " Proj": "Math-65",
        "Class": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMaxEvaluations implements method in DifferentiableMultivariateVectorialOptimizer; expected @Override",
        " Code": "    public int getMaxEvaluations() {",
        " Mark": "               ^",
        " Line": 143
    },
    {
        " Proj": "Math-65",
        "Class": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getEvaluations implements method in DifferentiableMultivariateVectorialOptimizer; expected @Override",
        " Code": "    public int getEvaluations() {",
        " Mark": "               ^",
        " Line": 148
    },
    {
        " Proj": "Math-65",
        "Class": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getJacobianEvaluations implements method in DifferentiableMultivariateVectorialOptimizer; expected @Override",
        " Code": "    public int getJacobianEvaluations() {",
        " Mark": "               ^",
        " Line": 153
    },
    {
        " Proj": "Math-65",
        "Class": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setConvergenceChecker implements method in DifferentiableMultivariateVectorialOptimizer; expected @Override",
        " Code": "    public void setConvergenceChecker(VectorialConvergenceChecker convergenceChecker) {",
        " Mark": "                ^",
        " Line": 158
    },
    {
        " Proj": "Math-65",
        "Class": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getConvergenceChecker implements method in DifferentiableMultivariateVectorialOptimizer; expected @Override",
        " Code": "    public VectorialConvergenceChecker getConvergenceChecker() {",
        " Mark": "                                       ^",
        " Line": 163
    },
    {
        " Proj": "Math-65",
        "Class": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "optimize implements method in DifferentiableMultivariateVectorialOptimizer; expected @Override",
        " Code": "    public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f,",
        " Mark": "                                   ^",
        " Line": 322
    },
    {
        " Proj": "Math-66",
        "Class": "org.apache.commons.math.optimization.univariate.BrentOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "doOptimize implements method in AbstractUnivariateRealOptimizer; expected @Override",
        " Code": "    protected double doOptimize()",
        " Mark": "                     ^",
        " Line": 55
    },
    {
        " Proj": "Math-67",
        "Class": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getFunctionValue implements method in UnivariateRealOptimizer; expected @Override",
        " Code": "    public double getFunctionValue() {",
        " Mark": "                  ^",
        " Line": 91
    },
    {
        " Proj": "Math-67",
        "Class": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getResult implements method in UnivariateRealOptimizer; expected @Override",
        " Code": "    public double getResult() {",
        " Mark": "                  ^",
        " Line": 96
    },
    {
        " Proj": "Math-67",
        "Class": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getAbsoluteAccuracy implements method in ConvergingAlgorithm; expected @Override",
        " Code": "    public double getAbsoluteAccuracy() {",
        " Mark": "                  ^",
        " Line": 101
    },
    {
        " Proj": "Math-67",
        "Class": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getIterationCount implements method in ConvergingAlgorithm; expected @Override",
        " Code": "    public int getIterationCount() {",
        " Mark": "               ^",
        " Line": 106
    },
    {
        " Proj": "Math-67",
        "Class": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMaximalIterationCount implements method in ConvergingAlgorithm; expected @Override",
        " Code": "    public int getMaximalIterationCount() {",
        " Mark": "               ^",
        " Line": 111
    },
    {
        " Proj": "Math-67",
        "Class": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMaxEvaluations implements method in UnivariateRealOptimizer; expected @Override",
        " Code": "    public int getMaxEvaluations() {",
        " Mark": "               ^",
        " Line": 116
    },
    {
        " Proj": "Math-67",
        "Class": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getEvaluations implements method in UnivariateRealOptimizer; expected @Override",
        " Code": "    public int getEvaluations() {",
        " Mark": "               ^",
        " Line": 121
    },
    {
        " Proj": "Math-67",
        "Class": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRelativeAccuracy implements method in ConvergingAlgorithm; expected @Override",
        " Code": "    public double getRelativeAccuracy() {",
        " Mark": "                  ^",
        " Line": 126
    },
    {
        " Proj": "Math-67",
        "Class": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "resetAbsoluteAccuracy implements method in ConvergingAlgorithm; expected @Override",
        " Code": "    public void resetAbsoluteAccuracy() {",
        " Mark": "                ^",
        " Line": 131
    },
    {
        " Proj": "Math-67",
        "Class": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "resetMaximalIterationCount implements method in ConvergingAlgorithm; expected @Override",
        " Code": "    public void resetMaximalIterationCount() {",
        " Mark": "                ^",
        " Line": 136
    },
    {
        " Proj": "Math-67",
        "Class": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "resetRelativeAccuracy implements method in ConvergingAlgorithm; expected @Override",
        " Code": "    public void resetRelativeAccuracy() {",
        " Mark": "                ^",
        " Line": 141
    },
    {
        " Proj": "Math-67",
        "Class": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setAbsoluteAccuracy implements method in ConvergingAlgorithm; expected @Override",
        " Code": "    public void setAbsoluteAccuracy(double accuracy) {",
        " Mark": "                ^",
        " Line": 146
    },
    {
        " Proj": "Math-67",
        "Class": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setMaximalIterationCount implements method in ConvergingAlgorithm; expected @Override",
        " Code": "    public void setMaximalIterationCount(int count) {",
        " Mark": "                ^",
        " Line": 151
    },
    {
        " Proj": "Math-67",
        "Class": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setMaxEvaluations implements method in UnivariateRealOptimizer; expected @Override",
        " Code": "    public void setMaxEvaluations(int maxEvaluations) {",
        " Mark": "                ^",
        " Line": 156
    },
    {
        " Proj": "Math-67",
        "Class": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setRelativeAccuracy implements method in ConvergingAlgorithm; expected @Override",
        " Code": "    public void setRelativeAccuracy(double accuracy) {",
        " Mark": "                ^",
        " Line": 161
    },
    {
        " Proj": "Math-67",
        "Class": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "optimize implements method in UnivariateRealOptimizer; expected @Override",
        " Code": "    public double optimize(final UnivariateRealFunction f, final GoalType goalType,",
        " Mark": "                  ^",
        " Line": 226
    },
    {
        " Proj": "Math-67",
        "Class": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "optimize implements method in UnivariateRealOptimizer; expected @Override",
        " Code": "    public double optimize(final UnivariateRealFunction f, final GoalType goalType,",
        " Mark": "                  ^",
        " Line": 313
    },
    {
        " Proj": "Math-68",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Math-69",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Math-7",
        "Class": "org.apache.commons.math3.ode.AbstractIntegrator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getName implements method in ODEIntegrator; expected @Override",
        " Code": "    public String getName() {",
        " Mark": "                  ^",
        " Line": 103
    },
    {
        " Proj": "Math-7",
        "Class": "org.apache.commons.math3.ode.AbstractIntegrator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "addStepHandler implements method in ODEIntegrator; expected @Override",
        " Code": "    public void addStepHandler(final StepHandler handler) {",
        " Mark": "                ^",
        " Line": 108
    },
    {
        " Proj": "Math-7",
        "Class": "org.apache.commons.math3.ode.AbstractIntegrator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getStepHandlers implements method in ODEIntegrator; expected @Override",
        " Code": "    public Collection<StepHandler> getStepHandlers() {",
        " Mark": "                                   ^",
        " Line": 113
    },
    {
        " Proj": "Math-7",
        "Class": "org.apache.commons.math3.ode.AbstractIntegrator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "clearStepHandlers implements method in ODEIntegrator; expected @Override",
        " Code": "    public void clearStepHandlers() {",
        " Mark": "                ^",
        " Line": 118
    },
    {
        " Proj": "Math-7",
        "Class": "org.apache.commons.math3.ode.AbstractIntegrator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "addEventHandler implements method in ODEIntegrator; expected @Override",
        " Code": "    public void addEventHandler(final EventHandler handler,",
        " Mark": "                ^",
        " Line": 123
    },
    {
        " Proj": "Math-7",
        "Class": "org.apache.commons.math3.ode.AbstractIntegrator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "addEventHandler implements method in ODEIntegrator; expected @Override",
        " Code": "    public void addEventHandler(final EventHandler handler,",
        " Mark": "                ^",
        " Line": 133
    },
    {
        " Proj": "Math-7",
        "Class": "org.apache.commons.math3.ode.AbstractIntegrator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getEventHandlers implements method in ODEIntegrator; expected @Override",
        " Code": "    public Collection<EventHandler> getEventHandlers() {",
        " Mark": "                                    ^",
        " Line": 143
    },
    {
        " Proj": "Math-7",
        "Class": "org.apache.commons.math3.ode.AbstractIntegrator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "clearEventHandlers implements method in ODEIntegrator; expected @Override",
        " Code": "    public void clearEventHandlers() {",
        " Mark": "                ^",
        " Line": 152
    },
    {
        " Proj": "Math-7",
        "Class": "org.apache.commons.math3.ode.AbstractIntegrator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getCurrentStepStart implements method in ODEIntegrator; expected @Override",
        " Code": "    public double getCurrentStepStart() {",
        " Mark": "                  ^",
        " Line": 157
    },
    {
        " Proj": "Math-7",
        "Class": "org.apache.commons.math3.ode.AbstractIntegrator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getCurrentSignedStepsize implements method in ODEIntegrator; expected @Override",
        " Code": "    public double getCurrentSignedStepsize() {",
        " Mark": "                  ^",
        " Line": 162
    },
    {
        " Proj": "Math-7",
        "Class": "org.apache.commons.math3.ode.AbstractIntegrator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setMaxEvaluations implements method in ODEIntegrator; expected @Override",
        " Code": "    public void setMaxEvaluations(int maxEvaluations) {",
        " Mark": "                ^",
        " Line": 167
    },
    {
        " Proj": "Math-7",
        "Class": "org.apache.commons.math3.ode.AbstractIntegrator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMaxEvaluations implements method in ODEIntegrator; expected @Override",
        " Code": "    public int getMaxEvaluations() {",
        " Mark": "               ^",
        " Line": 172
    },
    {
        " Proj": "Math-7",
        "Class": "org.apache.commons.math3.ode.AbstractIntegrator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getEvaluations implements method in ODEIntegrator; expected @Override",
        " Code": "    public int getEvaluations() {",
        " Mark": "               ^",
        " Line": 177
    },
    {
        " Proj": "Math-7",
        "Class": "org.apache.commons.math3.ode.AbstractIntegrator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "integrate implements method in FirstOrderIntegrator; expected @Override",
        " Code": "    public double integrate(final FirstOrderDifferentialEquations equations,",
        " Mark": "                  ^",
        " Line": 210
    },
    {
        " Proj": "Math-7",
        "Class": "org.apache.commons.math3.ode.AbstractIntegrator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compare implements method in Comparator; expected @Override",
        " Code": "                public int compare(EventState es0, EventState es1) {",
        " Mark": "                           ^",
        " Line": 316
    },
    {
        " Proj": "Math-70",
        "Class": "org.apache.commons.math.analysis.solvers.BisectionSolver",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "solve implements method in UnivariateRealSolver; expected @Override",
        " Code": "    public double solve(final UnivariateRealFunction f, double min, double max, double initial)",
        " Mark": "                  ^",
        " Line": 70
    },
    {
        " Proj": "Math-70",
        "Class": "org.apache.commons.math.analysis.solvers.BisectionSolver",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "solve implements method in UnivariateRealSolver; expected @Override",
        " Code": "    public double solve(final UnivariateRealFunction f, double min, double max)",
        " Mark": "                  ^",
        " Line": 76
    },
    {
        " Proj": "Math-71",
        "Class": "org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "integrate implements method in FirstOrderIntegrator; expected @Override",
        " Code": "  public double integrate(final FirstOrderDifferentialEquations equations,",
        " Mark": "                ^",
        " Line": 95
    },
    {
        " Proj": "Math-72",
        "Class": "org.apache.commons.math.analysis.solvers.BrentSolver",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "solve implements method in UnivariateRealSolver; expected @Override",
        " Code": "    public double solve(final UnivariateRealFunction f,",
        " Mark": "                  ^",
        " Line": 98
    },
    {
        " Proj": "Math-72",
        "Class": "org.apache.commons.math.analysis.solvers.BrentSolver",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "solve implements method in UnivariateRealSolver; expected @Override",
        " Code": "    public double solve(final UnivariateRealFunction f,",
        " Mark": "                  ^",
        " Line": 163
    },
    {
        " Proj": "Math-73",
        "Class": "org.apache.commons.math.analysis.solvers.BrentSolver",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "solve implements method in UnivariateRealSolver; expected @Override",
        " Code": "    public double solve(final UnivariateRealFunction f,",
        " Mark": "                  ^",
        " Line": 98
    },
    {
        " Proj": "Math-73",
        "Class": "org.apache.commons.math.analysis.solvers.BrentSolver",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "solve implements method in UnivariateRealSolver; expected @Override",
        " Code": "    public double solve(final UnivariateRealFunction f,",
        " Mark": "                  ^",
        " Line": 163
    },
    {
        " Proj": "Math-74",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Math-75",
        "Class": "org.apache.commons.math.stat.Frequency",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compare implements method in Comparator; expected @Override",
        " Code": "        public int compare(Comparable<T> o1, Comparable<T> o2) {",
        " Mark": "                   ^",
        " Line": 560
    },
    {
        " Proj": "Math-76",
        "Class": "org.apache.commons.math.linear.SingularValueDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getU implements method in SingularValueDecomposition; expected @Override",
        " Code": "    public RealMatrix getU()",
        " Mark": "                      ^",
        " Line": 153
    },
    {
        " Proj": "Math-76",
        "Class": "org.apache.commons.math.linear.SingularValueDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getUT implements method in SingularValueDecomposition; expected @Override",
        " Code": "    public RealMatrix getUT()",
        " Mark": "                      ^",
        " Line": 204
    },
    {
        " Proj": "Math-76",
        "Class": "org.apache.commons.math.linear.SingularValueDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getS implements method in SingularValueDecomposition; expected @Override",
        " Code": "    public RealMatrix getS()",
        " Mark": "                      ^",
        " Line": 217
    },
    {
        " Proj": "Math-76",
        "Class": "org.apache.commons.math.linear.SingularValueDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getSingularValues implements method in SingularValueDecomposition; expected @Override",
        " Code": "    public double[] getSingularValues()",
        " Mark": "                    ^",
        " Line": 230
    },
    {
        " Proj": "Math-76",
        "Class": "org.apache.commons.math.linear.SingularValueDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getV implements method in SingularValueDecomposition; expected @Override",
        " Code": "    public RealMatrix getV()",
        " Mark": "                      ^",
        " Line": 236
    },
    {
        " Proj": "Math-76",
        "Class": "org.apache.commons.math.linear.SingularValueDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getVT implements method in SingularValueDecomposition; expected @Override",
        " Code": "    public RealMatrix getVT()",
        " Mark": "                      ^",
        " Line": 286
    },
    {
        " Proj": "Math-76",
        "Class": "org.apache.commons.math.linear.SingularValueDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getCovariance implements method in SingularValueDecomposition; expected @Override",
        " Code": "    public RealMatrix getCovariance(final double minSingularValue) {",
        " Mark": "                      ^",
        " Line": 299
    },
    {
        " Proj": "Math-76",
        "Class": "org.apache.commons.math.linear.SingularValueDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getNorm implements method in SingularValueDecomposition; expected @Override",
        " Code": "    public double getNorm()",
        " Mark": "                  ^",
        " Line": 329
    },
    {
        " Proj": "Math-76",
        "Class": "org.apache.commons.math.linear.SingularValueDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getConditionNumber implements method in SingularValueDecomposition; expected @Override",
        " Code": "    public double getConditionNumber()",
        " Mark": "                  ^",
        " Line": 335
    },
    {
        " Proj": "Math-76",
        "Class": "org.apache.commons.math.linear.SingularValueDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRank implements method in SingularValueDecomposition; expected @Override",
        " Code": "    public int getRank()",
        " Mark": "               ^",
        " Line": 341
    },
    {
        " Proj": "Math-76",
        "Class": "org.apache.commons.math.linear.SingularValueDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getSolver implements method in SingularValueDecomposition; expected @Override",
        " Code": "    public DecompositionSolver getSolver() {",
        " Mark": "                               ^",
        " Line": 356
    },
    {
        " Proj": "Math-76",
        "Class": "org.apache.commons.math.linear.SingularValueDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "solve implements method in DecompositionSolver; expected @Override",
        " Code": "        public double[] solve(final double[] b)",
        " Mark": "                        ^",
        " Line": 398
    },
    {
        " Proj": "Math-76",
        "Class": "org.apache.commons.math.linear.SingularValueDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "solve implements method in DecompositionSolver; expected @Override",
        " Code": "        public RealVector solve(final RealVector b)",
        " Mark": "                          ^",
        " Line": 410
    },
    {
        " Proj": "Math-76",
        "Class": "org.apache.commons.math.linear.SingularValueDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "solve implements method in DecompositionSolver; expected @Override",
        " Code": "        public RealMatrix solve(final RealMatrix b)",
        " Mark": "                          ^",
        " Line": 422
    },
    {
        " Proj": "Math-76",
        "Class": "org.apache.commons.math.linear.SingularValueDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isNonSingular implements method in DecompositionSolver; expected @Override",
        " Code": "        public boolean isNonSingular() {",
        " Mark": "                       ^",
        " Line": 431
    },
    {
        " Proj": "Math-76",
        "Class": "org.apache.commons.math.linear.SingularValueDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getInverse implements method in DecompositionSolver; expected @Override",
        " Code": "        public RealMatrix getInverse() {",
        " Mark": "                          ^",
        " Line": 438
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "copy overrides method in AbstractRealVector; expected @Override",
        " Code": "    public AbstractRealVector copy() {",
        " Mark": "                              ^",
        " Line": 263
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector add(RealVector v)",
        " Mark": "                      ^",
        " Line": 268
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector add(double[] v)",
        " Mark": "                      ^",
        " Line": 285
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "subtract overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector subtract(RealVector v)",
        " Mark": "                      ^",
        " Line": 307
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "subtract overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector subtract(double[] v)",
        " Mark": "                      ^",
        " Line": 324
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mapAddToSelf overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector mapAddToSelf(double d) {",
        " Mark": "                      ^",
        " Line": 346
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mapSubtractToSelf overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector mapSubtractToSelf(double d) {",
        " Mark": "                      ^",
        " Line": 354
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mapMultiplyToSelf overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector mapMultiplyToSelf(double d) {",
        " Mark": "                      ^",
        " Line": 362
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mapDivideToSelf overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector mapDivideToSelf(double d) {",
        " Mark": "                      ^",
        " Line": 370
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mapPowToSelf overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector mapPowToSelf(double d) {",
        " Mark": "                      ^",
        " Line": 378
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mapExpToSelf overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector mapExpToSelf() {",
        " Mark": "                      ^",
        " Line": 386
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mapExpm1ToSelf overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector mapExpm1ToSelf() {",
        " Mark": "                      ^",
        " Line": 394
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mapLogToSelf overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector mapLogToSelf() {",
        " Mark": "                      ^",
        " Line": 402
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mapLog10ToSelf overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector mapLog10ToSelf() {",
        " Mark": "                      ^",
        " Line": 410
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mapLog1pToSelf overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector mapLog1pToSelf() {",
        " Mark": "                      ^",
        " Line": 418
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mapCoshToSelf overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector mapCoshToSelf() {",
        " Mark": "                      ^",
        " Line": 426
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mapSinhToSelf overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector mapSinhToSelf() {",
        " Mark": "                      ^",
        " Line": 434
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mapTanhToSelf overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector mapTanhToSelf() {",
        " Mark": "                      ^",
        " Line": 442
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mapCosToSelf overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector mapCosToSelf() {",
        " Mark": "                      ^",
        " Line": 450
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mapSinToSelf overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector mapSinToSelf() {",
        " Mark": "                      ^",
        " Line": 458
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mapTanToSelf overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector mapTanToSelf() {",
        " Mark": "                      ^",
        " Line": 466
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mapAcosToSelf overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector mapAcosToSelf() {",
        " Mark": "                      ^",
        " Line": 474
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mapAsinToSelf overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector mapAsinToSelf() {",
        " Mark": "                      ^",
        " Line": 482
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mapAtanToSelf overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector mapAtanToSelf() {",
        " Mark": "                      ^",
        " Line": 490
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mapInvToSelf overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector mapInvToSelf() {",
        " Mark": "                      ^",
        " Line": 498
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mapAbsToSelf overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector mapAbsToSelf() {",
        " Mark": "                      ^",
        " Line": 506
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mapSqrtToSelf overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector mapSqrtToSelf() {",
        " Mark": "                      ^",
        " Line": 514
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mapCbrtToSelf overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector mapCbrtToSelf() {",
        " Mark": "                      ^",
        " Line": 522
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mapCeilToSelf overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector mapCeilToSelf() {",
        " Mark": "                      ^",
        " Line": 530
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mapFloorToSelf overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector mapFloorToSelf() {",
        " Mark": "                      ^",
        " Line": 538
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mapRintToSelf overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector mapRintToSelf() {",
        " Mark": "                      ^",
        " Line": 546
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mapSignumToSelf overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector mapSignumToSelf() {",
        " Mark": "                      ^",
        " Line": 554
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mapUlpToSelf overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector mapUlpToSelf() {",
        " Mark": "                      ^",
        " Line": 562
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "ebeMultiply implements method in RealVector; expected @Override",
        " Code": "    public RealVector ebeMultiply(RealVector v)",
        " Mark": "                      ^",
        " Line": 570
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "ebeMultiply overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector ebeMultiply(double[] v)",
        " Mark": "                      ^",
        " Line": 585
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "ebeDivide implements method in RealVector; expected @Override",
        " Code": "    public RealVector ebeDivide(RealVector v)",
        " Mark": "                      ^",
        " Line": 607
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "ebeDivide overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector ebeDivide(double[] v)",
        " Mark": "                      ^",
        " Line": 622
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getData overrides method in AbstractRealVector; expected @Override",
        " Code": "    public double[] getData() {",
        " Mark": "                    ^",
        " Line": 644
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "dotProduct overrides method in AbstractRealVector; expected @Override",
        " Code": "    public double dotProduct(RealVector v)",
        " Mark": "                  ^",
        " Line": 658
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "dotProduct overrides method in AbstractRealVector; expected @Override",
        " Code": "    public double dotProduct(double[] v)",
        " Mark": "                  ^",
        " Line": 675
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDistance overrides method in AbstractRealVector; expected @Override",
        " Code": "    public double getDistance(RealVector v)",
        " Mark": "                  ^",
        " Line": 727
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDistance overrides method in AbstractRealVector; expected @Override",
        " Code": "    public double getDistance(double[] v)",
        " Mark": "                  ^",
        " Line": 743
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getL1Distance overrides method in AbstractRealVector; expected @Override",
        " Code": "    public double getL1Distance(RealVector v)",
        " Mark": "                  ^",
        " Line": 773
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getL1Distance overrides method in AbstractRealVector; expected @Override",
        " Code": "    public double getL1Distance(double[] v)",
        " Mark": "                  ^",
        " Line": 789
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLInfDistance overrides method in AbstractRealVector; expected @Override",
        " Code": "    public double getLInfDistance(RealVector v)",
        " Mark": "                  ^",
        " Line": 819
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLInfDistance overrides method in AbstractRealVector; expected @Override",
        " Code": "    public double getLInfDistance(double[] v)",
        " Mark": "                  ^",
        " Line": 835
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "unitVector overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector unitVector() throws ArithmeticException {",
        " Mark": "                      ^",
        " Line": 865
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "unitize overrides method in AbstractRealVector; expected @Override",
        " Code": "    public void unitize() throws ArithmeticException {",
        " Mark": "                ^",
        " Line": 874
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "projection implements method in RealVector; expected @Override",
        " Code": "    public RealVector projection(RealVector v) {",
        " Mark": "                      ^",
        " Line": 883
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "projection overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector projection(double[] v) {",
        " Mark": "                      ^",
        " Line": 888
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "outerProduct overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealMatrix outerProduct(RealVector v)",
        " Mark": "                      ^",
        " Line": 902
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "outerProduct overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealMatrix outerProduct(double[] v)",
        " Mark": "                      ^",
        " Line": 931
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getEntry implements method in RealVector; expected @Override",
        " Code": "    public double getEntry(int index) throws MatrixIndexException {",
        " Mark": "                  ^",
        " Line": 945
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDimension implements method in RealVector; expected @Override",
        " Code": "    public int getDimension() {",
        " Mark": "               ^",
        " Line": 950
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "append implements method in RealVector; expected @Override",
        " Code": "    public RealVector append(RealVector v) {",
        " Mark": "                      ^",
        " Line": 955
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "append implements method in RealVector; expected @Override",
        " Code": "    public RealVector append(double in) {",
        " Mark": "                      ^",
        " Line": 973
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "append implements method in RealVector; expected @Override",
        " Code": "    public RealVector append(double[] in) {",
        " Mark": "                      ^",
        " Line": 981
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getSubVector implements method in RealVector; expected @Override",
        " Code": "    public RealVector getSubVector(int index, int n) {",
        " Mark": "                      ^",
        " Line": 986
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setEntry implements method in RealVector; expected @Override",
        " Code": "    public void setEntry(int index, double value) {",
        " Mark": "                ^",
        " Line": 998
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setSubVector overrides method in AbstractRealVector; expected @Override",
        " Code": "    public void setSubVector(int index, RealVector v) {",
        " Mark": "                ^",
        " Line": 1007
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setSubVector overrides method in AbstractRealVector; expected @Override",
        " Code": "    public void setSubVector(int index, double[] v) {",
        " Mark": "                ^",
        " Line": 1023
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "set overrides method in AbstractRealVector; expected @Override",
        " Code": "    public void set(double value) {",
        " Mark": "                ^",
        " Line": 1046
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toArray overrides method in AbstractRealVector; expected @Override",
        " Code": "    public double[] toArray(){",
        " Mark": "                    ^",
        " Line": 1051
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "checkVectorDimensions overrides method in AbstractRealVector; expected @Override",
        " Code": "    protected void checkVectorDimensions(RealVector v)",
        " Mark": "                   ^",
        " Line": 1067
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "checkVectorDimensions overrides method in AbstractRealVector; expected @Override",
        " Code": "    protected void checkVectorDimensions(int n)",
        " Mark": "                   ^",
        " Line": 1079
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isNaN implements method in RealVector; expected @Override",
        " Code": "    public boolean isNaN() {",
        " Mark": "                   ^",
        " Line": 1092
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.ArrayRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isInfinite implements method in RealVector; expected @Override",
        " Code": "    public boolean isInfinite() {",
        " Mark": "                   ^",
        " Line": 1107
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealVector add(RealVector v) throws IllegalArgumentException {",
        " Mark": "                      ^",
        " Line": 209
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "append implements method in RealVector; expected @Override",
        " Code": "    public OpenMapRealVector append(RealVector v) {",
        " Mark": "                             ^",
        " Line": 258
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "append implements method in RealVector; expected @Override",
        " Code": "    public OpenMapRealVector append(double d) {",
        " Mark": "                             ^",
        " Line": 266
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "append implements method in RealVector; expected @Override",
        " Code": "    public OpenMapRealVector append(double[] a) {",
        " Mark": "                             ^",
        " Line": 273
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "copy overrides method in AbstractRealVector; expected @Override",
        " Code": "    public OpenMapRealVector copy() {",
        " Mark": "                             ^",
        " Line": 282
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "dotProduct overrides method in AbstractRealVector; expected @Override",
        " Code": "    public double dotProduct(RealVector v) throws IllegalArgumentException {",
        " Mark": "                  ^",
        " Line": 307
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "ebeDivide implements method in RealVector; expected @Override",
        " Code": "    public OpenMapRealVector ebeDivide(RealVector v) throws IllegalArgumentException {",
        " Mark": "                             ^",
        " Line": 316
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "ebeDivide overrides method in AbstractRealVector; expected @Override",
        " Code": "    public OpenMapRealVector ebeDivide(double[] v) throws IllegalArgumentException {",
        " Mark": "                             ^",
        " Line": 328
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "ebeMultiply implements method in RealVector; expected @Override",
        " Code": "    public OpenMapRealVector ebeMultiply(RealVector v) throws IllegalArgumentException {",
        " Mark": "                             ^",
        " Line": 340
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "ebeMultiply overrides method in AbstractRealVector; expected @Override",
        " Code": "    public OpenMapRealVector ebeMultiply(double[] v) throws IllegalArgumentException {",
        " Mark": "                             ^",
        " Line": 352
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getSubVector implements method in RealVector; expected @Override",
        " Code": "    public OpenMapRealVector getSubVector(int index, int n) throws MatrixIndexException {",
        " Mark": "                             ^",
        " Line": 364
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getData overrides method in AbstractRealVector; expected @Override",
        " Code": "    public double[] getData() {",
        " Mark": "                    ^",
        " Line": 381
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDimension implements method in RealVector; expected @Override",
        " Code": "    public int getDimension() {",
        " Mark": "               ^",
        " Line": 392
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDistance overrides method in AbstractRealVector; expected @Override",
        " Code": "    public double getDistance(RealVector v) throws IllegalArgumentException {",
        " Mark": "                  ^",
        " Line": 425
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDistance overrides method in AbstractRealVector; expected @Override",
        " Code": "    public double getDistance(double[] v) throws IllegalArgumentException {",
        " Mark": "                  ^",
        " Line": 434
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getEntry implements method in RealVector; expected @Override",
        " Code": "    public double getEntry(int index) throws MatrixIndexException {",
        " Mark": "                  ^",
        " Line": 445
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getL1Distance overrides method in AbstractRealVector; expected @Override",
        " Code": "    public double getL1Distance(RealVector v) throws IllegalArgumentException {",
        " Mark": "                  ^",
        " Line": 479
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getL1Distance overrides method in AbstractRealVector; expected @Override",
        " Code": "    public double getL1Distance(double[] v) throws IllegalArgumentException {",
        " Mark": "                  ^",
        " Line": 488
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLInfDistance overrides method in AbstractRealVector; expected @Override",
        " Code": "    public double getLInfDistance(RealVector v) throws IllegalArgumentException {",
        " Mark": "                  ^",
        " Line": 527
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLInfDistance overrides method in AbstractRealVector; expected @Override",
        " Code": "    public double getLInfDistance(double[] v) throws IllegalArgumentException {",
        " Mark": "                  ^",
        " Line": 536
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isInfinite implements method in RealVector; expected @Override",
        " Code": "    public boolean isInfinite() {",
        " Mark": "                   ^",
        " Line": 549
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isNaN implements method in RealVector; expected @Override",
        " Code": "    public boolean isNaN() {",
        " Mark": "                   ^",
        " Line": 566
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mapAdd overrides method in AbstractRealVector; expected @Override",
        " Code": "    public OpenMapRealVector mapAdd(double d) {",
        " Mark": "                             ^",
        " Line": 578
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "mapAddToSelf overrides method in AbstractRealVector; expected @Override",
        " Code": "    public OpenMapRealVector mapAddToSelf(double d) {",
        " Mark": "                             ^",
        " Line": 583
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "outerProduct overrides method in AbstractRealVector; expected @Override",
        " Code": "    public RealMatrix outerProduct(double[] v) throws IllegalArgumentException {",
        " Mark": "                      ^",
        " Line": 591
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "projection implements method in RealVector; expected @Override",
        " Code": "    public RealVector projection(RealVector v) throws IllegalArgumentException {",
        " Mark": "                      ^",
        " Line": 607
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "projection overrides method in AbstractRealVector; expected @Override",
        " Code": "    public OpenMapRealVector projection(double[] v) throws IllegalArgumentException {",
        " Mark": "                             ^",
        " Line": 613
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setEntry implements method in RealVector; expected @Override",
        " Code": "    public void setEntry(int index, double value) throws MatrixIndexException {",
        " Mark": "                ^",
        " Line": 619
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setSubVector overrides method in AbstractRealVector; expected @Override",
        " Code": "    public void setSubVector(int index, RealVector v) throws MatrixIndexException {",
        " Mark": "                ^",
        " Line": 629
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setSubVector overrides method in AbstractRealVector; expected @Override",
        " Code": "    public void setSubVector(int index, double[] v) throws MatrixIndexException {",
        " Mark": "                ^",
        " Line": 636
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "set overrides method in AbstractRealVector; expected @Override",
        " Code": "    public void set(double value) {",
        " Mark": "                ^",
        " Line": 645
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "subtract overrides method in AbstractRealVector; expected @Override",
        " Code": "    public OpenMapRealVector subtract(RealVector v) throws IllegalArgumentException {",
        " Mark": "                             ^",
        " Line": 674
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "subtract overrides method in AbstractRealVector; expected @Override",
        " Code": "    public OpenMapRealVector subtract(double[] v) throws IllegalArgumentException {",
        " Mark": "                             ^",
        " Line": 683
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "unitVector overrides method in AbstractRealVector; expected @Override",
        " Code": "    public OpenMapRealVector unitVector() {",
        " Mark": "                             ^",
        " Line": 698
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "unitize overrides method in AbstractRealVector; expected @Override",
        " Code": "    public void unitize() {",
        " Mark": "                ^",
        " Line": 705
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toArray overrides method in AbstractRealVector; expected @Override",
        " Code": "    public double[] toArray() {",
        " Mark": "                    ^",
        " Line": 720
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "sparseIterator overrides method in AbstractRealVector; expected @Override",
        " Code": "    public java.util.Iterator<Entry> sparseIterator() {",
        " Mark": "                                     ^",
        " Line": 799
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hasNext implements method in Iterator; expected @Override",
        " Code": "        public boolean hasNext() {",
        " Mark": "                       ^",
        " Line": 860
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "next implements method in Iterator; expected @Override",
        " Code": "        public Entry next() {",
        " Mark": "                     ^",
        " Line": 865
    },
    {
        " Proj": "Math-77",
        "Class": "org.apache.commons.math.linear.OpenMapRealVector",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "remove implements method in Iterator; expected @Override",
        " Code": "        public void remove() {",
        " Mark": "                    ^",
        " Line": 871
    },
    {
        " Proj": "Math-78",
        "Class": "org.apache.commons.math.ode.events.EventState",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "value implements method in UnivariateRealFunction; expected @Override",
        " Code": "                        public double value(final double t) throws FunctionEvaluationException {",
        " Mark": "                                      ^",
        " Line": 215
    },
    {
        " Proj": "Math-79",
        "Class": "org.apache.commons.math.util.MathUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        return new Double(value).hashCode();",
        " Mark": "               ^",
        " Line": 681
    },
    {
        " Proj": "Math-8",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Math-80",
        "Class": "org.apache.commons.math.linear.EigenDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getV implements method in EigenDecomposition; expected @Override",
        " Code": "    public RealMatrix getV()",
        " Mark": "                      ^",
        " Line": 254
    },
    {
        " Proj": "Math-80",
        "Class": "org.apache.commons.math.linear.EigenDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getD implements method in EigenDecomposition; expected @Override",
        " Code": "    public RealMatrix getD()",
        " Mark": "                      ^",
        " Line": 277
    },
    {
        " Proj": "Math-80",
        "Class": "org.apache.commons.math.linear.EigenDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getVT implements method in EigenDecomposition; expected @Override",
        " Code": "    public RealMatrix getVT()",
        " Mark": "                      ^",
        " Line": 287
    },
    {
        " Proj": "Math-80",
        "Class": "org.apache.commons.math.linear.EigenDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRealEigenvalues implements method in EigenDecomposition; expected @Override",
        " Code": "    public double[] getRealEigenvalues()",
        " Mark": "                    ^",
        " Line": 310
    },
    {
        " Proj": "Math-80",
        "Class": "org.apache.commons.math.linear.EigenDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRealEigenvalue implements method in EigenDecomposition; expected @Override",
        " Code": "    public double getRealEigenvalue(final int i)",
        " Mark": "                  ^",
        " Line": 316
    },
    {
        " Proj": "Math-80",
        "Class": "org.apache.commons.math.linear.EigenDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getImagEigenvalues implements method in EigenDecomposition; expected @Override",
        " Code": "    public double[] getImagEigenvalues()",
        " Mark": "                    ^",
        " Line": 322
    },
    {
        " Proj": "Math-80",
        "Class": "org.apache.commons.math.linear.EigenDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getImagEigenvalue implements method in EigenDecomposition; expected @Override",
        " Code": "    public double getImagEigenvalue(final int i)",
        " Mark": "                  ^",
        " Line": 328
    },
    {
        " Proj": "Math-80",
        "Class": "org.apache.commons.math.linear.EigenDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getEigenvector implements method in EigenDecomposition; expected @Override",
        " Code": "    public RealVector getEigenvector(final int i)",
        " Mark": "                      ^",
        " Line": 334
    },
    {
        " Proj": "Math-80",
        "Class": "org.apache.commons.math.linear.EigenDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDeterminant implements method in EigenDecomposition; expected @Override",
        " Code": "    public double getDeterminant() {",
        " Mark": "                  ^",
        " Line": 346
    },
    {
        " Proj": "Math-80",
        "Class": "org.apache.commons.math.linear.EigenDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getSolver implements method in EigenDecomposition; expected @Override",
        " Code": "    public DecompositionSolver getSolver() {",
        " Mark": "                               ^",
        " Line": 355
    },
    {
        " Proj": "Math-80",
        "Class": "org.apache.commons.math.linear.EigenDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "solve implements method in DecompositionSolver; expected @Override",
        " Code": "        public double[] solve(final double[] b)",
        " Mark": "                        ^",
        " Line": 395
    },
    {
        " Proj": "Math-80",
        "Class": "org.apache.commons.math.linear.EigenDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "solve implements method in DecompositionSolver; expected @Override",
        " Code": "        public RealVector solve(final RealVector b)",
        " Mark": "                          ^",
        " Line": 431
    },
    {
        " Proj": "Math-80",
        "Class": "org.apache.commons.math.linear.EigenDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "solve implements method in DecompositionSolver; expected @Override",
        " Code": "        public RealMatrix solve(final RealMatrix b)",
        " Mark": "                          ^",
        " Line": 467
    },
    {
        " Proj": "Math-80",
        "Class": "org.apache.commons.math.linear.EigenDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isNonSingular implements method in DecompositionSolver; expected @Override",
        " Code": "        public boolean isNonSingular() {",
        " Mark": "                       ^",
        " Line": 506
    },
    {
        " Proj": "Math-80",
        "Class": "org.apache.commons.math.linear.EigenDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getInverse implements method in DecompositionSolver; expected @Override",
        " Code": "        public RealMatrix getInverse()",
        " Mark": "                          ^",
        " Line": 519
    },
    {
        " Proj": "Math-81",
        "Class": "org.apache.commons.math.linear.EigenDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getV implements method in EigenDecomposition; expected @Override",
        " Code": "    public RealMatrix getV()",
        " Mark": "                      ^",
        " Line": 254
    },
    {
        " Proj": "Math-81",
        "Class": "org.apache.commons.math.linear.EigenDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getD implements method in EigenDecomposition; expected @Override",
        " Code": "    public RealMatrix getD()",
        " Mark": "                      ^",
        " Line": 277
    },
    {
        " Proj": "Math-81",
        "Class": "org.apache.commons.math.linear.EigenDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getVT implements method in EigenDecomposition; expected @Override",
        " Code": "    public RealMatrix getVT()",
        " Mark": "                      ^",
        " Line": 287
    },
    {
        " Proj": "Math-81",
        "Class": "org.apache.commons.math.linear.EigenDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRealEigenvalues implements method in EigenDecomposition; expected @Override",
        " Code": "    public double[] getRealEigenvalues()",
        " Mark": "                    ^",
        " Line": 310
    },
    {
        " Proj": "Math-81",
        "Class": "org.apache.commons.math.linear.EigenDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRealEigenvalue implements method in EigenDecomposition; expected @Override",
        " Code": "    public double getRealEigenvalue(final int i)",
        " Mark": "                  ^",
        " Line": 316
    },
    {
        " Proj": "Math-81",
        "Class": "org.apache.commons.math.linear.EigenDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getImagEigenvalues implements method in EigenDecomposition; expected @Override",
        " Code": "    public double[] getImagEigenvalues()",
        " Mark": "                    ^",
        " Line": 322
    },
    {
        " Proj": "Math-81",
        "Class": "org.apache.commons.math.linear.EigenDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getImagEigenvalue implements method in EigenDecomposition; expected @Override",
        " Code": "    public double getImagEigenvalue(final int i)",
        " Mark": "                  ^",
        " Line": 328
    },
    {
        " Proj": "Math-81",
        "Class": "org.apache.commons.math.linear.EigenDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getEigenvector implements method in EigenDecomposition; expected @Override",
        " Code": "    public RealVector getEigenvector(final int i)",
        " Mark": "                      ^",
        " Line": 334
    },
    {
        " Proj": "Math-81",
        "Class": "org.apache.commons.math.linear.EigenDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDeterminant implements method in EigenDecomposition; expected @Override",
        " Code": "    public double getDeterminant() {",
        " Mark": "                  ^",
        " Line": 346
    },
    {
        " Proj": "Math-81",
        "Class": "org.apache.commons.math.linear.EigenDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getSolver implements method in EigenDecomposition; expected @Override",
        " Code": "    public DecompositionSolver getSolver() {",
        " Mark": "                               ^",
        " Line": 355
    },
    {
        " Proj": "Math-81",
        "Class": "org.apache.commons.math.linear.EigenDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "solve implements method in DecompositionSolver; expected @Override",
        " Code": "        public double[] solve(final double[] b)",
        " Mark": "                        ^",
        " Line": 395
    },
    {
        " Proj": "Math-81",
        "Class": "org.apache.commons.math.linear.EigenDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "solve implements method in DecompositionSolver; expected @Override",
        " Code": "        public RealVector solve(final RealVector b)",
        " Mark": "                          ^",
        " Line": 431
    },
    {
        " Proj": "Math-81",
        "Class": "org.apache.commons.math.linear.EigenDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "solve implements method in DecompositionSolver; expected @Override",
        " Code": "        public RealMatrix solve(final RealMatrix b)",
        " Mark": "                          ^",
        " Line": 467
    },
    {
        " Proj": "Math-81",
        "Class": "org.apache.commons.math.linear.EigenDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isNonSingular implements method in DecompositionSolver; expected @Override",
        " Code": "        public boolean isNonSingular() {",
        " Mark": "                       ^",
        " Line": 506
    },
    {
        " Proj": "Math-81",
        "Class": "org.apache.commons.math.linear.EigenDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getInverse implements method in DecompositionSolver; expected @Override",
        " Code": "        public RealMatrix getInverse()",
        " Mark": "                          ^",
        " Line": 519
    },
    {
        " Proj": "Math-82",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Math-83",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Math-84",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Math-85",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Math-86",
        "Class": "org.apache.commons.math.linear.CholeskyDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getL implements method in CholeskyDecomposition; expected @Override",
        " Code": "    public RealMatrix getL() {",
        " Mark": "                      ^",
        " Line": 154
    },
    {
        " Proj": "Math-86",
        "Class": "org.apache.commons.math.linear.CholeskyDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLT implements method in CholeskyDecomposition; expected @Override",
        " Code": "    public RealMatrix getLT() {",
        " Mark": "                      ^",
        " Line": 162
    },
    {
        " Proj": "Math-86",
        "Class": "org.apache.commons.math.linear.CholeskyDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDeterminant implements method in CholeskyDecomposition; expected @Override",
        " Code": "    public double getDeterminant() {",
        " Mark": "                  ^",
        " Line": 174
    },
    {
        " Proj": "Math-86",
        "Class": "org.apache.commons.math.linear.CholeskyDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getSolver implements method in CholeskyDecomposition; expected @Override",
        " Code": "    public DecompositionSolver getSolver() {",
        " Mark": "                               ^",
        " Line": 184
    },
    {
        " Proj": "Math-86",
        "Class": "org.apache.commons.math.linear.CholeskyDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isNonSingular implements method in DecompositionSolver; expected @Override",
        " Code": "        public boolean isNonSingular() {",
        " Mark": "                       ^",
        " Line": 203
    },
    {
        " Proj": "Math-86",
        "Class": "org.apache.commons.math.linear.CholeskyDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "solve implements method in DecompositionSolver; expected @Override",
        " Code": "        public double[] solve(double[] b)",
        " Mark": "                        ^",
        " Line": 209
    },
    {
        " Proj": "Math-86",
        "Class": "org.apache.commons.math.linear.CholeskyDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "solve implements method in DecompositionSolver; expected @Override",
        " Code": "        public RealVector solve(RealVector b)",
        " Mark": "                          ^",
        " Line": 245
    },
    {
        " Proj": "Math-86",
        "Class": "org.apache.commons.math.linear.CholeskyDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "solve implements method in DecompositionSolver; expected @Override",
        " Code": "        public RealMatrix solve(RealMatrix b)",
        " Mark": "                          ^",
        " Line": 297
    },
    {
        " Proj": "Math-86",
        "Class": "org.apache.commons.math.linear.CholeskyDecompositionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getInverse implements method in DecompositionSolver; expected @Override",
        " Code": "        public RealMatrix getInverse() throws InvalidMatrixException {",
        " Mark": "                          ^",
        " Line": 348
    },
    {
        " Proj": "Math-87",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Math-88",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Math-89",
        "Class": "org.apache.commons.math.stat.Frequency",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compare implements method in Comparator; expected @Override",
        " Code": "        public int compare(Object o1, Object o2) {",
        " Mark": "                   ^",
        " Line": 490
    },
    {
        " Proj": "Math-9",
        "Class": "org.apache.commons.math3.geometry.euclidean.threed.Line",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toSubSpace implements method in Embedding; expected @Override",
        " Code": "    public Vector1D toSubSpace(final Vector<Euclidean3D> point) {",
        " Mark": "                    ^",
        " Line": 128
    },
    {
        " Proj": "Math-9",
        "Class": "org.apache.commons.math3.geometry.euclidean.threed.Line",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toSpace implements method in Embedding; expected @Override",
        " Code": "    public Vector3D toSpace(final Vector<Euclidean1D> point) {",
        " Mark": "                    ^",
        " Line": 135
    },
    {
        " Proj": "Math-90",
        "Class": "org.apache.commons.math.stat.Frequency",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compare implements method in Comparator; expected @Override",
        " Code": "        public int compare(Object o1, Object o2) {",
        " Mark": "                   ^",
        " Line": 486
    },
    {
        " Proj": "Math-91",
        "Class": "org.apache.commons.math.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compareTo implements method in Comparable; expected @Override",
        " Code": "    public int compareTo(Fraction object) {",
        " Mark": "               ^",
        " Line": 258
    },
    {
        " Proj": "Math-91",
        "Class": "org.apache.commons.math.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "doubleValue implements method in Number; expected @Override",
        " Code": "    public double doubleValue() {",
        " Mark": "                  ^",
        " Line": 269
    },
    {
        " Proj": "Math-91",
        "Class": "org.apache.commons.math.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "    public boolean equals(Object other) {",
        " Mark": "                   ^",
        " Line": 282
    },
    {
        " Proj": "Math-91",
        "Class": "org.apache.commons.math.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "floatValue implements method in Number; expected @Override",
        " Code": "    public float floatValue() {",
        " Mark": "                 ^",
        " Line": 310
    },
    {
        " Proj": "Math-91",
        "Class": "org.apache.commons.math.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Object; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 334
    },
    {
        " Proj": "Math-91",
        "Class": "org.apache.commons.math.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "intValue implements method in Number; expected @Override",
        " Code": "    public int intValue() {",
        " Mark": "               ^",
        " Line": 343
    },
    {
        " Proj": "Math-91",
        "Class": "org.apache.commons.math.fraction.Fraction",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "longValue implements method in Number; expected @Override",
        " Code": "    public long longValue() {",
        " Mark": "                ^",
        " Line": 352
    },
    {
        " Proj": "Math-92",
        "Class": "org.apache.commons.math.util.MathUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        return new Double(value).hashCode();",
        " Mark": "               ^",
        " Line": 560
    },
    {
        " Proj": "Math-93",
        "Class": "org.apache.commons.math.util.MathUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        return new Double(value).hashCode();",
        " Mark": "               ^",
        " Line": 483
    },
    {
        " Proj": "Math-94",
        "Class": "org.apache.commons.math.util.MathUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        return new Double(value).hashCode();",
        " Mark": "               ^",
        " Line": 469
    },
    {
        " Proj": "Math-95",
        "Class": "org.apache.commons.math.distribution.FDistributionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "cumulativeProbability implements method in Distribution; expected @Override",
        " Code": "    public double cumulativeProbability(double x) throws MathException {",
        " Mark": "                  ^",
        " Line": 70
    },
    {
        " Proj": "Math-95",
        "Class": "org.apache.commons.math.distribution.FDistributionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "inverseCumulativeProbability overrides method in AbstractContinuousDistribution; expected @Override",
        " Code": "    public double inverseCumulativeProbability(final double p) ",
        " Mark": "                  ^",
        " Line": 98
    },
    {
        " Proj": "Math-95",
        "Class": "org.apache.commons.math.distribution.FDistributionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDomainLowerBound implements method in AbstractContinuousDistribution; expected @Override",
        " Code": "    protected double getDomainLowerBound(double p) {",
        " Mark": "                     ^",
        " Line": 118
    },
    {
        " Proj": "Math-95",
        "Class": "org.apache.commons.math.distribution.FDistributionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDomainUpperBound implements method in AbstractContinuousDistribution; expected @Override",
        " Code": "    protected double getDomainUpperBound(double p) {",
        " Mark": "                     ^",
        " Line": 131
    },
    {
        " Proj": "Math-95",
        "Class": "org.apache.commons.math.distribution.FDistributionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getInitialDomain implements method in AbstractContinuousDistribution; expected @Override",
        " Code": "    protected double getInitialDomain(double p) {",
        " Mark": "                     ^",
        " Line": 143
    },
    {
        " Proj": "Math-95",
        "Class": "org.apache.commons.math.distribution.FDistributionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setNumeratorDegreesOfFreedom implements method in FDistribution; expected @Override",
        " Code": "    public void setNumeratorDegreesOfFreedom(double degreesOfFreedom) {",
        " Mark": "                ^",
        " Line": 159
    },
    {
        " Proj": "Math-95",
        "Class": "org.apache.commons.math.distribution.FDistributionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getNumeratorDegreesOfFreedom implements method in FDistribution; expected @Override",
        " Code": "    public double getNumeratorDegreesOfFreedom() {",
        " Mark": "                  ^",
        " Line": 171
    },
    {
        " Proj": "Math-95",
        "Class": "org.apache.commons.math.distribution.FDistributionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setDenominatorDegreesOfFreedom implements method in FDistribution; expected @Override",
        " Code": "    public void setDenominatorDegreesOfFreedom(double degreesOfFreedom) {",
        " Mark": "                ^",
        " Line": 181
    },
    {
        " Proj": "Math-95",
        "Class": "org.apache.commons.math.distribution.FDistributionImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDenominatorDegreesOfFreedom implements method in FDistribution; expected @Override",
        " Code": "    public double getDenominatorDegreesOfFreedom() {",
        " Mark": "                  ^",
        " Line": 193
    },
    {
        " Proj": "Math-96",
        "Class": "org.apache.commons.math.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "    public boolean equals(Object other) {",
        " Mark": "                   ^",
        " Line": 245
    },
    {
        " Proj": "Math-96",
        "Class": "org.apache.commons.math.complex.Complex",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Object; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 276
    },
    {
        " Proj": "Math-97",
        "Class": "org.apache.commons.math.analysis.BrentSolver",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "solve implements method in UnivariateRealSolver; expected @Override",
        " Code": "    public double solve(double min, double max, double initial)",
        " Mark": "                  ^",
        " Line": 64
    },
    {
        " Proj": "Math-97",
        "Class": "org.apache.commons.math.analysis.BrentSolver",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "solve implements method in UnivariateRealSolver; expected @Override",
        " Code": "    public double solve(double min, double max) throws MaxIterationsExceededException, ",
        " Mark": "                  ^",
        " Line": 125
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.RealMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "copy implements method in RealMatrix; expected @Override",
        " Code": "    public RealMatrix copy() {",
        " Mark": "                      ^",
        " Line": 176
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.RealMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in RealMatrix; expected @Override",
        " Code": "    public RealMatrix add(RealMatrix m) throws IllegalArgumentException {",
        " Mark": "                      ^",
        " Line": 187
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.RealMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "subtract implements method in RealMatrix; expected @Override",
        " Code": "    public RealMatrix subtract(RealMatrix m) throws IllegalArgumentException {",
        " Mark": "                      ^",
        " Line": 240
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.RealMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "scalarAdd implements method in RealMatrix; expected @Override",
        " Code": "    public RealMatrix scalarAdd(double d) {",
        " Mark": "                      ^",
        " Line": 292
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.RealMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "scalarMultiply implements method in RealMatrix; expected @Override",
        " Code": "    public RealMatrix scalarMultiply(double d) {",
        " Mark": "                      ^",
        " Line": 311
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.RealMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "multiply implements method in RealMatrix; expected @Override",
        " Code": "    public RealMatrix multiply(RealMatrix m) throws IllegalArgumentException {",
        " Mark": "                      ^",
        " Line": 332
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.RealMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "preMultiply implements method in RealMatrix; expected @Override",
        " Code": "    public RealMatrix preMultiply(RealMatrix m) throws IllegalArgumentException {",
        " Mark": "                      ^",
        " Line": 394
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.RealMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getData implements method in RealMatrix; expected @Override",
        " Code": "    public double[][] getData() {",
        " Mark": "                      ^",
        " Line": 405
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.RealMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getNorm implements method in RealMatrix; expected @Override",
        " Code": "    public double getNorm() {",
        " Mark": "                  ^",
        " Line": 424
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.RealMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getSubMatrix implements method in RealMatrix; expected @Override",
        " Code": "    public RealMatrix getSubMatrix(int startRow, int endRow,",
        " Mark": "                      ^",
        " Line": 448
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.RealMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getSubMatrix implements method in RealMatrix; expected @Override",
        " Code": "    public RealMatrix getSubMatrix(int[] selectedRows, int[] selectedColumns)",
        " Mark": "                      ^",
        " Line": 478
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.RealMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRowMatrix implements method in RealMatrix; expected @Override",
        " Code": "    public RealMatrix getRowMatrix(int row) throws MatrixIndexException {",
        " Mark": "                      ^",
        " Line": 573
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.RealMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getColumnMatrix implements method in RealMatrix; expected @Override",
        " Code": "    public RealMatrix getColumnMatrix(int column) throws MatrixIndexException {",
        " Mark": "                      ^",
        " Line": 591
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.RealMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRow implements method in RealMatrix; expected @Override",
        " Code": "    public double[] getRow(int row) throws MatrixIndexException {",
        " Mark": "                    ^",
        " Line": 613
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.RealMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getColumn implements method in RealMatrix; expected @Override",
        " Code": "    public double[] getColumn(int col) throws MatrixIndexException {",
        " Mark": "                    ^",
        " Line": 633
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.RealMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getEntry implements method in RealMatrix; expected @Override",
        " Code": "    public double getEntry(int row, int column)",
        " Mark": "                  ^",
        " Line": 660
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.RealMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "transpose implements method in RealMatrix; expected @Override",
        " Code": "    public RealMatrix transpose() {",
        " Mark": "                      ^",
        " Line": 674
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.RealMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "inverse implements method in RealMatrix; expected @Override",
        " Code": "    public RealMatrix inverse() throws InvalidMatrixException {",
        " Mark": "                      ^",
        " Line": 693
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.RealMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDeterminant implements method in RealMatrix; expected @Override",
        " Code": "    public double getDeterminant() throws InvalidMatrixException {",
        " Mark": "                  ^",
        " Line": 701
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.RealMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isSquare implements method in RealMatrix; expected @Override",
        " Code": "    public boolean isSquare() {",
        " Mark": "                   ^",
        " Line": 719
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.RealMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isSingular implements method in RealMatrix; expected @Override",
        " Code": "    public boolean isSingular() {",
        " Mark": "                   ^",
        " Line": 726
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.RealMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRowDimension implements method in RealMatrix; expected @Override",
        " Code": "    public int getRowDimension() {",
        " Mark": "               ^",
        " Line": 742
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.RealMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getColumnDimension implements method in RealMatrix; expected @Override",
        " Code": "    public int getColumnDimension() {",
        " Mark": "               ^",
        " Line": 749
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.RealMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getTrace implements method in RealMatrix; expected @Override",
        " Code": "    public double getTrace() throws IllegalArgumentException {",
        " Mark": "                  ^",
        " Line": 757
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.RealMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "operate implements method in RealMatrix; expected @Override",
        " Code": "    public double[] operate(double[] v) throws IllegalArgumentException {",
        " Mark": "                    ^",
        " Line": 773
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.RealMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "preMultiply implements method in RealMatrix; expected @Override",
        " Code": "    public double[] preMultiply(double[] v) throws IllegalArgumentException {",
        " Mark": "                    ^",
        " Line": 796
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.RealMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "solve implements method in RealMatrix; expected @Override",
        " Code": "    public double[] solve(double[] b) throws IllegalArgumentException, InvalidMatrixException {",
        " Mark": "                    ^",
        " Line": 824
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.RealMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "solve implements method in RealMatrix; expected @Override",
        " Code": "    public RealMatrix solve(RealMatrix b) throws IllegalArgumentException, InvalidMatrixException  {",
        " Mark": "                      ^",
        " Line": 849
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.RealMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString overrides method in Object; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 1003
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.RealMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "    public boolean equals(Object object) {",
        " Mark": "                   ^",
        " Line": 1034
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.RealMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Object; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 1064
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "copy implements method in BigMatrix; expected @Override",
        " Code": "    public BigMatrix copy() {",
        " Mark": "                     ^",
        " Line": 247
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in BigMatrix; expected @Override",
        " Code": "    public BigMatrix add(BigMatrix m) throws IllegalArgumentException {",
        " Mark": "                     ^",
        " Line": 258
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "subtract implements method in BigMatrix; expected @Override",
        " Code": "    public BigMatrix subtract(BigMatrix m) throws IllegalArgumentException {",
        " Mark": "                     ^",
        " Line": 311
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "scalarAdd implements method in BigMatrix; expected @Override",
        " Code": "    public BigMatrix scalarAdd(BigDecimal d) {",
        " Mark": "                     ^",
        " Line": 363
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "scalarMultiply implements method in BigMatrix; expected @Override",
        " Code": "    public BigMatrix scalarMultiply(BigDecimal d) {",
        " Mark": "                     ^",
        " Line": 382
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "multiply implements method in BigMatrix; expected @Override",
        " Code": "    public BigMatrix multiply(BigMatrix m) throws IllegalArgumentException {",
        " Mark": "                     ^",
        " Line": 403
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "preMultiply implements method in BigMatrix; expected @Override",
        " Code": "    public BigMatrix preMultiply(BigMatrix m) throws IllegalArgumentException {",
        " Mark": "                     ^",
        " Line": 465
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getData implements method in BigMatrix; expected @Override",
        " Code": "    public BigDecimal[][] getData() {",
        " Mark": "                          ^",
        " Line": 476
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDataAsDoubleArray implements method in BigMatrix; expected @Override",
        " Code": "    public double[][] getDataAsDoubleArray() {",
        " Mark": "                      ^",
        " Line": 488
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRoundingMode implements method in BigMatrix; expected @Override",
        " Code": "    public int getRoundingMode() {",
        " Mark": "               ^",
        " Line": 517
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getNorm implements method in BigMatrix; expected @Override",
        " Code": "    public BigDecimal getNorm() {",
        " Mark": "                      ^",
        " Line": 555
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getSubMatrix implements method in BigMatrix; expected @Override",
        " Code": "    public BigMatrix getSubMatrix(int startRow, int endRow,",
        " Mark": "                     ^",
        " Line": 579
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getSubMatrix implements method in BigMatrix; expected @Override",
        " Code": "    public BigMatrix getSubMatrix(int[] selectedRows, int[] selectedColumns)",
        " Mark": "                     ^",
        " Line": 609
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRowMatrix implements method in BigMatrix; expected @Override",
        " Code": "    public BigMatrix getRowMatrix(int row) throws MatrixIndexException {",
        " Mark": "                     ^",
        " Line": 705
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getColumnMatrix implements method in BigMatrix; expected @Override",
        " Code": "    public BigMatrix getColumnMatrix(int column) throws MatrixIndexException {",
        " Mark": "                     ^",
        " Line": 723
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRow implements method in BigMatrix; expected @Override",
        " Code": "    public BigDecimal[] getRow(int row) throws MatrixIndexException {",
        " Mark": "                        ^",
        " Line": 745
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRowAsDoubleArray implements method in BigMatrix; expected @Override",
        " Code": "    public double[] getRowAsDoubleArray(int row) throws MatrixIndexException {",
        " Mark": "                    ^",
        " Line": 766
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getColumn implements method in BigMatrix; expected @Override",
        " Code": "    public BigDecimal[] getColumn(int col) throws MatrixIndexException {",
        " Mark": "                        ^",
        " Line": 788
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getColumnAsDoubleArray implements method in BigMatrix; expected @Override",
        " Code": "    public double[] getColumnAsDoubleArray(int col) throws MatrixIndexException {",
        " Mark": "                    ^",
        " Line": 811
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getEntry implements method in BigMatrix; expected @Override",
        " Code": "    public BigDecimal getEntry(int row, int column)",
        " Mark": "                      ^",
        " Line": 838
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getEntryAsDouble implements method in BigMatrix; expected @Override",
        " Code": "    public double getEntryAsDouble(int row, int column) throws MatrixIndexException {",
        " Mark": "                  ^",
        " Line": 863
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "transpose implements method in BigMatrix; expected @Override",
        " Code": "    public BigMatrix transpose() {",
        " Mark": "                     ^",
        " Line": 872
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "inverse implements method in BigMatrix; expected @Override",
        " Code": "    public BigMatrix inverse() throws InvalidMatrixException {",
        " Mark": "                     ^",
        " Line": 891
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDeterminant implements method in BigMatrix; expected @Override",
        " Code": "    public BigDecimal getDeterminant() throws InvalidMatrixException {",
        " Mark": "                      ^",
        " Line": 901
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isSquare implements method in BigMatrix; expected @Override",
        " Code": "    public boolean isSquare() {",
        " Mark": "                   ^",
        " Line": 920
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isSingular implements method in BigMatrix; expected @Override",
        " Code": "    public boolean isSingular() {",
        " Mark": "                   ^",
        " Line": 928
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRowDimension implements method in BigMatrix; expected @Override",
        " Code": "    public int getRowDimension() {",
        " Mark": "               ^",
        " Line": 946
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getColumnDimension implements method in BigMatrix; expected @Override",
        " Code": "    public int getColumnDimension() {",
        " Mark": "               ^",
        " Line": 955
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getTrace implements method in BigMatrix; expected @Override",
        " Code": "    public BigDecimal getTrace() throws IllegalArgumentException {",
        " Mark": "                      ^",
        " Line": 967
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "operate implements method in BigMatrix; expected @Override",
        " Code": "    public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException {",
        " Mark": "                        ^",
        " Line": 985
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "preMultiply implements method in BigMatrix; expected @Override",
        " Code": "    public BigDecimal[] preMultiply(BigDecimal[] v) throws IllegalArgumentException {",
        " Mark": "                        ^",
        " Line": 1024
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "solve implements method in BigMatrix; expected @Override",
        " Code": "    public BigDecimal[] solve(BigDecimal[] b) throws IllegalArgumentException, InvalidMatrixException {",
        " Mark": "                        ^",
        " Line": 1052
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "solve implements method in BigMatrix; expected @Override",
        " Code": "    public BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException  {",
        " Mark": "                     ^",
        " Line": 1096
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString overrides method in Object; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 1253
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "    public boolean equals(Object object) {",
        " Mark": "                   ^",
        " Line": 1284
    },
    {
        " Proj": "Math-98",
        "Class": "org.apache.commons.math.linear.BigMatrixImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Object; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 1313
    },
    {
        " Proj": "Math-99",
        "Class": "org.apache.commons.math.util.MathUtils",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "        return new Double(value).hashCode();",
        " Mark": "               ^",
        " Line": 606
    },
    {
        " Proj": "Mockito-1",
        "Class": "org.mockito.internal.invocation.InvocationMatcher",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString implements method in DescribedInvocation; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 55
    },
    {
        " Proj": "Mockito-1",
        "Class": "org.mockito.internal.invocation.InvocationMatcher",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLocation implements method in DescribedInvocation; expected @Override",
        " Code": "    public Location getLocation() {",
        " Mark": "                    ^",
        " Line": 116
    },
    {
        " Proj": "Mockito-1",
        "Class": "org.mockito.internal.invocation.InvocationMatcher",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "captureArgumentsFrom implements method in CapturesArgumensFromInvocation; expected @Override",
        " Code": "    public void captureArgumentsFrom(Invocation invocation) {",
        " Mark": "                ^",
        " Line": 120
    },
    {
        " Proj": "Mockito-10",
        "Class": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "answer implements method in Answer; expected @Override",
        " Code": "    public Object answer(InvocationOnMock invocation) throws Throwable {",
        " Mark": "                  ^",
        " Line": 47
    },
    {
        " Proj": "Mockito-10",
        "Class": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "answer implements method in Answer; expected @Override",
        " Code": "        public Object answer(InvocationOnMock invocation) throws Throwable {",
        " Mark": "                      ^",
        " Line": 149
    },
    {
        " Proj": "Mockito-11",
        "Class": "org.mockito.internal.creation.DelegatingMethod",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getExceptionTypes implements method in MockitoMethod; expected @Override",
        " Code": "    public Class<?>[] getExceptionTypes() {",
        " Mark": "                      ^",
        " Line": 21
    },
    {
        " Proj": "Mockito-11",
        "Class": "org.mockito.internal.creation.DelegatingMethod",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getJavaMethod implements method in MockitoMethod; expected @Override",
        " Code": "    public Method getJavaMethod() {",
        " Mark": "                  ^",
        " Line": 25
    },
    {
        " Proj": "Mockito-11",
        "Class": "org.mockito.internal.creation.DelegatingMethod",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getName implements method in MockitoMethod; expected @Override",
        " Code": "    public String getName() {",
        " Mark": "                  ^",
        " Line": 29
    },
    {
        " Proj": "Mockito-11",
        "Class": "org.mockito.internal.creation.DelegatingMethod",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getParameterTypes implements method in MockitoMethod; expected @Override",
        " Code": "    public Class<?>[] getParameterTypes() {",
        " Mark": "                      ^",
        " Line": 33
    },
    {
        " Proj": "Mockito-11",
        "Class": "org.mockito.internal.creation.DelegatingMethod",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getReturnType implements method in MockitoMethod; expected @Override",
        " Code": "    public Class<?> getReturnType() {",
        " Mark": "                    ^",
        " Line": 37
    },
    {
        " Proj": "Mockito-11",
        "Class": "org.mockito.internal.creation.DelegatingMethod",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isVarArgs implements method in MockitoMethod; expected @Override",
        " Code": "    public boolean isVarArgs() {",
        " Mark": "                   ^",
        " Line": 41
    },
    {
        " Proj": "Mockito-11",
        "Class": "org.mockito.internal.creation.DelegatingMethod",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isAbstract implements method in AbstractAwareMethod; expected @Override",
        " Code": "    public boolean isAbstract() {",
        " Mark": "                   ^",
        " Line": 45
    },
    {
        " Proj": "Mockito-12",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Mockito-13",
        "Class": "org.mockito.internal.MockHandler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "handle implements method in MockitoInvocationHandler; expected @Override",
        " Code": "    public Object handle(Invocation invocation) throws Throwable {",
        " Mark": "                  ^",
        " Line": 58
    },
    {
        " Proj": "Mockito-13",
        "Class": "org.mockito.internal.MockHandler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "voidMethodStubbable implements method in MockHandlerInterface; expected @Override",
        " Code": "    public VoidMethodStubbable<T> voidMethodStubbable(T mock) {",
        " Mark": "                                  ^",
        " Line": 110
    },
    {
        " Proj": "Mockito-13",
        "Class": "org.mockito.internal.MockHandler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMockSettings implements method in MockHandlerInterface; expected @Override",
        " Code": "    public MockSettingsImpl getMockSettings() {",
        " Mark": "                            ^",
        " Line": 114
    },
    {
        " Proj": "Mockito-13",
        "Class": "org.mockito.internal.MockHandler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setAnswersForStubbing implements method in MockHandlerInterface; expected @Override",
        " Code": "    public void setAnswersForStubbing(List<Answer> answers) {",
        " Mark": "                ^",
        " Line": 119
    },
    {
        " Proj": "Mockito-13",
        "Class": "org.mockito.internal.MockHandler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getInvocationContainer implements method in MockHandlerInterface; expected @Override",
        " Code": "    public InvocationContainer getInvocationContainer() {",
        " Mark": "                               ^",
        " Line": 123
    },
    {
        " Proj": "Mockito-14",
        "Class": "org.mockito.internal.MockHandler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "handle implements method in MockitoInvocationHandler; expected @Override",
        " Code": "    public Object handle(Invocation invocation) throws Throwable {",
        " Mark": "                  ^",
        " Line": 58
    },
    {
        " Proj": "Mockito-14",
        "Class": "org.mockito.internal.MockHandler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "voidMethodStubbable implements method in MockHandlerInterface; expected @Override",
        " Code": "    public VoidMethodStubbable<T> voidMethodStubbable(T mock) {",
        " Mark": "                                  ^",
        " Line": 106
    },
    {
        " Proj": "Mockito-14",
        "Class": "org.mockito.internal.MockHandler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMockSettings implements method in MockHandlerInterface; expected @Override",
        " Code": "    public MockSettingsImpl getMockSettings() {",
        " Mark": "                            ^",
        " Line": 110
    },
    {
        " Proj": "Mockito-14",
        "Class": "org.mockito.internal.MockHandler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setAnswersForStubbing implements method in MockHandlerInterface; expected @Override",
        " Code": "    public void setAnswersForStubbing(List<Answer> answers) {",
        " Mark": "                ^",
        " Line": 115
    },
    {
        " Proj": "Mockito-14",
        "Class": "org.mockito.internal.MockHandler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getInvocationContainer implements method in MockHandlerInterface; expected @Override",
        " Code": "    public InvocationContainer getInvocationContainer() {",
        " Mark": "                               ^",
        " Line": 119
    },
    {
        " Proj": "Mockito-15",
        "Class": "org.mockito.internal.configuration.injection.FinalMockCandidateFilter",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "filterCandidate implements method in MockCandidateFilter; expected @Override",
        " Code": "    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, final Object fieldInstance) {",
        " Mark": "                           ^",
        " Line": 19
    },
    {
        " Proj": "Mockito-15",
        "Class": "org.mockito.internal.configuration.injection.FinalMockCandidateFilter",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "thenInject implements method in OngoingInjecter; expected @Override",
        " Code": "                public boolean thenInject() {",
        " Mark": "                               ^",
        " Line": 24
    },
    {
        " Proj": "Mockito-15",
        "Class": "org.mockito.internal.configuration.injection.FinalMockCandidateFilter",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "thenInject implements method in OngoingInjecter; expected @Override",
        " Code": "            public boolean thenInject() {",
        " Mark": "                           ^",
        " Line": 38
    },
    {
        " Proj": "Mockito-16",
        "Class": "org.mockito.Mockito",
        " Type": "warning",
        "  Cat": "FunctionalInterfaceClash",
        "  Msg": "When passing lambda arguments to this function, callers will need a cast to disambiguate with: mock(Class<T>, Answer)",
        " Code": "    public static <T> T mock(Class<T> classToMock, ReturnValues returnValues) {",
        " Mark": "                        ^",
        " Line": 776
    },
    {
        " Proj": "Mockito-17",
        "Class": "org.mockito.internal.creation.MockSettingsImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "serializable implements method in MockSettings; expected @Override",
        " Code": "    public MockSettings serializable() {",
        " Mark": "                        ^",
        " Line": 22
    },
    {
        " Proj": "Mockito-17",
        "Class": "org.mockito.internal.creation.MockSettingsImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "extraInterfaces implements method in MockSettings; expected @Override",
        " Code": "    public MockSettings extraInterfaces(Class<?>... extraInterfaces) {",
        " Mark": "                        ^",
        " Line": 27
    },
    {
        " Proj": "Mockito-17",
        "Class": "org.mockito.internal.creation.MockSettingsImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "name implements method in MockSettings; expected @Override",
        " Code": "    public MockSettings name(String name) {",
        " Mark": "                        ^",
        " Line": 55
    },
    {
        " Proj": "Mockito-17",
        "Class": "org.mockito.internal.creation.MockSettingsImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "spiedInstance implements method in MockSettings; expected @Override",
        " Code": "    public MockSettings spiedInstance(Object spiedInstance) {",
        " Mark": "                        ^",
        " Line": 60
    },
    {
        " Proj": "Mockito-17",
        "Class": "org.mockito.internal.creation.MockSettingsImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "defaultAnswer implements method in MockSettings; expected @Override",
        " Code": "    public MockSettings defaultAnswer(Answer defaultAnswer) {",
        " Mark": "                        ^",
        " Line": 66
    },
    {
        " Proj": "Mockito-18",
        "Class": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "answer implements method in Answer; expected @Override",
        " Code": "    public Object answer(InvocationOnMock invocation) {",
        " Mark": "                  ^",
        " Line": 62
    },
    {
        " Proj": "Mockito-19",
        "Class": "org.mockito.internal.configuration.injection.filter.TypeBasedCandidateFilter",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "filterCandidate implements method in MockCandidateFilter; expected @Override",
        " Code": "    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {",
        " Mark": "                           ^",
        " Line": 20
    },
    {
        " Proj": "Mockito-19",
        "Class": "org.mockito.internal.configuration.injection.filter.FinalMockCandidateFilter",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "filterCandidate implements method in MockCandidateFilter; expected @Override",
        " Code": "    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {",
        " Mark": "                           ^",
        " Line": 24
    },
    {
        " Proj": "Mockito-19",
        "Class": "org.mockito.internal.configuration.injection.filter.FinalMockCandidateFilter",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "thenInject implements method in OngoingInjecter; expected @Override",
        " Code": "                public Object thenInject() {",
        " Mark": "                              ^",
        " Line": 29
    },
    {
        " Proj": "Mockito-19",
        "Class": "org.mockito.internal.configuration.injection.filter.FinalMockCandidateFilter",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "thenInject implements method in OngoingInjecter; expected @Override",
        " Code": "            public Object thenInject() {",
        " Mark": "                          ^",
        " Line": 43
    },
    {
        " Proj": "Mockito-19",
        "Class": "org.mockito.internal.configuration.injection.filter.NameBasedCandidateFilter",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "filterCandidate implements method in MockCandidateFilter; expected @Override",
        " Code": "\tpublic OngoingInjecter filterCandidate(Collection<Object> mocks,",
        " Mark": "\t                       ^",
        " Line": 22
    },
    {
        " Proj": "Mockito-19",
        "Class": "org.mockito.internal.configuration.injection.filter.NameBasedCandidateFilter",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "thenInject implements method in OngoingInjecter; expected @Override",
        " Code": "\t\t\t\t\t\tpublic Object thenInject() {",
        " Mark": "\t\t\t\t\t\t              ^",
        " Line": 52
    },
    {
        " Proj": "Mockito-19",
        "Class": "org.mockito.internal.configuration.injection.PropertyAndSetterInjection",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isOut implements method in Filter; expected @Override",
        " Code": "        public boolean isOut(Field object) {",
        " Mark": "                       ^",
        " Line": 65
    },
    {
        " Proj": "Mockito-19",
        "Class": "org.mockito.internal.configuration.injection.PropertyAndSetterInjection",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "processInjection implements method in MockInjectionStrategy; expected @Override",
        " Code": "    public boolean processInjection(Field injectMocksField, Object injectMocksFieldOwner, Set<Object> mockCandidates) {",
        " Mark": "                   ^",
        " Line": 71
    },
    {
        " Proj": "Mockito-2",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Mockito-20",
        "Class": "org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "createMock implements method in MockMaker; expected @Override",
        " Code": "    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {",
        " Mark": "                 ^",
        " Line": 24
    },
    {
        " Proj": "Mockito-20",
        "Class": "org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getHandler implements method in MockMaker; expected @Override",
        " Code": "    public MockHandler getHandler(Object mock) {",
        " Mark": "                       ^",
        " Line": 72
    },
    {
        " Proj": "Mockito-20",
        "Class": "org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "resetMock implements method in MockMaker; expected @Override",
        " Code": "    public void resetMock(Object mock, MockHandler newHandler, MockCreationSettings settings) {",
        " Mark": "                ^",
        " Line": 79
    },
    {
        " Proj": "Mockito-21",
        "Class": "org.mockito.internal.creation.instance.ConstructorInstantiator",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "newInstance implements method in Instantiator; expected @Override",
        " Code": "    public <T> T newInstance(Class<T> cls) {",
        " Mark": "                 ^",
        " Line": 13
    },
    {
        " Proj": "Mockito-21",
        "Class": "org.mockito.internal.creation.instance.ConstructorInstantiator",
        " Type": "warning",
        "  Cat": "ClassNewInstance",
        "  Msg": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
        " Code": "            return cls.newInstance();",
        " Mark": "                                  ^",
        " Line": 55
    },
    {
        " Proj": "Mockito-22",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Mockito-23",
        "Class": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "answer implements method in Answer; expected @Override",
        " Code": "    public Object answer(InvocationOnMock invocation) throws Throwable {",
        " Mark": "                  ^",
        " Line": 47
    },
    {
        " Proj": "Mockito-23",
        "Class": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "answer implements method in Answer; expected @Override",
        " Code": "            public Object answer(InvocationOnMock invocation) throws Throwable {",
        " Mark": "                          ^",
        " Line": 128
    },
    {
        " Proj": "Mockito-23",
        "Class": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs",
        " Type": "warning",
        "  Cat": "ClassCanBeStatic",
        "  Msg": "Inner class is non-static but does not reference enclosing class",
        " Code": "\tabstract class SerializableAnswer implements Answer<Object>, Serializable {",
        " Mark": "\t         ^",
        " Line": 136
    },
    {
        " Proj": "Mockito-24",
        "Class": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "answer implements method in Answer; expected @Override",
        " Code": "    public Object answer(InvocationOnMock invocation) {",
        " Mark": "                  ^",
        " Line": 63
    },
    {
        " Proj": "Mockito-25",
        "Class": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "answer implements method in Answer; expected @Override",
        " Code": "    public Object answer(InvocationOnMock invocation) throws Throwable {",
        " Mark": "                  ^",
        " Line": 47
    },
    {
        " Proj": "Mockito-25",
        "Class": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "answer implements method in Answer; expected @Override",
        " Code": "            public Object answer(InvocationOnMock invocation) throws Throwable {",
        " Mark": "                          ^",
        " Line": 109
    },
    {
        " Proj": "Mockito-26",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Mockito-27",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Mockito-28",
        "Class": "org.mockito.internal.configuration.DefaultInjectionEngine",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compare implements method in Comparator; expected @Override",
        " Code": "        public int compare(Field field1, Field field2) {",
        " Mark": "                   ^",
        " Line": 30
    },
    {
        " Proj": "Mockito-29",
        "Class": "org.mockito.internal.matchers.Same",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "matches implements method in ArgumentMatcher; expected @Override",
        " Code": "    public boolean matches(Object actual) {",
        " Mark": "                   ^",
        " Line": 22
    },
    {
        " Proj": "Mockito-29",
        "Class": "org.mockito.internal.matchers.Same",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "describeTo overrides method in ArgumentMatcher; expected @Override",
        " Code": "    public void describeTo(Description description) {",
        " Mark": "                ^",
        " Line": 26
    },
    {
        " Proj": "Mockito-3",
        "Class": "org.mockito.internal.invocation.InvocationMatcher",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString implements method in DescribedInvocation; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 53
    },
    {
        " Proj": "Mockito-3",
        "Class": "org.mockito.internal.invocation.InvocationMatcher",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLocation implements method in DescribedInvocation; expected @Override",
        " Code": "    public Location getLocation() {",
        " Mark": "                    ^",
        " Line": 114
    },
    {
        " Proj": "Mockito-3",
        "Class": "org.mockito.internal.invocation.InvocationMatcher",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "captureArgumentsFrom implements method in CapturesArgumensFromInvocation; expected @Override",
        " Code": "    public void captureArgumentsFrom(Invocation invocation) {",
        " Mark": "                ^",
        " Line": 118
    },
    {
        " Proj": "Mockito-30",
        "Class": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNulls",
        " Type": "warning",
        "  Cat": "ClassCanBeStatic",
        "  Msg": "Inner class is non-static but does not reference enclosing class",
        " Code": "    private final class ThrowingInterceptor implements MethodInterceptor {",
        " Mark": "                  ^",
        " Line": 43
    },
    {
        " Proj": "Mockito-30",
        "Class": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNulls",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "intercept implements method in MethodInterceptor; expected @Override",
        " Code": "        public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {",
        " Mark": "                      ^",
        " Line": 51
    },
    {
        " Proj": "Mockito-30",
        "Class": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNulls",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "answer implements method in Answer; expected @Override",
        " Code": "    public Object answer(final InvocationOnMock invocation) throws Throwable {",
        " Mark": "                  ^",
        " Line": 68
    },
    {
        " Proj": "Mockito-31",
        "Class": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNulls",
        " Type": "warning",
        "  Cat": "ClassCanBeStatic",
        "  Msg": "Inner class is non-static but does not reference enclosing class",
        " Code": "    private final class ThrowingInterceptor implements MethodInterceptor {",
        " Mark": "                  ^",
        " Line": 43
    },
    {
        " Proj": "Mockito-31",
        "Class": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNulls",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "intercept implements method in MethodInterceptor; expected @Override",
        " Code": "        public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {",
        " Mark": "                      ^",
        " Line": 51
    },
    {
        " Proj": "Mockito-31",
        "Class": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNulls",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "answer implements method in Answer; expected @Override",
        " Code": "    public Object answer(final InvocationOnMock invocation) throws Throwable {",
        " Mark": "                  ^",
        " Line": 68
    },
    {
        " Proj": "Mockito-32",
        "Class": "org.mockito.internal.configuration.SpyAnnotationEngine",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "process implements method in AnnotationEngine; expected @Override",
        " Code": "    public void process(Class<?> context, Object testClass) {",
        " Mark": "                ^",
        " Line": 29
    },
    {
        " Proj": "Mockito-32",
        "Class": "org.mockito.internal.configuration.SpyAnnotationEngine",
        " Type": "error",
        "  Cat": "GetClassOnClass",
        "  Msg": "Calling getClass() on an object of type Class returns the Class object for java.lang.Class; you probably meant to operate on the object directly",
        " Code": "                new Reporter().unsupportedCombinationOfAnnotations(annotation.getSimpleName(), annotation.getClass().getSimpleName());",
        " Mark": "                                                                                                                  ^",
        " Line": 68
    },
    {
        " Proj": "Mockito-33",
        "Class": "org.mockito.internal.invocation.InvocationMatcher",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString implements method in PrintableInvocation; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 52
    },
    {
        " Proj": "Mockito-33",
        "Class": "org.mockito.internal.invocation.InvocationMatcher",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLocation implements method in PrintableInvocation; expected @Override",
        " Code": "    public Location getLocation() {",
        " Mark": "                    ^",
        " Line": 113
    },
    {
        " Proj": "Mockito-33",
        "Class": "org.mockito.internal.invocation.InvocationMatcher",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString implements method in PrintingFriendlyInvocation; expected @Override",
        " Code": "    public String toString(PrintSettings printSettings) {",
        " Mark": "                  ^",
        " Line": 117
    },
    {
        " Proj": "Mockito-33",
        "Class": "org.mockito.internal.invocation.InvocationMatcher",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "captureArgumentsFrom implements method in CapturesArgumensFromInvocation; expected @Override",
        " Code": "    public void captureArgumentsFrom(Invocation i) {",
        " Mark": "                ^",
        " Line": 121
    },
    {
        " Proj": "Mockito-34",
        "Class": "org.mockito.internal.invocation.InvocationMatcher",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString implements method in PrintableInvocation; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 51
    },
    {
        " Proj": "Mockito-34",
        "Class": "org.mockito.internal.invocation.InvocationMatcher",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLocation implements method in PrintableInvocation; expected @Override",
        " Code": "    public Location getLocation() {",
        " Mark": "                    ^",
        " Line": 95
    },
    {
        " Proj": "Mockito-34",
        "Class": "org.mockito.internal.invocation.InvocationMatcher",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString implements method in PrintingFriendlyInvocation; expected @Override",
        " Code": "    public String toString(PrintSettings printSettings) {",
        " Mark": "                  ^",
        " Line": 99
    },
    {
        " Proj": "Mockito-34",
        "Class": "org.mockito.internal.invocation.InvocationMatcher",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "captureArgumentsFrom implements method in CapturesArgumensFromInvocation; expected @Override",
        " Code": "    public void captureArgumentsFrom(Invocation i) {",
        " Mark": "                ^",
        " Line": 103
    },
    {
        " Proj": "Mockito-35",
        "Class": "org.mockito.Matchers",
        " Type": "warning",
        "  Cat": "TypeParameterUnusedInFormals",
        "  Msg": "Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.",
        " Code": "    public static <T> T anyObject() {",
        " Mark": "                        ^",
        " Line": 192
    },
    {
        " Proj": "Mockito-35",
        "Class": "org.mockito.Matchers",
        " Type": "warning",
        "  Cat": "TypeParameterUnusedInFormals",
        "  Msg": "Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.",
        " Code": "    public static <T> T anyVararg() {",
        " Mark": "                        ^",
        " Line": 220
    },
    {
        " Proj": "Mockito-35",
        "Class": "org.mockito.Matchers",
        " Type": "warning",
        "  Cat": "TypeParameterUnusedInFormals",
        "  Msg": "Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.",
        " Code": "    public static <T> T any() {",
        " Mark": "                        ^",
        " Line": 249
    },
    {
        " Proj": "Mockito-36",
        "Class": "org.mockito.internal.invocation.Invocation",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "        if (!isVarArgs || args[args.length - 1] != null && !args[args.length - 1].getClass().isArray()) {",
        " Mark": "                                                        ^",
        " Line": 58
    },
    {
        " Proj": "Mockito-36",
        "Class": "org.mockito.internal.invocation.Invocation",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMock implements method in InvocationOnMock; expected @Override",
        " Code": "    public Object getMock() {",
        " Mark": "                  ^",
        " Line": 77
    },
    {
        " Proj": "Mockito-36",
        "Class": "org.mockito.internal.invocation.Invocation",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMethod implements method in InvocationOnMock; expected @Override",
        " Code": "    public MockitoMethod getMethod() {",
        " Mark": "                         ^",
        " Line": 81
    },
    {
        " Proj": "Mockito-36",
        "Class": "org.mockito.internal.invocation.Invocation",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getArguments implements method in InvocationOnMock; expected @Override",
        " Code": "    public Object[] getArguments() {",
        " Mark": "                    ^",
        " Line": 85
    },
    {
        " Proj": "Mockito-36",
        "Class": "org.mockito.internal.invocation.Invocation",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "    public boolean equals(Object o) {",
        " Mark": "                   ^",
        " Line": 101
    },
    {
        " Proj": "Mockito-36",
        "Class": "org.mockito.internal.invocation.Invocation",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Object; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 115
    },
    {
        " Proj": "Mockito-36",
        "Class": "org.mockito.internal.invocation.Invocation",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString implements method in PrintableInvocation; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 119
    },
    {
        " Proj": "Mockito-36",
        "Class": "org.mockito.internal.invocation.Invocation",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLocation implements method in PrintableInvocation; expected @Override",
        " Code": "    public Location getLocation() {",
        " Mark": "                    ^",
        " Line": 190
    },
    {
        " Proj": "Mockito-36",
        "Class": "org.mockito.internal.invocation.Invocation",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "callRealMethod implements method in InvocationOnMock; expected @Override",
        " Code": "    public Object callRealMethod() throws Throwable {",
        " Mark": "                  ^",
        " Line": 202
    },
    {
        " Proj": "Mockito-36",
        "Class": "org.mockito.internal.invocation.Invocation",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString implements method in PrintingFriendlyInvocation; expected @Override",
        " Code": "    public String toString(PrintSettings printSettings) {",
        " Mark": "                  ^",
        " Line": 209
    },
    {
        " Proj": "Mockito-37",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Mockito-38",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Mockito-4",
        "Class": "",
        " Type": "",
        "  Cat": "NO_WARNING",
        "  Msg": "",
        " Code": "",
        " Mark": "",
        " Line": -1
    },
    {
        " Proj": "Mockito-5",
        "Class": "org.mockito.internal.verification.VerificationOverTimeImpl",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "verify implements method in VerificationMode; expected @Override",
        " Code": "    public void verify(VerificationData data) {",
        " Mark": "                ^",
        " Line": 75
    },
    {
        " Proj": "Mockito-6",
        "Class": "org.mockito.Matchers",
        " Type": "warning",
        "  Cat": "TypeParameterUnusedInFormals",
        "  Msg": "Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.",
        " Code": "    public static <T> T anyObject() {",
        " Mark": "                        ^",
        " Line": 243
    },
    {
        " Proj": "Mockito-6",
        "Class": "org.mockito.Matchers",
        " Type": "warning",
        "  Cat": "TypeParameterUnusedInFormals",
        "  Msg": "Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.",
        " Code": "    public static <T> T anyVararg() {",
        " Mark": "                        ^",
        " Line": 270
    },
    {
        " Proj": "Mockito-6",
        "Class": "org.mockito.Matchers",
        " Type": "warning",
        "  Cat": "TypeParameterUnusedInFormals",
        "  Msg": "Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.",
        " Code": "    public static <T> T any() {",
        " Mark": "                        ^",
        " Line": 308
    },
    {
        " Proj": "Mockito-7",
        "Class": "org.mockito.internal.util.reflection.GenericMetadataSupport",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "rawExtraInterfaces overrides method in GenericMetadataSupport; expected @Override",
        " Code": "        public Class<?>[] rawExtraInterfaces() {",
        " Mark": "                          ^",
        " Line": 430
    },
    {
        " Proj": "Mockito-7",
        "Class": "org.mockito.internal.util.reflection.GenericMetadataSupport",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "firstBound implements method in BoundedType; expected @Override",
        " Code": "        public Type firstBound() {",
        " Mark": "                    ^",
        " Line": 527
    },
    {
        " Proj": "Mockito-7",
        "Class": "org.mockito.internal.util.reflection.GenericMetadataSupport",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "interfaceBounds implements method in BoundedType; expected @Override",
        " Code": "        public Type[] interfaceBounds() {",
        " Mark": "                      ^",
        " Line": 538
    },
    {
        " Proj": "Mockito-7",
        "Class": "org.mockito.internal.util.reflection.GenericMetadataSupport",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "firstBound implements method in BoundedType; expected @Override",
        " Code": "        public Type firstBound() {",
        " Mark": "                    ^",
        " Line": 587
    },
    {
        " Proj": "Mockito-7",
        "Class": "org.mockito.internal.util.reflection.GenericMetadataSupport",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "interfaceBounds implements method in BoundedType; expected @Override",
        " Code": "        public Type[] interfaceBounds() {",
        " Mark": "                      ^",
        " Line": 597
    },
    {
        " Proj": "Mockito-8",
        "Class": "org.mockito.internal.util.reflection.GenericMetadataSupport",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "rawExtraInterfaces overrides method in GenericMetadataSupport; expected @Override",
        " Code": "        public Class<?>[] rawExtraInterfaces() {",
        " Mark": "                          ^",
        " Line": 429
    },
    {
        " Proj": "Mockito-8",
        "Class": "org.mockito.internal.util.reflection.GenericMetadataSupport",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "firstBound implements method in BoundedType; expected @Override",
        " Code": "        public Type firstBound() {",
        " Mark": "                    ^",
        " Line": 526
    },
    {
        " Proj": "Mockito-8",
        "Class": "org.mockito.internal.util.reflection.GenericMetadataSupport",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "interfaceBounds implements method in BoundedType; expected @Override",
        " Code": "        public Type[] interfaceBounds() {",
        " Mark": "                      ^",
        " Line": 537
    },
    {
        " Proj": "Mockito-8",
        "Class": "org.mockito.internal.util.reflection.GenericMetadataSupport",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "firstBound implements method in BoundedType; expected @Override",
        " Code": "        public Type firstBound() {",
        " Mark": "                    ^",
        " Line": 586
    },
    {
        " Proj": "Mockito-8",
        "Class": "org.mockito.internal.util.reflection.GenericMetadataSupport",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "interfaceBounds implements method in BoundedType; expected @Override",
        " Code": "        public Type[] interfaceBounds() {",
        " Mark": "                      ^",
        " Line": 596
    },
    {
        " Proj": "Mockito-9",
        "Class": "org.mockito.internal.stubbing.answers.CallsRealMethods",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "answer implements method in Answer; expected @Override",
        " Code": "    public Object answer(InvocationOnMock invocation) throws Throwable {",
        " Mark": "                  ^",
        " Line": 37
    },
    {
        " Proj": "Time-1",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "size implements method in ReadablePartial; expected @Override",
        " Code": "    public int size() {",
        " Mark": "               ^",
        " Line": 319
    },
    {
        " Proj": "Time-1",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getChronology implements method in ReadablePartial; expected @Override",
        " Code": "    public Chronology getChronology() {",
        " Mark": "                      ^",
        " Line": 331
    },
    {
        " Proj": "Time-1",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getField implements method in AbstractPartial; expected @Override",
        " Code": "    protected DateTimeField getField(int index, Chronology chrono) {",
        " Mark": "                            ^",
        " Line": 343
    },
    {
        " Proj": "Time-1",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getFieldType overrides method in AbstractPartial; expected @Override",
        " Code": "    public DateTimeFieldType getFieldType(int index) {",
        " Mark": "                             ^",
        " Line": 354
    },
    {
        " Proj": "Time-1",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getFieldTypes overrides method in AbstractPartial; expected @Override",
        " Code": "    public DateTimeFieldType[] getFieldTypes() {",
        " Mark": "                               ^",
        " Line": 366
    },
    {
        " Proj": "Time-1",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getValue implements method in ReadablePartial; expected @Override",
        " Code": "    public int getValue(int index) {",
        " Mark": "               ^",
        " Line": 378
    },
    {
        " Proj": "Time-1",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getValues overrides method in AbstractPartial; expected @Override",
        " Code": "    public int[] getValues() {",
        " Mark": "                 ^",
        " Line": 391
    },
    {
        " Proj": "Time-1",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString implements method in ReadablePartial; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 751
    },
    {
        " Proj": "Time-1",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getField implements method in AbstractPartialFieldProperty; expected @Override",
        " Code": "        public DateTimeField getField() {",
        " Mark": "                             ^",
        " Line": 857
    },
    {
        " Proj": "Time-1",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getReadablePartial implements method in AbstractPartialFieldProperty; expected @Override",
        " Code": "        protected ReadablePartial getReadablePartial() {",
        " Mark": "                                  ^",
        " Line": 866
    },
    {
        " Proj": "Time-1",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "get implements method in AbstractPartialFieldProperty; expected @Override",
        " Code": "        public int get() {",
        " Mark": "                   ^",
        " Line": 884
    },
    {
        " Proj": "Time-1",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getType implements method in DurationField; expected @Override",
        " Code": "    public final DurationFieldType getType() {",
        " Mark": "                                   ^",
        " Line": 78
    },
    {
        " Proj": "Time-1",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getName implements method in DurationField; expected @Override",
        " Code": "    public String getName() {",
        " Mark": "                  ^",
        " Line": 82
    },
    {
        " Proj": "Time-1",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isSupported implements method in DurationField; expected @Override",
        " Code": "    public boolean isSupported() {",
        " Mark": "                   ^",
        " Line": 91
    },
    {
        " Proj": "Time-1",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isPrecise implements method in DurationField; expected @Override",
        " Code": "    public boolean isPrecise() {",
        " Mark": "                   ^",
        " Line": 100
    },
    {
        " Proj": "Time-1",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getValue implements method in DurationField; expected @Override",
        " Code": "    public int getValue(long duration) {",
        " Mark": "               ^",
        " Line": 109
    },
    {
        " Proj": "Time-1",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getValueAsLong implements method in DurationField; expected @Override",
        " Code": "    public long getValueAsLong(long duration) {",
        " Mark": "                ^",
        " Line": 118
    },
    {
        " Proj": "Time-1",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getValue implements method in DurationField; expected @Override",
        " Code": "    public int getValue(long duration, long instant) {",
        " Mark": "               ^",
        " Line": 127
    },
    {
        " Proj": "Time-1",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getValueAsLong implements method in DurationField; expected @Override",
        " Code": "    public long getValueAsLong(long duration, long instant) {",
        " Mark": "                ^",
        " Line": 136
    },
    {
        " Proj": "Time-1",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMillis implements method in DurationField; expected @Override",
        " Code": "    public long getMillis(int value) {",
        " Mark": "                ^",
        " Line": 145
    },
    {
        " Proj": "Time-1",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMillis implements method in DurationField; expected @Override",
        " Code": "    public long getMillis(long value) {",
        " Mark": "                ^",
        " Line": 154
    },
    {
        " Proj": "Time-1",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMillis implements method in DurationField; expected @Override",
        " Code": "    public long getMillis(int value, long instant) {",
        " Mark": "                ^",
        " Line": 163
    },
    {
        " Proj": "Time-1",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMillis implements method in DurationField; expected @Override",
        " Code": "    public long getMillis(long value, long instant) {",
        " Mark": "                ^",
        " Line": 172
    },
    {
        " Proj": "Time-1",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in DurationField; expected @Override",
        " Code": "    public long add(long instant, int value) {",
        " Mark": "                ^",
        " Line": 181
    },
    {
        " Proj": "Time-1",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in DurationField; expected @Override",
        " Code": "    public long add(long instant, long value) {",
        " Mark": "                ^",
        " Line": 190
    },
    {
        " Proj": "Time-1",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDifference implements method in DurationField; expected @Override",
        " Code": "    public int getDifference(long minuendInstant, long subtrahendInstant) {",
        " Mark": "               ^",
        " Line": 199
    },
    {
        " Proj": "Time-1",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDifferenceAsLong implements method in DurationField; expected @Override",
        " Code": "    public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {",
        " Mark": "                ^",
        " Line": 208
    },
    {
        " Proj": "Time-1",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getUnitMillis implements method in DurationField; expected @Override",
        " Code": "    public long getUnitMillis() {",
        " Mark": "                ^",
        " Line": 217
    },
    {
        " Proj": "Time-1",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compareTo implements method in Comparable; expected @Override",
        " Code": "    public int compareTo(DurationField durationField) {",
        " Mark": "               ^",
        " Line": 226
    },
    {
        " Proj": "Time-1",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 237
    },
    {
        " Proj": "Time-1",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Object; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 255
    },
    {
        " Proj": "Time-1",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString implements method in DurationField; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 264
    },
    {
        " Proj": "Time-10",
        "Class": "org.joda.time.base.BaseSingleFieldPeriod",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getPeriodType implements method in ReadablePeriod; expected @Override",
        " Code": "    public abstract PeriodType getPeriodType();",
        " Mark": "                               ^",
        " Line": 194
    },
    {
        " Proj": "Time-10",
        "Class": "org.joda.time.base.BaseSingleFieldPeriod",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "size implements method in ReadablePeriod; expected @Override",
        " Code": "    public int size() {",
        " Mark": "               ^",
        " Line": 202
    },
    {
        " Proj": "Time-10",
        "Class": "org.joda.time.base.BaseSingleFieldPeriod",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getFieldType implements method in ReadablePeriod; expected @Override",
        " Code": "    public DurationFieldType getFieldType(int index) {",
        " Mark": "                             ^",
        " Line": 216
    },
    {
        " Proj": "Time-10",
        "Class": "org.joda.time.base.BaseSingleFieldPeriod",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getValue implements method in ReadablePeriod; expected @Override",
        " Code": "    public int getValue(int index) {",
        " Mark": "               ^",
        " Line": 232
    },
    {
        " Proj": "Time-10",
        "Class": "org.joda.time.base.BaseSingleFieldPeriod",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "get implements method in ReadablePeriod; expected @Override",
        " Code": "    public int get(DurationFieldType type) {",
        " Mark": "               ^",
        " Line": 248
    },
    {
        " Proj": "Time-10",
        "Class": "org.joda.time.base.BaseSingleFieldPeriod",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isSupported implements method in ReadablePeriod; expected @Override",
        " Code": "    public boolean isSupported(DurationFieldType type) {",
        " Mark": "                   ^",
        " Line": 261
    },
    {
        " Proj": "Time-10",
        "Class": "org.joda.time.base.BaseSingleFieldPeriod",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toPeriod implements method in ReadablePeriod; expected @Override",
        " Code": "    public Period toPeriod() {",
        " Mark": "                  ^",
        " Line": 272
    },
    {
        " Proj": "Time-10",
        "Class": "org.joda.time.base.BaseSingleFieldPeriod",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toMutablePeriod implements method in ReadablePeriod; expected @Override",
        " Code": "    public MutablePeriod toMutablePeriod() {",
        " Mark": "                         ^",
        " Line": 284
    },
    {
        " Proj": "Time-10",
        "Class": "org.joda.time.base.BaseSingleFieldPeriod",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals implements method in ReadablePeriod; expected @Override",
        " Code": "    public boolean equals(Object period) {",
        " Mark": "                   ^",
        " Line": 300
    },
    {
        " Proj": "Time-10",
        "Class": "org.joda.time.base.BaseSingleFieldPeriod",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        return (other.getPeriodType() == getPeriodType() && other.getValue(0) == getValue());",
        " Mark": "                                      ^",
        " Line": 308
    },
    {
        " Proj": "Time-10",
        "Class": "org.joda.time.base.BaseSingleFieldPeriod",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode implements method in ReadablePeriod; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 316
    },
    {
        " Proj": "Time-10",
        "Class": "org.joda.time.base.BaseSingleFieldPeriod",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compareTo implements method in Comparable; expected @Override",
        " Code": "    public int compareTo(BaseSingleFieldPeriod other) {",
        " Mark": "               ^",
        " Line": 331
    },
    {
        " Proj": "Time-11",
        "Class": "org.joda.time.tz.ZoneInfoCompiler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "initialValue overrides method in ThreadLocal; expected @Override",
        " Code": "        protected Boolean initialValue() {",
        " Mark": "                          ^",
        " Line": 69
    },
    {
        " Proj": "Time-11",
        "Class": "org.joda.time.tz.ZoneInfoCompiler",
        " Type": "warning",
        "  Cat": "DefaultCharset",
        "  Msg": "Implicit use of the platform default charset, which can result in e.g. non-ASCII characters being silently replaced with '?' in many environments",
        " Code": "                BufferedReader in = new BufferedReader(new FileReader(sources[i]));",
        " Mark": "                                                       ^",
        " Line": 370
    },
    {
        " Proj": "Time-11",
        "Class": "org.joda.time.tz.ZoneInfoCompiler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString overrides method in Object; expected @Override",
        " Code": "        public String toString() {",
        " Mark": "                      ^",
        " Line": 635
    },
    {
        " Proj": "Time-11",
        "Class": "org.joda.time.tz.ZoneInfoCompiler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString overrides method in Object; expected @Override",
        " Code": "        public String toString() {",
        " Mark": "                      ^",
        " Line": 702
    },
    {
        " Proj": "Time-11",
        "Class": "org.joda.time.tz.ZoneInfoCompiler",
        " Type": "warning",
        "  Cat": "AmbiguousMethodReference",
        "  Msg": "This method's reference is ambiguous, its name and functional interface type are the same as: addToBuilder(Zone, DateTimeZoneBuilder, Map<String, RuleSet>)",
        " Code": "        public void addToBuilder(DateTimeZoneBuilder builder, Map<String, RuleSet> ruleSets) {",
        " Mark": "                    ^",
        " Line": 794
    },
    {
        " Proj": "Time-11",
        "Class": "org.joda.time.tz.ZoneInfoCompiler",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString overrides method in Object; expected @Override",
        " Code": "        public String toString() {",
        " Mark": "                      ^",
        " Line": 831
    },
    {
        " Proj": "Time-12",
        "Class": "org.joda.time.LocalDate",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "size implements method in ReadablePartial; expected @Override",
        " Code": "    public int size() {",
        " Mark": "               ^",
        " Line": 481
    },
    {
        " Proj": "Time-12",
        "Class": "org.joda.time.LocalDate",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getField implements method in AbstractPartial; expected @Override",
        " Code": "    protected DateTimeField getField(int index, Chronology chrono) {",
        " Mark": "                            ^",
        " Line": 494
    },
    {
        " Proj": "Time-12",
        "Class": "org.joda.time.LocalDate",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getValue implements method in ReadablePartial; expected @Override",
        " Code": "    public int getValue(int index) {",
        " Mark": "               ^",
        " Line": 519
    },
    {
        " Proj": "Time-12",
        "Class": "org.joda.time.LocalDate",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "get overrides method in AbstractPartial; expected @Override",
        " Code": "    public int get(DateTimeFieldType fieldType) {",
        " Mark": "               ^",
        " Line": 547
    },
    {
        " Proj": "Time-12",
        "Class": "org.joda.time.LocalDate",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isSupported overrides method in AbstractPartial; expected @Override",
        " Code": "    public boolean isSupported(DateTimeFieldType type) {",
        " Mark": "                   ^",
        " Line": 565
    },
    {
        " Proj": "Time-12",
        "Class": "org.joda.time.LocalDate",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLocalMillis implements method in BaseLocal; expected @Override",
        " Code": "    protected long getLocalMillis() {",
        " Mark": "                   ^",
        " Line": 605
    },
    {
        " Proj": "Time-12",
        "Class": "org.joda.time.LocalDate",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getChronology implements method in ReadablePartial; expected @Override",
        " Code": "    public Chronology getChronology() {",
        " Mark": "                      ^",
        " Line": 614
    },
    {
        " Proj": "Time-12",
        "Class": "org.joda.time.LocalDate",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in AbstractPartial; expected @Override",
        " Code": "    public boolean equals(Object partial) {",
        " Mark": "                   ^",
        " Line": 626
    },
    {
        " Proj": "Time-12",
        "Class": "org.joda.time.LocalDate",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in AbstractPartial; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 645
    },
    {
        " Proj": "Time-12",
        "Class": "org.joda.time.LocalDate",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compareTo overrides method in AbstractPartial; expected @Override",
        " Code": "    public int compareTo(ReadablePartial partial) {",
        " Mark": "               ^",
        " Line": 670
    },
    {
        " Proj": "Time-12",
        "Class": "org.joda.time.LocalDate",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString implements method in ReadablePartial; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 1810
    },
    {
        " Proj": "Time-12",
        "Class": "org.joda.time.LocalDate",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getField implements method in AbstractReadableInstantFieldProperty; expected @Override",
        " Code": "        public DateTimeField getField() {",
        " Mark": "                             ^",
        " Line": 1914
    },
    {
        " Proj": "Time-12",
        "Class": "org.joda.time.LocalDate",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMillis implements method in AbstractReadableInstantFieldProperty; expected @Override",
        " Code": "        protected long getMillis() {",
        " Mark": "                       ^",
        " Line": 1923
    },
    {
        " Proj": "Time-12",
        "Class": "org.joda.time.LocalDate",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getChronology overrides method in AbstractReadableInstantFieldProperty; expected @Override",
        " Code": "        protected Chronology getChronology() {",
        " Mark": "                             ^",
        " Line": 1933
    },
    {
        " Proj": "Time-12",
        "Class": "org.joda.time.LocalDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "size implements method in ReadablePartial; expected @Override",
        " Code": "    public int size() {",
        " Mark": "               ^",
        " Line": 534
    },
    {
        " Proj": "Time-12",
        "Class": "org.joda.time.LocalDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getField implements method in AbstractPartial; expected @Override",
        " Code": "    protected DateTimeField getField(int index, Chronology chrono) {",
        " Mark": "                            ^",
        " Line": 547
    },
    {
        " Proj": "Time-12",
        "Class": "org.joda.time.LocalDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getValue implements method in ReadablePartial; expected @Override",
        " Code": "    public int getValue(int index) {",
        " Mark": "               ^",
        " Line": 572
    },
    {
        " Proj": "Time-12",
        "Class": "org.joda.time.LocalDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "get overrides method in AbstractPartial; expected @Override",
        " Code": "    public int get(DateTimeFieldType type) {",
        " Mark": "               ^",
        " Line": 602
    },
    {
        " Proj": "Time-12",
        "Class": "org.joda.time.LocalDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isSupported overrides method in AbstractPartial; expected @Override",
        " Code": "    public boolean isSupported(DateTimeFieldType type) {",
        " Mark": "                   ^",
        " Line": 617
    },
    {
        " Proj": "Time-12",
        "Class": "org.joda.time.LocalDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLocalMillis implements method in BaseLocal; expected @Override",
        " Code": "    protected long getLocalMillis() {",
        " Mark": "                   ^",
        " Line": 646
    },
    {
        " Proj": "Time-12",
        "Class": "org.joda.time.LocalDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getChronology implements method in ReadablePartial; expected @Override",
        " Code": "    public Chronology getChronology() {",
        " Mark": "                      ^",
        " Line": 655
    },
    {
        " Proj": "Time-12",
        "Class": "org.joda.time.LocalDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in AbstractPartial; expected @Override",
        " Code": "    public boolean equals(Object partial) {",
        " Mark": "                   ^",
        " Line": 667
    },
    {
        " Proj": "Time-12",
        "Class": "org.joda.time.LocalDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compareTo overrides method in AbstractPartial; expected @Override",
        " Code": "    public int compareTo(ReadablePartial partial) {",
        " Mark": "               ^",
        " Line": 697
    },
    {
        " Proj": "Time-12",
        "Class": "org.joda.time.LocalDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString implements method in ReadablePartial; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 2021
    },
    {
        " Proj": "Time-12",
        "Class": "org.joda.time.LocalDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getField implements method in AbstractReadableInstantFieldProperty; expected @Override",
        " Code": "        public DateTimeField getField() {",
        " Mark": "                             ^",
        " Line": 2126
    },
    {
        " Proj": "Time-12",
        "Class": "org.joda.time.LocalDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMillis implements method in AbstractReadableInstantFieldProperty; expected @Override",
        " Code": "        protected long getMillis() {",
        " Mark": "                       ^",
        " Line": 2135
    },
    {
        " Proj": "Time-12",
        "Class": "org.joda.time.LocalDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getChronology overrides method in AbstractReadableInstantFieldProperty; expected @Override",
        " Code": "        protected Chronology getChronology() {",
        " Mark": "                             ^",
        " Line": 2145
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "calculatePrintedLength implements method in PeriodFieldAffix; expected @Override",
        " Code": "        public int calculatePrintedLength(int value) {",
        " Mark": "                   ^",
        " Line": 863
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in PeriodFieldAffix; expected @Override",
        " Code": "        public void printTo(StringBuffer buf, int value) {",
        " Mark": "                    ^",
        " Line": 867
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in PeriodFieldAffix; expected @Override",
        " Code": "        public void printTo(Writer out, int value) throws IOException {",
        " Mark": "                    ^",
        " Line": 871
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "parse implements method in PeriodFieldAffix; expected @Override",
        " Code": "        public int parse(String periodStr, int position) {",
        " Mark": "                   ^",
        " Line": 875
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "scan implements method in PeriodFieldAffix; expected @Override",
        " Code": "        public int scan(String periodStr, final int position) {",
        " Mark": "                   ^",
        " Line": 884
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "calculatePrintedLength implements method in PeriodFieldAffix; expected @Override",
        " Code": "        public int calculatePrintedLength(int value) {",
        " Mark": "                   ^",
        " Line": 921
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in PeriodFieldAffix; expected @Override",
        " Code": "        public void printTo(StringBuffer buf, int value) {",
        " Mark": "                    ^",
        " Line": 925
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in PeriodFieldAffix; expected @Override",
        " Code": "        public void printTo(Writer out, int value) throws IOException {",
        " Mark": "                    ^",
        " Line": 929
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "parse implements method in PeriodFieldAffix; expected @Override",
        " Code": "        public int parse(String periodStr, int position) {",
        " Mark": "                   ^",
        " Line": 933
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "scan implements method in PeriodFieldAffix; expected @Override",
        " Code": "        public int scan(String periodStr, final int position) {",
        " Mark": "                   ^",
        " Line": 956
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "calculatePrintedLength implements method in PeriodFieldAffix; expected @Override",
        " Code": "        public int calculatePrintedLength(int value) {",
        " Mark": "                   ^",
        " Line": 996
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in PeriodFieldAffix; expected @Override",
        " Code": "        public void printTo(StringBuffer buf, int value) {",
        " Mark": "                    ^",
        " Line": 1001
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in PeriodFieldAffix; expected @Override",
        " Code": "        public void printTo(Writer out, int value) throws IOException {",
        " Mark": "                    ^",
        " Line": 1006
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "parse implements method in PeriodFieldAffix; expected @Override",
        " Code": "        public int parse(String periodStr, int position) {",
        " Mark": "                   ^",
        " Line": 1011
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "scan implements method in PeriodFieldAffix; expected @Override",
        " Code": "        public int scan(String periodStr, final int position) {",
        " Mark": "                   ^",
        " Line": 1019
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "countFieldsToPrint implements method in PeriodPrinter; expected @Override",
        " Code": "        public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale) {",
        " Mark": "                   ^",
        " Line": 1078
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "calculatePrintedLength implements method in PeriodPrinter; expected @Override",
        " Code": "        public int calculatePrintedLength(ReadablePeriod period, Locale locale) {",
        " Mark": "                   ^",
        " Line": 1088
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in PeriodPrinter; expected @Override",
        " Code": "        public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {",
        " Mark": "                    ^",
        " Line": 1120
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in PeriodPrinter; expected @Override",
        " Code": "        public void printTo(Writer out, ReadablePeriod period, Locale locale) throws IOException {",
        " Mark": "                    ^",
        " Line": 1155
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "parseInto implements method in PeriodParser; expected @Override",
        " Code": "        public int parseInto(",
        " Mark": "                   ^",
        " Line": 1186
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "countFieldsToPrint implements method in PeriodPrinter; expected @Override",
        " Code": "        public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale) {",
        " Mark": "                   ^",
        " Line": 1552
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "calculatePrintedLength implements method in PeriodPrinter; expected @Override",
        " Code": "        public int calculatePrintedLength(ReadablePeriod period, Locale locale) {",
        " Mark": "                   ^",
        " Line": 1556
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in PeriodPrinter; expected @Override",
        " Code": "        public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {",
        " Mark": "                    ^",
        " Line": 1560
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in PeriodPrinter; expected @Override",
        " Code": "        public void printTo(Writer out, ReadablePeriod period, Locale locale) throws IOException {",
        " Mark": "                    ^",
        " Line": 1564
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "parseInto implements method in PeriodParser; expected @Override",
        " Code": "        public int parseInto(",
        " Mark": "                   ^",
        " Line": 1568
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "countFieldsToPrint implements method in PeriodPrinter; expected @Override",
        " Code": "        public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale) {",
        " Mark": "                   ^",
        " Line": 1628
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "calculatePrintedLength implements method in PeriodPrinter; expected @Override",
        " Code": "        public int calculatePrintedLength(ReadablePeriod period, Locale locale) {",
        " Mark": "                   ^",
        " Line": 1636
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in PeriodPrinter; expected @Override",
        " Code": "        public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {",
        " Mark": "                    ^",
        " Line": 1661
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in PeriodPrinter; expected @Override",
        " Code": "        public void printTo(Writer out, ReadablePeriod period, Locale locale) throws IOException {",
        " Mark": "                    ^",
        " Line": 1683
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "parseInto implements method in PeriodParser; expected @Override",
        " Code": "        public int parseInto(",
        " Mark": "                   ^",
        " Line": 1705
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "countFieldsToPrint implements method in PeriodPrinter; expected @Override",
        " Code": "        public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale) {",
        " Mark": "                   ^",
        " Line": 1791
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "calculatePrintedLength implements method in PeriodPrinter; expected @Override",
        " Code": "        public int calculatePrintedLength(ReadablePeriod period, Locale locale) {",
        " Mark": "                   ^",
        " Line": 1800
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in PeriodPrinter; expected @Override",
        " Code": "        public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {",
        " Mark": "                    ^",
        " Line": 1809
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in PeriodPrinter; expected @Override",
        " Code": "        public void printTo(Writer out, ReadablePeriod period, Locale locale) throws IOException {",
        " Mark": "                    ^",
        " Line": 1817
    },
    {
        " Proj": "Time-13",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "parseInto implements method in PeriodParser; expected @Override",
        " Code": "        public int parseInto(",
        " Mark": "                   ^",
        " Line": 1825
    },
    {
        " Proj": "Time-14",
        "Class": "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isLenient implements method in DateTimeField; expected @Override",
        " Code": "    public boolean isLenient() {",
        " Mark": "                   ^",
        " Line": 58
    },
    {
        " Proj": "Time-14",
        "Class": "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "get implements method in ImpreciseDateTimeField; expected @Override",
        " Code": "    public int get(long instant) {",
        " Mark": "               ^",
        " Line": 71
    },
    {
        " Proj": "Time-14",
        "Class": "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in ImpreciseDateTimeField; expected @Override",
        " Code": "    public long add(long instant, int months) {",
        " Mark": "                ^",
        " Line": 91
    },
    {
        " Proj": "Time-14",
        "Class": "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in ImpreciseDateTimeField; expected @Override",
        " Code": "    public long add(long instant, long months) {",
        " Mark": "                ^",
        " Line": 150
    },
    {
        " Proj": "Time-14",
        "Class": "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
        " Type": "warning",
        "  Cat": "IntLongMath",
        "  Msg": "Expression of type int may overflow before being assigned to a long",
        " Code": "            monthToUse = iMax - remMonthToUse + 1;",
        " Mark": "                                              ^",
        " Line": 175
    },
    {
        " Proj": "Time-14",
        "Class": "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add overrides method in BaseDateTimeField; expected @Override",
        " Code": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {",
        " Mark": "                 ^",
        " Line": 203
    },
    {
        " Proj": "Time-14",
        "Class": "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "addWrapField overrides method in BaseDateTimeField; expected @Override",
        " Code": "    public long addWrapField(long instant, int months) {",
        " Mark": "                ^",
        " Line": 237
    },
    {
        " Proj": "Time-14",
        "Class": "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDifferenceAsLong overrides method in ImpreciseDateTimeField; expected @Override",
        " Code": "    public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {",
        " Mark": "                ^",
        " Line": 242
    },
    {
        " Proj": "Time-14",
        "Class": "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "set implements method in ImpreciseDateTimeField; expected @Override",
        " Code": "    public long set(long instant, int month) {",
        " Mark": "                ^",
        " Line": 297
    },
    {
        " Proj": "Time-14",
        "Class": "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRangeDurationField implements method in ImpreciseDateTimeField; expected @Override",
        " Code": "    public DurationField getRangeDurationField() {",
        " Mark": "                         ^",
        " Line": 314
    },
    {
        " Proj": "Time-14",
        "Class": "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isLeap overrides method in BaseDateTimeField; expected @Override",
        " Code": "    public boolean isLeap(long instant) {",
        " Mark": "                   ^",
        " Line": 319
    },
    {
        " Proj": "Time-14",
        "Class": "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLeapAmount overrides method in BaseDateTimeField; expected @Override",
        " Code": "    public int getLeapAmount(long instant) {",
        " Mark": "               ^",
        " Line": 328
    },
    {
        " Proj": "Time-14",
        "Class": "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLeapDurationField overrides method in BaseDateTimeField; expected @Override",
        " Code": "    public DurationField getLeapDurationField() {",
        " Mark": "                         ^",
        " Line": 333
    },
    {
        " Proj": "Time-14",
        "Class": "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMinimumValue implements method in BaseDateTimeField; expected @Override",
        " Code": "    public int getMinimumValue() {",
        " Mark": "               ^",
        " Line": 338
    },
    {
        " Proj": "Time-14",
        "Class": "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMaximumValue implements method in BaseDateTimeField; expected @Override",
        " Code": "    public int getMaximumValue() {",
        " Mark": "               ^",
        " Line": 343
    },
    {
        " Proj": "Time-14",
        "Class": "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "roundFloor implements method in ImpreciseDateTimeField; expected @Override",
        " Code": "    public long roundFloor(long instant) {",
        " Mark": "                ^",
        " Line": 348
    },
    {
        " Proj": "Time-14",
        "Class": "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "remainder overrides method in BaseDateTimeField; expected @Override",
        " Code": "    public long remainder(long instant) {",
        " Mark": "                ^",
        " Line": 355
    },
    {
        " Proj": "Time-15",
        "Class": "org.joda.time.field.FieldUtils",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "        if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {",
        " Mark": "                                                           ^",
        " Line": 173
    },
    {
        " Proj": "Time-15",
        "Class": "org.joda.time.field.FieldUtils",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "        if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {",
        " Mark": "                                                                                                   ^",
        " Line": 173
    },
    {
        " Proj": "Time-16",
        "Class": "org.joda.time.format.DateTimeFormatter",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {",
        " Mark": "                   ^",
        " Line": 188
    },
    {
        " Proj": "Time-16",
        "Class": "org.joda.time.format.DateTimeFormatter",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (iZone == zone) {",
        " Mark": "                  ^",
        " Line": 320
    },
    {
        " Proj": "Time-16",
        "Class": "org.joda.time.format.DateTimeFormatter",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (iPivotYear == pivotYear || (iPivotYear != null && iPivotYear.equals(pivotYear))) {",
        " Mark": "                       ^",
        " Line": 367
    },
    {
        " Proj": "Time-17",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "ClassNewInstance",
        "  Msg": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
        " Code": "                    provider = (Provider) Class.forName(providerClass).newInstance();",
        " Mark": "                                                                                  ^",
        " Line": 450
    },
    {
        " Proj": "Time-17",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "ClassNewInstance",
        "  Msg": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
        " Code": "                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();",
        " Mark": "                                                                                          ^",
        " Line": 534
    },
    {
        " Proj": "Time-17",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getZone implements method in BaseChronology; expected @Override",
        " Code": "            public DateTimeZone getZone() {",
        " Mark": "                                ^",
        " Line": 605
    },
    {
        " Proj": "Time-17",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "withUTC implements method in BaseChronology; expected @Override",
        " Code": "            public Chronology withUTC() {",
        " Mark": "                              ^",
        " Line": 608
    },
    {
        " Proj": "Time-17",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "withZone implements method in BaseChronology; expected @Override",
        " Code": "            public Chronology withZone(DateTimeZone zone) {",
        " Mark": "                              ^",
        " Line": 611
    },
    {
        " Proj": "Time-17",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString implements method in BaseChronology; expected @Override",
        " Code": "            public String toString() {",
        " Mark": "                          ^",
        " Line": 614
    },
    {
        " Proj": "Time-17",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (newZone == this) {",
        " Mark": "                    ^",
        " Line": 1031
    },
    {
        " Proj": "Time-17",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "    public abstract boolean equals(Object object);",
        " Mark": "                            ^",
        " Line": 1242
    },
    {
        " Proj": "Time-17",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Object; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 1249
    },
    {
        " Proj": "Time-17",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString overrides method in Object; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 1257
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (zone == DateTimeZone.UTC) {",
        " Mark": "                 ^",
        " Line": 214
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getZone overrides method in AssembledChronology; expected @Override",
        " Code": "    public DateTimeZone getZone() {",
        " Mark": "                        ^",
        " Line": 291
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "withUTC implements method in BaseChronology; expected @Override",
        " Code": "    public Chronology withUTC() {",
        " Mark": "                      ^",
        " Line": 306
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "withZone implements method in BaseChronology; expected @Override",
        " Code": "    public Chronology withZone(DateTimeZone zone) {",
        " Mark": "                      ^",
        " Line": 316
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (zone == getZone()) {",
        " Mark": "                 ^",
        " Line": 320
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDateTimeMillis overrides method in AssembledChronology; expected @Override",
        " Code": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,",
        " Mark": "                ^",
        " Line": 326
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDateTimeMillis overrides method in AssembledChronology; expected @Override",
        " Code": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,",
        " Mark": "                ^",
        " Line": 350
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 416
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Object; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 426
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString implements method in BaseChronology; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 438
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "assemble implements method in AssembledChronology; expected @Override",
        " Code": "    protected void assemble(Fields fields) {",
        " Mark": "                   ^",
        " Line": 464
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isLenient implements method in DateTimeField; expected @Override",
        " Code": "        public boolean isLenient() {",
        " Mark": "                       ^",
        " Line": 639
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "get implements method in BaseDateTimeField; expected @Override",
        " Code": "        public int get(long instant) {",
        " Mark": "                   ^",
        " Line": 643
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getAsText overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public String getAsText(long instant, Locale locale) {",
        " Mark": "                      ^",
        " Line": 651
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getAsText overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public String getAsText(int fieldValue, Locale locale) {",
        " Mark": "                      ^",
        " Line": 659
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getAsShortText overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public String getAsShortText(long instant, Locale locale) {",
        " Mark": "                      ^",
        " Line": 663
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getAsShortText overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public String getAsShortText(int fieldValue, Locale locale) {",
        " Mark": "                      ^",
        " Line": 671
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public long add(long instant, int value) {",
        " Mark": "                    ^",
        " Line": 675
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public long add(long instant, long value) {",
        " Mark": "                    ^",
        " Line": 679
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {",
        " Mark": "                     ^",
        " Line": 683
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDifference overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public int getDifference(long minuendInstant, long subtrahendInstant) {",
        " Mark": "                   ^",
        " Line": 701
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDifferenceAsLong overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {",
        " Mark": "                    ^",
        " Line": 705
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "set implements method in BaseDateTimeField; expected @Override",
        " Code": "        public long set(long instant, int value) {",
        " Mark": "                    ^",
        " Line": 709
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "set overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public long set(long instant, String text, Locale locale) {",
        " Mark": "                    ^",
        " Line": 740
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDurationField implements method in BaseDateTimeField; expected @Override",
        " Code": "        public DurationField getDurationField() {",
        " Mark": "                             ^",
        " Line": 763
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRangeDurationField implements method in BaseDateTimeField; expected @Override",
        " Code": "        public DurationField getRangeDurationField() {",
        " Mark": "                             ^",
        " Line": 767
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isLeap overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public boolean isLeap(long instant) {",
        " Mark": "                       ^",
        " Line": 771
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLeapAmount overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public int getLeapAmount(long instant) {",
        " Mark": "                   ^",
        " Line": 779
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLeapDurationField overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public DurationField getLeapDurationField() {",
        " Mark": "                             ^",
        " Line": 787
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMinimumValue implements method in BaseDateTimeField; expected @Override",
        " Code": "        public int getMinimumValue() {",
        " Mark": "                   ^",
        " Line": 792
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMinimumValue overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public int getMinimumValue(ReadablePartial partial) {",
        " Mark": "                   ^",
        " Line": 798
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMinimumValue overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public int getMinimumValue(ReadablePartial partial, int[] values) {",
        " Mark": "                   ^",
        " Line": 802
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMinimumValue overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public int getMinimumValue(long instant) {",
        " Mark": "                   ^",
        " Line": 806
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMaximumValue implements method in BaseDateTimeField; expected @Override",
        " Code": "        public int getMaximumValue() {",
        " Mark": "                   ^",
        " Line": 823
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMaximumValue overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public int getMaximumValue(long instant) {",
        " Mark": "                   ^",
        " Line": 829
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMaximumValue overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public int getMaximumValue(ReadablePartial partial) {",
        " Mark": "                   ^",
        " Line": 846
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMaximumValue overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public int getMaximumValue(ReadablePartial partial, int[] values) {",
        " Mark": "                   ^",
        " Line": 851
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "roundFloor implements method in BaseDateTimeField; expected @Override",
        " Code": "        public long roundFloor(long instant) {",
        " Mark": "                    ^",
        " Line": 863
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "roundCeiling overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public long roundCeiling(long instant) {",
        " Mark": "                    ^",
        " Line": 878
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMaximumTextLength overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public int getMaximumTextLength(Locale locale) {",
        " Mark": "                   ^",
        " Line": 893
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMaximumShortTextLength overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public int getMaximumShortTextLength(Locale locale) {",
        " Mark": "                   ^",
        " Line": 898
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add overrides method in CutoverField; expected @Override",
        " Code": "        public long add(long instant, int value) {",
        " Mark": "                    ^",
        " Line": 964
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add overrides method in CutoverField; expected @Override",
        " Code": "        public long add(long instant, long value) {",
        " Mark": "                    ^",
        " Line": 985
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDifference overrides method in CutoverField; expected @Override",
        " Code": "        public int getDifference(long minuendInstant, long subtrahendInstant) {",
        " Mark": "                   ^",
        " Line": 1006
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDifferenceAsLong overrides method in CutoverField; expected @Override",
        " Code": "        public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {",
        " Mark": "                    ^",
        " Line": 1026
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMinimumValue overrides method in CutoverField; expected @Override",
        " Code": "        public int getMinimumValue(long instant) {",
        " Mark": "                   ^",
        " Line": 1056
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMaximumValue overrides method in CutoverField; expected @Override",
        " Code": "        public int getMaximumValue(long instant) {",
        " Mark": "                   ^",
        " Line": 1064
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add overrides method in DecoratedDurationField; expected @Override",
        " Code": "        public long add(long instant, int value) {",
        " Mark": "                    ^",
        " Line": 1087
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add overrides method in DecoratedDurationField; expected @Override",
        " Code": "        public long add(long instant, long value) {",
        " Mark": "                    ^",
        " Line": 1091
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDifference overrides method in BaseDurationField; expected @Override",
        " Code": "        public int getDifference(long minuendInstant, long subtrahendInstant) {",
        " Mark": "                   ^",
        " Line": 1095
    },
    {
        " Proj": "Time-18",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDifferenceAsLong overrides method in DecoratedDurationField; expected @Override",
        " Code": "        public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {",
        " Mark": "                    ^",
        " Line": 1099
    },
    {
        " Proj": "Time-19",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "ClassNewInstance",
        "  Msg": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
        " Code": "                    provider = (Provider) Class.forName(providerClass).newInstance();",
        " Mark": "                                                                                  ^",
        " Line": 450
    },
    {
        " Proj": "Time-19",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "ClassNewInstance",
        "  Msg": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
        " Code": "                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();",
        " Mark": "                                                                                          ^",
        " Line": 534
    },
    {
        " Proj": "Time-19",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getZone implements method in BaseChronology; expected @Override",
        " Code": "            public DateTimeZone getZone() {",
        " Mark": "                                ^",
        " Line": 605
    },
    {
        " Proj": "Time-19",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "withUTC implements method in BaseChronology; expected @Override",
        " Code": "            public Chronology withUTC() {",
        " Mark": "                              ^",
        " Line": 608
    },
    {
        " Proj": "Time-19",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "withZone implements method in BaseChronology; expected @Override",
        " Code": "            public Chronology withZone(DateTimeZone zone) {",
        " Mark": "                              ^",
        " Line": 611
    },
    {
        " Proj": "Time-19",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString implements method in BaseChronology; expected @Override",
        " Code": "            public String toString() {",
        " Mark": "                          ^",
        " Line": 614
    },
    {
        " Proj": "Time-19",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (newZone == this) {",
        " Mark": "                    ^",
        " Line": 1031
    },
    {
        " Proj": "Time-19",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "    public abstract boolean equals(Object object);",
        " Mark": "                            ^",
        " Line": 1219
    },
    {
        " Proj": "Time-19",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Object; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 1226
    },
    {
        " Proj": "Time-19",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString overrides method in Object; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 1234
    },
    {
        " Proj": "Time-2",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "size implements method in ReadablePartial; expected @Override",
        " Code": "    public int size() {",
        " Mark": "               ^",
        " Line": 310
    },
    {
        " Proj": "Time-2",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getChronology implements method in ReadablePartial; expected @Override",
        " Code": "    public Chronology getChronology() {",
        " Mark": "                      ^",
        " Line": 322
    },
    {
        " Proj": "Time-2",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getField implements method in AbstractPartial; expected @Override",
        " Code": "    protected DateTimeField getField(int index, Chronology chrono) {",
        " Mark": "                            ^",
        " Line": 334
    },
    {
        " Proj": "Time-2",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getFieldType overrides method in AbstractPartial; expected @Override",
        " Code": "    public DateTimeFieldType getFieldType(int index) {",
        " Mark": "                             ^",
        " Line": 345
    },
    {
        " Proj": "Time-2",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getFieldTypes overrides method in AbstractPartial; expected @Override",
        " Code": "    public DateTimeFieldType[] getFieldTypes() {",
        " Mark": "                               ^",
        " Line": 357
    },
    {
        " Proj": "Time-2",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getValue implements method in ReadablePartial; expected @Override",
        " Code": "    public int getValue(int index) {",
        " Mark": "               ^",
        " Line": 369
    },
    {
        " Proj": "Time-2",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getValues overrides method in AbstractPartial; expected @Override",
        " Code": "    public int[] getValues() {",
        " Mark": "                 ^",
        " Line": 382
    },
    {
        " Proj": "Time-2",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString implements method in ReadablePartial; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 742
    },
    {
        " Proj": "Time-2",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getField implements method in AbstractPartialFieldProperty; expected @Override",
        " Code": "        public DateTimeField getField() {",
        " Mark": "                             ^",
        " Line": 848
    },
    {
        " Proj": "Time-2",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getReadablePartial implements method in AbstractPartialFieldProperty; expected @Override",
        " Code": "        protected ReadablePartial getReadablePartial() {",
        " Mark": "                                  ^",
        " Line": 857
    },
    {
        " Proj": "Time-2",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "get implements method in AbstractPartialFieldProperty; expected @Override",
        " Code": "        public int get() {",
        " Mark": "                   ^",
        " Line": 875
    },
    {
        " Proj": "Time-2",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getType implements method in DurationField; expected @Override",
        " Code": "    public final DurationFieldType getType() {",
        " Mark": "                                   ^",
        " Line": 78
    },
    {
        " Proj": "Time-2",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getName implements method in DurationField; expected @Override",
        " Code": "    public String getName() {",
        " Mark": "                  ^",
        " Line": 82
    },
    {
        " Proj": "Time-2",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isSupported implements method in DurationField; expected @Override",
        " Code": "    public boolean isSupported() {",
        " Mark": "                   ^",
        " Line": 91
    },
    {
        " Proj": "Time-2",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isPrecise implements method in DurationField; expected @Override",
        " Code": "    public boolean isPrecise() {",
        " Mark": "                   ^",
        " Line": 100
    },
    {
        " Proj": "Time-2",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getValue implements method in DurationField; expected @Override",
        " Code": "    public int getValue(long duration) {",
        " Mark": "               ^",
        " Line": 109
    },
    {
        " Proj": "Time-2",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getValueAsLong implements method in DurationField; expected @Override",
        " Code": "    public long getValueAsLong(long duration) {",
        " Mark": "                ^",
        " Line": 118
    },
    {
        " Proj": "Time-2",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getValue implements method in DurationField; expected @Override",
        " Code": "    public int getValue(long duration, long instant) {",
        " Mark": "               ^",
        " Line": 127
    },
    {
        " Proj": "Time-2",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getValueAsLong implements method in DurationField; expected @Override",
        " Code": "    public long getValueAsLong(long duration, long instant) {",
        " Mark": "                ^",
        " Line": 136
    },
    {
        " Proj": "Time-2",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMillis implements method in DurationField; expected @Override",
        " Code": "    public long getMillis(int value) {",
        " Mark": "                ^",
        " Line": 145
    },
    {
        " Proj": "Time-2",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMillis implements method in DurationField; expected @Override",
        " Code": "    public long getMillis(long value) {",
        " Mark": "                ^",
        " Line": 154
    },
    {
        " Proj": "Time-2",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMillis implements method in DurationField; expected @Override",
        " Code": "    public long getMillis(int value, long instant) {",
        " Mark": "                ^",
        " Line": 163
    },
    {
        " Proj": "Time-2",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMillis implements method in DurationField; expected @Override",
        " Code": "    public long getMillis(long value, long instant) {",
        " Mark": "                ^",
        " Line": 172
    },
    {
        " Proj": "Time-2",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in DurationField; expected @Override",
        " Code": "    public long add(long instant, int value) {",
        " Mark": "                ^",
        " Line": 181
    },
    {
        " Proj": "Time-2",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in DurationField; expected @Override",
        " Code": "    public long add(long instant, long value) {",
        " Mark": "                ^",
        " Line": 190
    },
    {
        " Proj": "Time-2",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDifference implements method in DurationField; expected @Override",
        " Code": "    public int getDifference(long minuendInstant, long subtrahendInstant) {",
        " Mark": "               ^",
        " Line": 199
    },
    {
        " Proj": "Time-2",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDifferenceAsLong implements method in DurationField; expected @Override",
        " Code": "    public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {",
        " Mark": "                ^",
        " Line": 208
    },
    {
        " Proj": "Time-2",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getUnitMillis implements method in DurationField; expected @Override",
        " Code": "    public long getUnitMillis() {",
        " Mark": "                ^",
        " Line": 217
    },
    {
        " Proj": "Time-2",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compareTo implements method in Comparable; expected @Override",
        " Code": "    public int compareTo(DurationField durationField) {",
        " Mark": "               ^",
        " Line": 226
    },
    {
        " Proj": "Time-2",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 240
    },
    {
        " Proj": "Time-2",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Object; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 258
    },
    {
        " Proj": "Time-2",
        "Class": "org.joda.time.field.UnsupportedDurationField",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString implements method in DurationField; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 267
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimatePrintedLength implements method in DateTimePrinter; expected @Override",
        " Code": "        public int estimatePrintedLength() {",
        " Mark": "                   ^",
        " Line": 1173
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(",
        " Mark": "                    ^",
        " Line": 1177
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(",
        " Mark": "                    ^",
        " Line": 1183
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {",
        " Mark": "                    ^",
        " Line": 1189
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {",
        " Mark": "                    ^",
        " Line": 1193
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateParsedLength implements method in DateTimeParser; expected @Override",
        " Code": "        public int estimateParsedLength() {",
        " Mark": "                   ^",
        " Line": 1197
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "parseInto implements method in DateTimeParser; expected @Override",
        " Code": "        public int parseInto(DateTimeParserBucket bucket, String text, int position) {",
        " Mark": "                   ^",
        " Line": 1201
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimatePrintedLength implements method in DateTimePrinter; expected @Override",
        " Code": "        public int estimatePrintedLength() {",
        " Mark": "                   ^",
        " Line": 1236
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(",
        " Mark": "                    ^",
        " Line": 1240
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(",
        " Mark": "                    ^",
        " Line": 1246
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {",
        " Mark": "                    ^",
        " Line": 1252
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {",
        " Mark": "                    ^",
        " Line": 1256
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateParsedLength implements method in DateTimeParser; expected @Override",
        " Code": "        public int estimateParsedLength() {",
        " Mark": "                   ^",
        " Line": 1260
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "parseInto implements method in DateTimeParser; expected @Override",
        " Code": "        public int parseInto(DateTimeParserBucket bucket, String text, int position) {",
        " Mark": "                   ^",
        " Line": 1264
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateParsedLength implements method in DateTimeParser; expected @Override",
        " Code": "        public int estimateParsedLength() {",
        " Mark": "                   ^",
        " Line": 1287
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "parseInto implements method in DateTimeParser; expected @Override",
        " Code": "        public int parseInto(DateTimeParserBucket bucket, String text, int position) {",
        " Mark": "                   ^",
        " Line": 1291
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimatePrintedLength implements method in DateTimePrinter; expected @Override",
        " Code": "        public int estimatePrintedLength() {",
        " Mark": "                   ^",
        " Line": 1366
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(",
        " Mark": "                    ^",
        " Line": 1370
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(",
        " Mark": "                    ^",
        " Line": 1381
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {",
        " Mark": "                    ^",
        " Line": 1392
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {",
        " Mark": "                    ^",
        " Line": 1404
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimatePrintedLength implements method in DateTimePrinter; expected @Override",
        " Code": "        public int estimatePrintedLength() {",
        " Mark": "                   ^",
        " Line": 1429
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(",
        " Mark": "                    ^",
        " Line": 1433
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(",
        " Mark": "                    ^",
        " Line": 1444
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {",
        " Mark": "                    ^",
        " Line": 1455
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {",
        " Mark": "                    ^",
        " Line": 1467
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "parseInto overrides method in NumberFormatter; expected @Override",
        " Code": "        public int parseInto(DateTimeParserBucket bucket, String text, int position) {",
        " Mark": "                   ^",
        " Line": 1487
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateParsedLength implements method in DateTimeParser; expected @Override",
        " Code": "        public int estimateParsedLength() {",
        " Mark": "                   ^",
        " Line": 1529
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "parseInto implements method in DateTimeParser; expected @Override",
        " Code": "        public int parseInto(DateTimeParserBucket bucket, String text, int position) {",
        " Mark": "                   ^",
        " Line": 1533
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimatePrintedLength implements method in DateTimePrinter; expected @Override",
        " Code": "        public int estimatePrintedLength() {",
        " Mark": "                   ^",
        " Line": 1632
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(",
        " Mark": "                    ^",
        " Line": 1636
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(",
        " Mark": "                    ^",
        " Line": 1648
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {",
        " Mark": "                    ^",
        " Line": 1672
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {",
        " Mark": "                    ^",
        " Line": 1682
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimatePrintedLength implements method in DateTimePrinter; expected @Override",
        " Code": "        public int estimatePrintedLength() {",
        " Mark": "                   ^",
        " Line": 1721
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(",
        " Mark": "                    ^",
        " Line": 1725
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(",
        " Mark": "                    ^",
        " Line": 1735
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {",
        " Mark": "                    ^",
        " Line": 1745
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {",
        " Mark": "                    ^",
        " Line": 1753
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateParsedLength implements method in DateTimeParser; expected @Override",
        " Code": "        public int estimateParsedLength() {",
        " Mark": "                   ^",
        " Line": 1783
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "parseInto implements method in DateTimeParser; expected @Override",
        " Code": "        public int parseInto(DateTimeParserBucket bucket, String text, int position) {",
        " Mark": "                   ^",
        " Line": 1788
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimatePrintedLength implements method in DateTimePrinter; expected @Override",
        " Code": "        public int estimatePrintedLength() {",
        " Mark": "                   ^",
        " Line": 1867
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(",
        " Mark": "                    ^",
        " Line": 1871
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(",
        " Mark": "                    ^",
        " Line": 1881
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {",
        " Mark": "                    ^",
        " Line": 1887
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {",
        " Mark": "                    ^",
        " Line": 1898
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateParsedLength implements method in DateTimeParser; expected @Override",
        " Code": "        public int estimateParsedLength() {",
        " Mark": "                   ^",
        " Line": 2025
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "parseInto implements method in DateTimeParser; expected @Override",
        " Code": "        public int parseInto(DateTimeParserBucket bucket, String text, int position) {",
        " Mark": "                   ^",
        " Line": 2029
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimatePrintedLength implements method in DateTimePrinter; expected @Override",
        " Code": "        public int estimatePrintedLength() {",
        " Mark": "                   ^",
        " Line": 2098
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "OperatorPrecedence",
        "  Msg": "Use grouping parenthesis to make the operator precedence explicit",
        " Code": "            int est = 1 + iMinFields << 1;",
        " Mark": "                        ^",
        " Line": 2099
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(",
        " Mark": "                    ^",
        " Line": 2109
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(",
        " Mark": "                    ^",
        " Line": 2168
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {",
        " Mark": "                    ^",
        " Line": 2227
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {",
        " Mark": "                    ^",
        " Line": 2231
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateParsedLength implements method in DateTimeParser; expected @Override",
        " Code": "        public int estimateParsedLength() {",
        " Mark": "                   ^",
        " Line": 2235
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "parseInto implements method in DateTimeParser; expected @Override",
        " Code": "        public int parseInto(DateTimeParserBucket bucket, String text, int position) {",
        " Mark": "                   ^",
        " Line": 2239
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimatePrintedLength implements method in DateTimePrinter; expected @Override",
        " Code": "        public int estimatePrintedLength() {",
        " Mark": "                   ^",
        " Line": 2444
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(",
        " Mark": "                    ^",
        " Line": 2448
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(",
        " Mark": "                    ^",
        " Line": 2454
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {",
        " Mark": "                    ^",
        " Line": 2473
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {",
        " Mark": "                    ^",
        " Line": 2477
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateParsedLength implements method in DateTimeParser; expected @Override",
        " Code": "        public int estimateParsedLength() {",
        " Mark": "                   ^",
        " Line": 2481
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "parseInto implements method in DateTimeParser; expected @Override",
        " Code": "        public int parseInto(DateTimeParserBucket bucket, String text, int position) {",
        " Mark": "                   ^",
        " Line": 2485
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimatePrintedLength implements method in DateTimePrinter; expected @Override",
        " Code": "        public int estimatePrintedLength() {",
        " Mark": "                   ^",
        " Line": 2512
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(",
        " Mark": "                    ^",
        " Line": 2516
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(",
        " Mark": "                    ^",
        " Line": 2522
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {",
        " Mark": "                    ^",
        " Line": 2528
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {",
        " Mark": "                    ^",
        " Line": 2532
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateParsedLength implements method in DateTimeParser; expected @Override",
        " Code": "        public int estimateParsedLength() {",
        " Mark": "                   ^",
        " Line": 2536
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "parseInto implements method in DateTimeParser; expected @Override",
        " Code": "        public int parseInto(DateTimeParserBucket bucket, String text, int position) {",
        " Mark": "                   ^",
        " Line": 2540
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimatePrintedLength implements method in DateTimePrinter; expected @Override",
        " Code": "        public int estimatePrintedLength() {",
        " Mark": "                   ^",
        " Line": 2607
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(",
        " Mark": "                    ^",
        " Line": 2611
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(",
        " Mark": "                    ^",
        " Line": 2630
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {",
        " Mark": "                    ^",
        " Line": 2649
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in DateTimePrinter; expected @Override",
        " Code": "        public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {",
        " Mark": "                    ^",
        " Line": 2666
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateParsedLength implements method in DateTimeParser; expected @Override",
        " Code": "        public int estimateParsedLength() {",
        " Mark": "                   ^",
        " Line": 2683
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "parseInto implements method in DateTimeParser; expected @Override",
        " Code": "        public int parseInto(DateTimeParserBucket bucket, String text, int position) {",
        " Mark": "                   ^",
        " Line": 2687
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "estimateParsedLength implements method in DateTimeParser; expected @Override",
        " Code": "        public int estimateParsedLength() {",
        " Mark": "                   ^",
        " Line": 2767
    },
    {
        " Proj": "Time-20",
        "Class": "org.joda.time.format.DateTimeFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "parseInto implements method in DateTimeParser; expected @Override",
        " Code": "        public int parseInto(DateTimeParserBucket bucket, String text, int position) {",
        " Mark": "                   ^",
        " Line": 2771
    },
    {
        " Proj": "Time-21",
        "Class": "org.joda.time.tz.DefaultNameProvider",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getShortName implements method in NameProvider; expected @Override",
        " Code": "    public String getShortName(Locale locale, String id, String nameKey) {",
        " Mark": "                  ^",
        " Line": 42
    },
    {
        " Proj": "Time-21",
        "Class": "org.joda.time.tz.DefaultNameProvider",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getName implements method in NameProvider; expected @Override",
        " Code": "    public String getName(Locale locale, String id, String nameKey) {",
        " Mark": "                  ^",
        " Line": 47
    },
    {
        " Proj": "Time-22",
        "Class": "org.joda.time.base.BasePeriod",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getPeriodType implements method in ReadablePeriod; expected @Override",
        " Code": "    public PeriodType getPeriodType() {",
        " Mark": "                      ^",
        " Line": 307
    },
    {
        " Proj": "Time-22",
        "Class": "org.joda.time.base.BasePeriod",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "size implements method in ReadablePeriod; expected @Override",
        " Code": "    public int size() {",
        " Mark": "               ^",
        " Line": 317
    },
    {
        " Proj": "Time-22",
        "Class": "org.joda.time.base.BasePeriod",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getFieldType implements method in ReadablePeriod; expected @Override",
        " Code": "    public DurationFieldType getFieldType(int index) {",
        " Mark": "                             ^",
        " Line": 328
    },
    {
        " Proj": "Time-22",
        "Class": "org.joda.time.base.BasePeriod",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getValue implements method in ReadablePeriod; expected @Override",
        " Code": "    public int getValue(int index) {",
        " Mark": "               ^",
        " Line": 339
    },
    {
        " Proj": "Time-23",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "ClassNewInstance",
        "  Msg": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
        " Code": "                    provider = (Provider) Class.forName(providerClass).newInstance();",
        " Mark": "                                                                                  ^",
        " Line": 450
    },
    {
        " Proj": "Time-23",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "ClassNewInstance",
        "  Msg": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
        " Code": "                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();",
        " Mark": "                                                                                          ^",
        " Line": 534
    },
    {
        " Proj": "Time-23",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getZone implements method in BaseChronology; expected @Override",
        " Code": "            public DateTimeZone getZone() {",
        " Mark": "                                ^",
        " Line": 605
    },
    {
        " Proj": "Time-23",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "withUTC implements method in BaseChronology; expected @Override",
        " Code": "            public Chronology withUTC() {",
        " Mark": "                              ^",
        " Line": 608
    },
    {
        " Proj": "Time-23",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "withZone implements method in BaseChronology; expected @Override",
        " Code": "            public Chronology withZone(DateTimeZone zone) {",
        " Mark": "                              ^",
        " Line": 611
    },
    {
        " Proj": "Time-23",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString implements method in BaseChronology; expected @Override",
        " Code": "            public String toString() {",
        " Mark": "                          ^",
        " Line": 614
    },
    {
        " Proj": "Time-23",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (newZone == this) {",
        " Mark": "                    ^",
        " Line": 1031
    },
    {
        " Proj": "Time-23",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "    public abstract boolean equals(Object object);",
        " Mark": "                            ^",
        " Line": 1219
    },
    {
        " Proj": "Time-23",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Object; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 1226
    },
    {
        " Proj": "Time-23",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString overrides method in Object; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 1234
    },
    {
        " Proj": "Time-24",
        "Class": "org.joda.time.format.DateTimeParserBucket",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        iZone = zone == DateTimeZone.UTC ? null : zone;",
        " Mark": "                     ^",
        " Line": 163
    },
    {
        " Proj": "Time-24",
        "Class": "org.joda.time.format.DateTimeParserBucket",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "compareTo implements method in Comparable; expected @Override",
        " Code": "        public int compareTo(SavedField obj) {",
        " Mark": "                   ^",
        " Line": 486
    },
    {
        " Proj": "Time-25",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "ClassNewInstance",
        "  Msg": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
        " Code": "                    provider = (Provider) Class.forName(providerClass).newInstance();",
        " Mark": "                                                                                  ^",
        " Line": 450
    },
    {
        " Proj": "Time-25",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "ClassNewInstance",
        "  Msg": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
        " Code": "                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();",
        " Mark": "                                                                                          ^",
        " Line": 534
    },
    {
        " Proj": "Time-25",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getZone implements method in BaseChronology; expected @Override",
        " Code": "            public DateTimeZone getZone() {",
        " Mark": "                                ^",
        " Line": 604
    },
    {
        " Proj": "Time-25",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "withUTC implements method in BaseChronology; expected @Override",
        " Code": "            public Chronology withUTC() {",
        " Mark": "                              ^",
        " Line": 607
    },
    {
        " Proj": "Time-25",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "withZone implements method in BaseChronology; expected @Override",
        " Code": "            public Chronology withZone(DateTimeZone zone) {",
        " Mark": "                              ^",
        " Line": 610
    },
    {
        " Proj": "Time-25",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString implements method in BaseChronology; expected @Override",
        " Code": "            public String toString() {",
        " Mark": "                          ^",
        " Line": 613
    },
    {
        " Proj": "Time-25",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (newZone == this) {",
        " Mark": "                    ^",
        " Line": 1030
    },
    {
        " Proj": "Time-25",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "    public abstract boolean equals(Object object);",
        " Mark": "                            ^",
        " Line": 1201
    },
    {
        " Proj": "Time-25",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Object; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 1208
    },
    {
        " Proj": "Time-25",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString overrides method in Object; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 1216
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getZone overrides method in AssembledChronology; expected @Override",
        " Code": "    public DateTimeZone getZone() {",
        " Mark": "                        ^",
        " Line": 85
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "withUTC implements method in BaseChronology; expected @Override",
        " Code": "    public Chronology withUTC() {",
        " Mark": "                      ^",
        " Line": 89
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "withZone implements method in BaseChronology; expected @Override",
        " Code": "    public Chronology withZone(DateTimeZone zone) {",
        " Mark": "                      ^",
        " Line": 93
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (zone == DateTimeZone.UTC) {",
        " Mark": "                 ^",
        " Line": 100
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDateTimeMillis overrides method in AssembledChronology; expected @Override",
        " Code": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,",
        " Mark": "                ^",
        " Line": 106
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDateTimeMillis overrides method in AssembledChronology; expected @Override",
        " Code": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,",
        " Mark": "                ^",
        " Line": 114
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDateTimeMillis overrides method in AssembledChronology; expected @Override",
        " Code": "    public long getDateTimeMillis(long instant,",
        " Mark": "                ^",
        " Line": 124
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "assemble implements method in AssembledChronology; expected @Override",
        " Code": "    protected void assemble(Fields fields) {",
        " Mark": "                   ^",
        " Line": 150
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 236
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Object; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 255
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString implements method in BaseChronology; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 264
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isPrecise implements method in DurationField; expected @Override",
        " Code": "        public boolean isPrecise() {",
        " Mark": "                       ^",
        " Line": 293
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getUnitMillis implements method in DurationField; expected @Override",
        " Code": "        public long getUnitMillis() {",
        " Mark": "                    ^",
        " Line": 297
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getValue overrides method in BaseDurationField; expected @Override",
        " Code": "        public int getValue(long duration, long instant) {",
        " Mark": "                   ^",
        " Line": 301
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getValueAsLong implements method in DurationField; expected @Override",
        " Code": "        public long getValueAsLong(long duration, long instant) {",
        " Mark": "                    ^",
        " Line": 305
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMillis implements method in DurationField; expected @Override",
        " Code": "        public long getMillis(int value, long instant) {",
        " Mark": "                    ^",
        " Line": 309
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMillis implements method in DurationField; expected @Override",
        " Code": "        public long getMillis(long value, long instant) {",
        " Mark": "                    ^",
        " Line": 313
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in DurationField; expected @Override",
        " Code": "        public long add(long instant, int value) {",
        " Mark": "                    ^",
        " Line": 317
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in DurationField; expected @Override",
        " Code": "        public long add(long instant, long value) {",
        " Mark": "                    ^",
        " Line": 323
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDifference overrides method in BaseDurationField; expected @Override",
        " Code": "        public int getDifference(long minuendInstant, long subtrahendInstant) {",
        " Mark": "                   ^",
        " Line": 329
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDifferenceAsLong implements method in DurationField; expected @Override",
        " Code": "        public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {",
        " Mark": "                    ^",
        " Line": 336
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isLenient implements method in DateTimeField; expected @Override",
        " Code": "        public boolean isLenient() {",
        " Mark": "                       ^",
        " Line": 401
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "get implements method in BaseDateTimeField; expected @Override",
        " Code": "        public int get(long instant) {",
        " Mark": "                   ^",
        " Line": 405
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getAsText overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public String getAsText(long instant, Locale locale) {",
        " Mark": "                      ^",
        " Line": 410
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getAsShortText overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public String getAsShortText(long instant, Locale locale) {",
        " Mark": "                      ^",
        " Line": 415
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getAsText overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public String getAsText(int fieldValue, Locale locale) {",
        " Mark": "                      ^",
        " Line": 420
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getAsShortText overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public String getAsShortText(int fieldValue, Locale locale) {",
        " Mark": "                      ^",
        " Line": 424
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public long add(long instant, int value) {",
        " Mark": "                    ^",
        " Line": 428
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public long add(long instant, long value) {",
        " Mark": "                    ^",
        " Line": 440
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "addWrapField overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public long addWrapField(long instant, int value) {",
        " Mark": "                    ^",
        " Line": 452
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "set implements method in BaseDateTimeField; expected @Override",
        " Code": "        public long set(long instant, int value) {",
        " Mark": "                    ^",
        " Line": 464
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "BoxedPrimitiveConstructor",
        "  Msg": "valueOf or autoboxing provides better time and space performance",
        " Code": "                throw new IllegalFieldValueException(iField.getType(), new Integer(value),",
        " Mark": "                                                                       ^",
        " Line": 469
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "set overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public long set(long instant, String text, Locale locale) {",
        " Mark": "                    ^",
        " Line": 477
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDifference overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public int getDifference(long minuendInstant, long subtrahendInstant) {",
        " Mark": "                   ^",
        " Line": 484
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDifferenceAsLong overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {",
        " Mark": "                    ^",
        " Line": 491
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDurationField implements method in BaseDateTimeField; expected @Override",
        " Code": "        public final DurationField getDurationField() {",
        " Mark": "                                   ^",
        " Line": 498
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRangeDurationField implements method in BaseDateTimeField; expected @Override",
        " Code": "        public final DurationField getRangeDurationField() {",
        " Mark": "                                   ^",
        " Line": 502
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isLeap overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public boolean isLeap(long instant) {",
        " Mark": "                       ^",
        " Line": 506
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLeapAmount overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public int getLeapAmount(long instant) {",
        " Mark": "                   ^",
        " Line": 511
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLeapDurationField overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public final DurationField getLeapDurationField() {",
        " Mark": "                                   ^",
        " Line": 516
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "roundFloor implements method in BaseDateTimeField; expected @Override",
        " Code": "        public long roundFloor(long instant) {",
        " Mark": "                    ^",
        " Line": 520
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "roundCeiling overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public long roundCeiling(long instant) {",
        " Mark": "                    ^",
        " Line": 532
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "remainder overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public long remainder(long instant) {",
        " Mark": "                    ^",
        " Line": 544
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMinimumValue implements method in BaseDateTimeField; expected @Override",
        " Code": "        public int getMinimumValue() {",
        " Mark": "                   ^",
        " Line": 549
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMinimumValue overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public int getMinimumValue(long instant) {",
        " Mark": "                   ^",
        " Line": 553
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMinimumValue overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public int getMinimumValue(ReadablePartial instant) {",
        " Mark": "                   ^",
        " Line": 558
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMinimumValue overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public int getMinimumValue(ReadablePartial instant, int[] values) {",
        " Mark": "                   ^",
        " Line": 562
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMaximumValue implements method in BaseDateTimeField; expected @Override",
        " Code": "        public int getMaximumValue() {",
        " Mark": "                   ^",
        " Line": 566
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMaximumValue overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public int getMaximumValue(long instant) {",
        " Mark": "                   ^",
        " Line": 570
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMaximumValue overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public int getMaximumValue(ReadablePartial instant) {",
        " Mark": "                   ^",
        " Line": 575
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMaximumValue overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public int getMaximumValue(ReadablePartial instant, int[] values) {",
        " Mark": "                   ^",
        " Line": 579
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMaximumTextLength overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public int getMaximumTextLength(Locale locale) {",
        " Mark": "                   ^",
        " Line": 583
    },
    {
        " Proj": "Time-26",
        "Class": "org.joda.time.chrono.ZonedChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMaximumShortTextLength overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public int getMaximumShortTextLength(Locale locale) {",
        " Mark": "                   ^",
        " Line": 587
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "calculatePrintedLength implements method in PeriodFieldAffix; expected @Override",
        " Code": "        public int calculatePrintedLength(int value) {",
        " Mark": "                   ^",
        " Line": 863
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in PeriodFieldAffix; expected @Override",
        " Code": "        public void printTo(StringBuffer buf, int value) {",
        " Mark": "                    ^",
        " Line": 867
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in PeriodFieldAffix; expected @Override",
        " Code": "        public void printTo(Writer out, int value) throws IOException {",
        " Mark": "                    ^",
        " Line": 871
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "parse implements method in PeriodFieldAffix; expected @Override",
        " Code": "        public int parse(String periodStr, int position) {",
        " Mark": "                   ^",
        " Line": 875
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "scan implements method in PeriodFieldAffix; expected @Override",
        " Code": "        public int scan(String periodStr, final int position) {",
        " Mark": "                   ^",
        " Line": 884
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "calculatePrintedLength implements method in PeriodFieldAffix; expected @Override",
        " Code": "        public int calculatePrintedLength(int value) {",
        " Mark": "                   ^",
        " Line": 921
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in PeriodFieldAffix; expected @Override",
        " Code": "        public void printTo(StringBuffer buf, int value) {",
        " Mark": "                    ^",
        " Line": 925
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in PeriodFieldAffix; expected @Override",
        " Code": "        public void printTo(Writer out, int value) throws IOException {",
        " Mark": "                    ^",
        " Line": 929
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "parse implements method in PeriodFieldAffix; expected @Override",
        " Code": "        public int parse(String periodStr, int position) {",
        " Mark": "                   ^",
        " Line": 933
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "scan implements method in PeriodFieldAffix; expected @Override",
        " Code": "        public int scan(String periodStr, final int position) {",
        " Mark": "                   ^",
        " Line": 956
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "calculatePrintedLength implements method in PeriodFieldAffix; expected @Override",
        " Code": "        public int calculatePrintedLength(int value) {",
        " Mark": "                   ^",
        " Line": 996
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in PeriodFieldAffix; expected @Override",
        " Code": "        public void printTo(StringBuffer buf, int value) {",
        " Mark": "                    ^",
        " Line": 1001
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in PeriodFieldAffix; expected @Override",
        " Code": "        public void printTo(Writer out, int value) throws IOException {",
        " Mark": "                    ^",
        " Line": 1006
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "parse implements method in PeriodFieldAffix; expected @Override",
        " Code": "        public int parse(String periodStr, int position) {",
        " Mark": "                   ^",
        " Line": 1011
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "scan implements method in PeriodFieldAffix; expected @Override",
        " Code": "        public int scan(String periodStr, final int position) {",
        " Mark": "                   ^",
        " Line": 1019
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "countFieldsToPrint implements method in PeriodPrinter; expected @Override",
        " Code": "        public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale) {",
        " Mark": "                   ^",
        " Line": 1078
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "calculatePrintedLength implements method in PeriodPrinter; expected @Override",
        " Code": "        public int calculatePrintedLength(ReadablePeriod period, Locale locale) {",
        " Mark": "                   ^",
        " Line": 1088
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in PeriodPrinter; expected @Override",
        " Code": "        public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {",
        " Mark": "                    ^",
        " Line": 1120
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in PeriodPrinter; expected @Override",
        " Code": "        public void printTo(Writer out, ReadablePeriod period, Locale locale) throws IOException {",
        " Mark": "                    ^",
        " Line": 1151
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "parseInto implements method in PeriodParser; expected @Override",
        " Code": "        public int parseInto(",
        " Mark": "                   ^",
        " Line": 1182
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "countFieldsToPrint implements method in PeriodPrinter; expected @Override",
        " Code": "        public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale) {",
        " Mark": "                   ^",
        " Line": 1548
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "calculatePrintedLength implements method in PeriodPrinter; expected @Override",
        " Code": "        public int calculatePrintedLength(ReadablePeriod period, Locale locale) {",
        " Mark": "                   ^",
        " Line": 1552
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in PeriodPrinter; expected @Override",
        " Code": "        public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {",
        " Mark": "                    ^",
        " Line": 1556
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in PeriodPrinter; expected @Override",
        " Code": "        public void printTo(Writer out, ReadablePeriod period, Locale locale) throws IOException {",
        " Mark": "                    ^",
        " Line": 1560
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "parseInto implements method in PeriodParser; expected @Override",
        " Code": "        public int parseInto(",
        " Mark": "                   ^",
        " Line": 1564
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "countFieldsToPrint implements method in PeriodPrinter; expected @Override",
        " Code": "        public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale) {",
        " Mark": "                   ^",
        " Line": 1624
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "calculatePrintedLength implements method in PeriodPrinter; expected @Override",
        " Code": "        public int calculatePrintedLength(ReadablePeriod period, Locale locale) {",
        " Mark": "                   ^",
        " Line": 1632
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in PeriodPrinter; expected @Override",
        " Code": "        public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {",
        " Mark": "                    ^",
        " Line": 1657
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in PeriodPrinter; expected @Override",
        " Code": "        public void printTo(Writer out, ReadablePeriod period, Locale locale) throws IOException {",
        " Mark": "                    ^",
        " Line": 1679
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "parseInto implements method in PeriodParser; expected @Override",
        " Code": "        public int parseInto(",
        " Mark": "                   ^",
        " Line": 1701
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "countFieldsToPrint implements method in PeriodPrinter; expected @Override",
        " Code": "        public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale) {",
        " Mark": "                   ^",
        " Line": 1787
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "calculatePrintedLength implements method in PeriodPrinter; expected @Override",
        " Code": "        public int calculatePrintedLength(ReadablePeriod period, Locale locale) {",
        " Mark": "                   ^",
        " Line": 1796
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in PeriodPrinter; expected @Override",
        " Code": "        public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {",
        " Mark": "                    ^",
        " Line": 1805
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "printTo implements method in PeriodPrinter; expected @Override",
        " Code": "        public void printTo(Writer out, ReadablePeriod period, Locale locale) throws IOException {",
        " Mark": "                    ^",
        " Line": 1813
    },
    {
        " Proj": "Time-27",
        "Class": "org.joda.time.format.PeriodFormatterBuilder",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "parseInto implements method in PeriodParser; expected @Override",
        " Code": "        public int parseInto(",
        " Mark": "                   ^",
        " Line": 1821
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setMillis overrides method in BaseDateTime; expected @Override",
        " Code": "    public void setMillis(long instant) {",
        " Mark": "                ^",
        " Line": 453
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setMillis implements method in ReadWritableInstant; expected @Override",
        " Code": "    public void setMillis(ReadableInstant instant) {",
        " Mark": "                ^",
        " Line": 484
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in ReadWritableInstant; expected @Override",
        " Code": "    public void add(long duration) {",
        " Mark": "                ^",
        " Line": 496
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in ReadWritableInstant; expected @Override",
        " Code": "    public void add(ReadableDuration duration) {",
        " Mark": "                ^",
        " Line": 508
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in ReadWritableInstant; expected @Override",
        " Code": "    public void add(ReadableDuration duration, int scalar) {",
        " Mark": "                ^",
        " Line": 521
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in ReadWritableInstant; expected @Override",
        " Code": "    public void add(ReadablePeriod period) {",
        " Mark": "                ^",
        " Line": 535
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in ReadWritableInstant; expected @Override",
        " Code": "    public void add(ReadablePeriod period, int scalar) {",
        " Mark": "                ^",
        " Line": 548
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setChronology overrides method in BaseDateTime; expected @Override",
        " Code": "    public void setChronology(Chronology chronology) {",
        " Mark": "                ^",
        " Line": 562
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setZone implements method in ReadWritableInstant; expected @Override",
        " Code": "    public void setZone(DateTimeZone newZone) {",
        " Mark": "                ^",
        " Line": 581
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (chrono.getZone() != newZone) {",
        " Mark": "                             ^",
        " Line": 584
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setZoneRetainFields implements method in ReadWritableInstant; expected @Override",
        " Code": "    public void setZoneRetainFields(DateTimeZone newZone) {",
        " Mark": "                ^",
        " Line": 600
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (newZone == originalZone) {",
        " Mark": "                    ^",
        " Line": 603
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "set implements method in ReadWritableInstant; expected @Override",
        " Code": "    public void set(DateTimeFieldType type, int value) {",
        " Mark": "                ^",
        " Line": 620
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add implements method in ReadWritableInstant; expected @Override",
        " Code": "    public void add(DurationFieldType type, int amount) {",
        " Mark": "                ^",
        " Line": 635
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setYear implements method in ReadWritableDateTime; expected @Override",
        " Code": "    public void setYear(final int year) {",
        " Mark": "                ^",
        " Line": 651
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "addYears implements method in ReadWritableDateTime; expected @Override",
        " Code": "    public void addYears(final int years) {",
        " Mark": "                ^",
        " Line": 661
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setWeekyear implements method in ReadWritableDateTime; expected @Override",
        " Code": "    public void setWeekyear(final int weekyear) {",
        " Mark": "                ^",
        " Line": 674
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "addWeekyears implements method in ReadWritableDateTime; expected @Override",
        " Code": "    public void addWeekyears(final int weekyears) {",
        " Mark": "                ^",
        " Line": 684
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setMonthOfYear implements method in ReadWritableDateTime; expected @Override",
        " Code": "    public void setMonthOfYear(final int monthOfYear) {",
        " Mark": "                ^",
        " Line": 697
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "addMonths implements method in ReadWritableDateTime; expected @Override",
        " Code": "    public void addMonths(final int months) {",
        " Mark": "                ^",
        " Line": 707
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setWeekOfWeekyear implements method in ReadWritableDateTime; expected @Override",
        " Code": "    public void setWeekOfWeekyear(final int weekOfWeekyear) {",
        " Mark": "                ^",
        " Line": 720
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "addWeeks implements method in ReadWritableDateTime; expected @Override",
        " Code": "    public void addWeeks(final int weeks) {",
        " Mark": "                ^",
        " Line": 730
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setDayOfYear implements method in ReadWritableDateTime; expected @Override",
        " Code": "    public void setDayOfYear(final int dayOfYear) {",
        " Mark": "                ^",
        " Line": 743
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setDayOfMonth implements method in ReadWritableDateTime; expected @Override",
        " Code": "    public void setDayOfMonth(final int dayOfMonth) {",
        " Mark": "                ^",
        " Line": 753
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setDayOfWeek implements method in ReadWritableDateTime; expected @Override",
        " Code": "    public void setDayOfWeek(final int dayOfWeek) {",
        " Mark": "                ^",
        " Line": 763
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "addDays implements method in ReadWritableDateTime; expected @Override",
        " Code": "    public void addDays(final int days) {",
        " Mark": "                ^",
        " Line": 773
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setHourOfDay implements method in ReadWritableDateTime; expected @Override",
        " Code": "    public void setHourOfDay(final int hourOfDay) {",
        " Mark": "                ^",
        " Line": 786
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "addHours implements method in ReadWritableDateTime; expected @Override",
        " Code": "    public void addHours(final int hours) {",
        " Mark": "                ^",
        " Line": 796
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setMinuteOfDay implements method in ReadWritableDateTime; expected @Override",
        " Code": "    public void setMinuteOfDay(final int minuteOfDay) {",
        " Mark": "                ^",
        " Line": 809
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setMinuteOfHour implements method in ReadWritableDateTime; expected @Override",
        " Code": "    public void setMinuteOfHour(final int minuteOfHour) {",
        " Mark": "                ^",
        " Line": 819
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "addMinutes implements method in ReadWritableDateTime; expected @Override",
        " Code": "    public void addMinutes(final int minutes) {",
        " Mark": "                ^",
        " Line": 829
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setSecondOfDay implements method in ReadWritableDateTime; expected @Override",
        " Code": "    public void setSecondOfDay(final int secondOfDay) {",
        " Mark": "                ^",
        " Line": 842
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setSecondOfMinute implements method in ReadWritableDateTime; expected @Override",
        " Code": "    public void setSecondOfMinute(final int secondOfMinute) {",
        " Mark": "                ^",
        " Line": 852
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "addSeconds implements method in ReadWritableDateTime; expected @Override",
        " Code": "    public void addSeconds(final int seconds) {",
        " Mark": "                ^",
        " Line": 862
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setMillisOfDay implements method in ReadWritableDateTime; expected @Override",
        " Code": "    public void setMillisOfDay(final int millisOfDay) {",
        " Mark": "                ^",
        " Line": 875
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setMillisOfSecond implements method in ReadWritableDateTime; expected @Override",
        " Code": "    public void setMillisOfSecond(final int millisOfSecond) {",
        " Mark": "                ^",
        " Line": 885
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "addMillis implements method in ReadWritableDateTime; expected @Override",
        " Code": "    public void addMillis(final int millis) {",
        " Mark": "                ^",
        " Line": 897
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setDate implements method in ReadWritableDateTime; expected @Override",
        " Code": "    public void setDate(",
        " Mark": "                ^",
        " Line": 947
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setTime implements method in ReadWritableDateTime; expected @Override",
        " Code": "    public void setTime(",
        " Mark": "                ^",
        " Line": 996
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "setDateTime implements method in ReadWritableDateTime; expected @Override",
        " Code": "    public void setDateTime(",
        " Mark": "                ^",
        " Line": 1018
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "clone overrides method in Object; expected @Override",
        " Code": "    public Object clone() {",
        " Mark": "                  ^",
        " Line": 1234
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString overrides method in AbstractInstant; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 1248
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getField implements method in AbstractReadableInstantFieldProperty; expected @Override",
        " Code": "        public DateTimeField getField() {",
        " Mark": "                             ^",
        " Line": 1317
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMillis implements method in AbstractReadableInstantFieldProperty; expected @Override",
        " Code": "        protected long getMillis() {",
        " Mark": "                       ^",
        " Line": 1326
    },
    {
        " Proj": "Time-3",
        "Class": "org.joda.time.MutableDateTime",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getChronology overrides method in AbstractReadableInstantFieldProperty; expected @Override",
        " Code": "        protected Chronology getChronology() {",
        " Mark": "                             ^",
        " Line": 1336
    },
    {
        " Proj": "Time-4",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "size implements method in ReadablePartial; expected @Override",
        " Code": "    public int size() {",
        " Mark": "               ^",
        " Line": 308
    },
    {
        " Proj": "Time-4",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getChronology implements method in ReadablePartial; expected @Override",
        " Code": "    public Chronology getChronology() {",
        " Mark": "                      ^",
        " Line": 320
    },
    {
        " Proj": "Time-4",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getField implements method in AbstractPartial; expected @Override",
        " Code": "    protected DateTimeField getField(int index, Chronology chrono) {",
        " Mark": "                            ^",
        " Line": 332
    },
    {
        " Proj": "Time-4",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getFieldType overrides method in AbstractPartial; expected @Override",
        " Code": "    public DateTimeFieldType getFieldType(int index) {",
        " Mark": "                             ^",
        " Line": 343
    },
    {
        " Proj": "Time-4",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getFieldTypes overrides method in AbstractPartial; expected @Override",
        " Code": "    public DateTimeFieldType[] getFieldTypes() {",
        " Mark": "                               ^",
        " Line": 355
    },
    {
        " Proj": "Time-4",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getValue implements method in ReadablePartial; expected @Override",
        " Code": "    public int getValue(int index) {",
        " Mark": "               ^",
        " Line": 367
    },
    {
        " Proj": "Time-4",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getValues overrides method in AbstractPartial; expected @Override",
        " Code": "    public int[] getValues() {",
        " Mark": "                 ^",
        " Line": 380
    },
    {
        " Proj": "Time-4",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString implements method in ReadablePartial; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 737
    },
    {
        " Proj": "Time-4",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getField implements method in AbstractPartialFieldProperty; expected @Override",
        " Code": "        public DateTimeField getField() {",
        " Mark": "                             ^",
        " Line": 843
    },
    {
        " Proj": "Time-4",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getReadablePartial implements method in AbstractPartialFieldProperty; expected @Override",
        " Code": "        protected ReadablePartial getReadablePartial() {",
        " Mark": "                                  ^",
        " Line": 852
    },
    {
        " Proj": "Time-4",
        "Class": "org.joda.time.Partial",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "get implements method in AbstractPartialFieldProperty; expected @Override",
        " Code": "        public int get() {",
        " Mark": "                   ^",
        " Line": 870
    },
    {
        " Proj": "Time-5",
        "Class": "org.joda.time.Period",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toPeriod overrides method in AbstractPeriod; expected @Override",
        " Code": "    public Period toPeriod() {",
        " Mark": "                  ^",
        " Line": 726
    },
    {
        " Proj": "Time-5",
        "Class": "org.joda.time.Period",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (this == ZERO || scalar == 1) {",
        " Mark": "                 ^",
        " Line": 1334
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "            if (zone == DateTimeZone.UTC) {",
        " Mark": "                     ^",
        " Line": 218
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getZone overrides method in AssembledChronology; expected @Override",
        " Code": "    public DateTimeZone getZone() {",
        " Mark": "                        ^",
        " Line": 294
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "withUTC implements method in BaseChronology; expected @Override",
        " Code": "    public Chronology withUTC() {",
        " Mark": "                      ^",
        " Line": 309
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "withZone implements method in BaseChronology; expected @Override",
        " Code": "    public Chronology withZone(DateTimeZone zone) {",
        " Mark": "                      ^",
        " Line": 319
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (zone == getZone()) {",
        " Mark": "                 ^",
        " Line": 323
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDateTimeMillis overrides method in AssembledChronology; expected @Override",
        " Code": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,",
        " Mark": "                ^",
        " Line": 329
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDateTimeMillis overrides method in AssembledChronology; expected @Override",
        " Code": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,",
        " Mark": "                ^",
        " Line": 353
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "    public boolean equals(Object obj) {",
        " Mark": "                   ^",
        " Line": 420
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Object; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 439
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString implements method in BaseChronology; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 451
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "assemble implements method in AssembledChronology; expected @Override",
        " Code": "    protected void assemble(Fields fields) {",
        " Mark": "                   ^",
        " Line": 477
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isLenient implements method in DateTimeField; expected @Override",
        " Code": "        public boolean isLenient() {",
        " Mark": "                       ^",
        " Line": 652
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "get implements method in BaseDateTimeField; expected @Override",
        " Code": "        public int get(long instant) {",
        " Mark": "                   ^",
        " Line": 656
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getAsText overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public String getAsText(long instant, Locale locale) {",
        " Mark": "                      ^",
        " Line": 664
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getAsText overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public String getAsText(int fieldValue, Locale locale) {",
        " Mark": "                      ^",
        " Line": 672
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getAsShortText overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public String getAsShortText(long instant, Locale locale) {",
        " Mark": "                      ^",
        " Line": 676
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getAsShortText overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public String getAsShortText(int fieldValue, Locale locale) {",
        " Mark": "                      ^",
        " Line": 684
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public long add(long instant, int value) {",
        " Mark": "                    ^",
        " Line": 688
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public long add(long instant, long value) {",
        " Mark": "                    ^",
        " Line": 692
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {",
        " Mark": "                     ^",
        " Line": 696
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDifference overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public int getDifference(long minuendInstant, long subtrahendInstant) {",
        " Mark": "                   ^",
        " Line": 714
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDifferenceAsLong overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {",
        " Mark": "                    ^",
        " Line": 718
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "set implements method in BaseDateTimeField; expected @Override",
        " Code": "        public long set(long instant, int value) {",
        " Mark": "                    ^",
        " Line": 722
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "set overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public long set(long instant, String text, Locale locale) {",
        " Mark": "                    ^",
        " Line": 753
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDurationField implements method in BaseDateTimeField; expected @Override",
        " Code": "        public DurationField getDurationField() {",
        " Mark": "                             ^",
        " Line": 776
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getRangeDurationField implements method in BaseDateTimeField; expected @Override",
        " Code": "        public DurationField getRangeDurationField() {",
        " Mark": "                             ^",
        " Line": 780
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "isLeap overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public boolean isLeap(long instant) {",
        " Mark": "                       ^",
        " Line": 784
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLeapAmount overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public int getLeapAmount(long instant) {",
        " Mark": "                   ^",
        " Line": 792
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getLeapDurationField overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public DurationField getLeapDurationField() {",
        " Mark": "                             ^",
        " Line": 800
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMinimumValue implements method in BaseDateTimeField; expected @Override",
        " Code": "        public int getMinimumValue() {",
        " Mark": "                   ^",
        " Line": 805
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMinimumValue overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public int getMinimumValue(ReadablePartial partial) {",
        " Mark": "                   ^",
        " Line": 811
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMinimumValue overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public int getMinimumValue(ReadablePartial partial, int[] values) {",
        " Mark": "                   ^",
        " Line": 815
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMinimumValue overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public int getMinimumValue(long instant) {",
        " Mark": "                   ^",
        " Line": 819
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMaximumValue implements method in BaseDateTimeField; expected @Override",
        " Code": "        public int getMaximumValue() {",
        " Mark": "                   ^",
        " Line": 836
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMaximumValue overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public int getMaximumValue(long instant) {",
        " Mark": "                   ^",
        " Line": 842
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMaximumValue overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public int getMaximumValue(ReadablePartial partial) {",
        " Mark": "                   ^",
        " Line": 859
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMaximumValue overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public int getMaximumValue(ReadablePartial partial, int[] values) {",
        " Mark": "                   ^",
        " Line": 864
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "roundFloor implements method in BaseDateTimeField; expected @Override",
        " Code": "        public long roundFloor(long instant) {",
        " Mark": "                    ^",
        " Line": 876
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "roundCeiling overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public long roundCeiling(long instant) {",
        " Mark": "                    ^",
        " Line": 891
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMaximumTextLength overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public int getMaximumTextLength(Locale locale) {",
        " Mark": "                   ^",
        " Line": 906
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMaximumShortTextLength overrides method in BaseDateTimeField; expected @Override",
        " Code": "        public int getMaximumShortTextLength(Locale locale) {",
        " Mark": "                   ^",
        " Line": 911
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add overrides method in CutoverField; expected @Override",
        " Code": "        public long add(long instant, int value) {",
        " Mark": "                    ^",
        " Line": 977
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add overrides method in CutoverField; expected @Override",
        " Code": "        public long add(long instant, long value) {",
        " Mark": "                    ^",
        " Line": 1010
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDifference overrides method in CutoverField; expected @Override",
        " Code": "        public int getDifference(long minuendInstant, long subtrahendInstant) {",
        " Mark": "                   ^",
        " Line": 1043
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDifferenceAsLong overrides method in CutoverField; expected @Override",
        " Code": "        public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {",
        " Mark": "                    ^",
        " Line": 1063
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMinimumValue overrides method in CutoverField; expected @Override",
        " Code": "        public int getMinimumValue(long instant) {",
        " Mark": "                   ^",
        " Line": 1093
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getMaximumValue overrides method in CutoverField; expected @Override",
        " Code": "        public int getMaximumValue(long instant) {",
        " Mark": "                   ^",
        " Line": 1101
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add overrides method in DecoratedDurationField; expected @Override",
        " Code": "        public long add(long instant, int value) {",
        " Mark": "                    ^",
        " Line": 1124
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "add overrides method in DecoratedDurationField; expected @Override",
        " Code": "        public long add(long instant, long value) {",
        " Mark": "                    ^",
        " Line": 1128
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDifference overrides method in BaseDurationField; expected @Override",
        " Code": "        public int getDifference(long minuendInstant, long subtrahendInstant) {",
        " Mark": "                   ^",
        " Line": 1132
    },
    {
        " Proj": "Time-6",
        "Class": "org.joda.time.chrono.GJChronology",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getDifferenceAsLong overrides method in DecoratedDurationField; expected @Override",
        " Code": "        public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {",
        " Mark": "                    ^",
        " Line": 1136
    },
    {
        " Proj": "Time-7",
        "Class": "org.joda.time.format.DateTimeFormatter",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {",
        " Mark": "                   ^",
        " Line": 190
    },
    {
        " Proj": "Time-7",
        "Class": "org.joda.time.format.DateTimeFormatter",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (iZone == zone) {",
        " Mark": "                  ^",
        " Line": 322
    },
    {
        " Proj": "Time-7",
        "Class": "org.joda.time.format.DateTimeFormatter",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (iPivotYear == pivotYear || (iPivotYear != null && iPivotYear.equals(pivotYear))) {",
        " Mark": "                       ^",
        " Line": 369
    },
    {
        " Proj": "Time-8",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "ClassNewInstance",
        "  Msg": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
        " Code": "                    provider = (Provider) Class.forName(providerClass).newInstance();",
        " Mark": "                                                                                  ^",
        " Line": 478
    },
    {
        " Proj": "Time-8",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "ClassNewInstance",
        "  Msg": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
        " Code": "                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();",
        " Mark": "                                                                                          ^",
        " Line": 562
    },
    {
        " Proj": "Time-8",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getZone implements method in BaseChronology; expected @Override",
        " Code": "            public DateTimeZone getZone() {",
        " Mark": "                                ^",
        " Line": 633
    },
    {
        " Proj": "Time-8",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "withUTC implements method in BaseChronology; expected @Override",
        " Code": "            public Chronology withUTC() {",
        " Mark": "                              ^",
        " Line": 636
    },
    {
        " Proj": "Time-8",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "withZone implements method in BaseChronology; expected @Override",
        " Code": "            public Chronology withZone(DateTimeZone zone) {",
        " Mark": "                              ^",
        " Line": 639
    },
    {
        " Proj": "Time-8",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString implements method in BaseChronology; expected @Override",
        " Code": "            public String toString() {",
        " Mark": "                          ^",
        " Line": 642
    },
    {
        " Proj": "Time-8",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (newZone == this) {",
        " Mark": "                    ^",
        " Line": 1057
    },
    {
        " Proj": "Time-8",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "    public abstract boolean equals(Object object);",
        " Mark": "                            ^",
        " Line": 1268
    },
    {
        " Proj": "Time-8",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Object; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 1275
    },
    {
        " Proj": "Time-8",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString overrides method in Object; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 1283
    },
    {
        " Proj": "Time-9",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "ClassNewInstance",
        "  Msg": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
        " Code": "                    provider = (Provider) Class.forName(providerClass).newInstance();",
        " Mark": "                                                                                  ^",
        " Line": 457
    },
    {
        " Proj": "Time-9",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "ClassNewInstance",
        "  Msg": "Class.newInstance() bypasses exception checking; prefer getDeclaredConstructor().newInstance()",
        " Code": "                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();",
        " Mark": "                                                                                          ^",
        " Line": 541
    },
    {
        " Proj": "Time-9",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "getZone implements method in BaseChronology; expected @Override",
        " Code": "            public DateTimeZone getZone() {",
        " Mark": "                                ^",
        " Line": 612
    },
    {
        " Proj": "Time-9",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "withUTC implements method in BaseChronology; expected @Override",
        " Code": "            public Chronology withUTC() {",
        " Mark": "                              ^",
        " Line": 615
    },
    {
        " Proj": "Time-9",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "withZone implements method in BaseChronology; expected @Override",
        " Code": "            public Chronology withZone(DateTimeZone zone) {",
        " Mark": "                              ^",
        " Line": 618
    },
    {
        " Proj": "Time-9",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString implements method in BaseChronology; expected @Override",
        " Code": "            public String toString() {",
        " Mark": "                          ^",
        " Line": 621
    },
    {
        " Proj": "Time-9",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "ReferenceEquality",
        "  Msg": "Comparison using reference equality instead of value equality",
        " Code": "        if (newZone == this) {",
        " Mark": "                    ^",
        " Line": 1036
    },
    {
        " Proj": "Time-9",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "equals overrides method in Object; expected @Override",
        " Code": "    public abstract boolean equals(Object object);",
        " Mark": "                            ^",
        " Line": 1247
    },
    {
        " Proj": "Time-9",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "hashCode overrides method in Object; expected @Override",
        " Code": "    public int hashCode() {",
        " Mark": "               ^",
        " Line": 1254
    },
    {
        " Proj": "Time-9",
        "Class": "org.joda.time.DateTimeZone",
        " Type": "warning",
        "  Cat": "MissingOverride",
        "  Msg": "toString overrides method in Object; expected @Override",
        " Code": "    public String toString() {",
        " Mark": "                  ^",
        " Line": 1262
    }
]