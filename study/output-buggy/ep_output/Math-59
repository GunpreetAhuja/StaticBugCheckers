/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:27: warning: [FloatingPointLiteralPrecision] Floating point literal loses precision
    public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;
                                                               ^
    (see http://errorprone.info/bugpattern/FloatingPointLiteralPrecision)
  Did you mean 'public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361081E-9;'?
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:30: warning: [FloatingPointLiteralPrecision] Floating point literal loses precision
    public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;
                                                           ^
    (see http://errorprone.info/bugpattern/FloatingPointLiteralPrecision)
  Did you mean 'public static final double E = 2850325.0 / 1048576.0 + 8.254840070411029E-8;'?
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:59: warning: [FloatingPointLiteralPrecision] Floating point literal loses precision
    private static final double LN_2_A = 0.693147063255310059;
                                         ^
    (see http://errorprone.info/bugpattern/FloatingPointLiteralPrecision)
  Did you mean 'private static final double LN_2_A = 0.6931470632553101;'?
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:62: warning: [FloatingPointLiteralPrecision] Floating point literal loses precision
    private static final double LN_2_B = 1.17304635250823482e-7;
                                         ^
    (see http://errorprone.info/bugpattern/FloatingPointLiteralPrecision)
  Did you mean 'private static final double LN_2_B = 1.1730463525082348E-7;'?
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:227: error: [IdentityBinaryExpression] A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.
      if (x != x) {
            ^
    (see http://errorprone.info/bugpattern/IdentityBinaryExpression)
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:282: error: [IdentityBinaryExpression] A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.
      if (x != x) {
            ^
    (see http://errorprone.info/bugpattern/IdentityBinaryExpression)
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:393: error: [IdentityBinaryExpression] A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.
      if (x != x) {
            ^
    (see http://errorprone.info/bugpattern/IdentityBinaryExpression)
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:663: warning: [FloatingPointLiteralPrecision] Floating point literal loses precision
                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
                                                                          ^
    (see http://errorprone.info/bugpattern/FloatingPointLiteralPrecision)
  Did you mean 'final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692757;'?
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:665: warning: [FloatingPointLiteralPrecision] Floating point literal loses precision
                    hiPrec[0] /= 4.455505956692756620;
                                 ^
    (see http://errorprone.info/bugpattern/FloatingPointLiteralPrecision)
  Did you mean 'hiPrec[0] /= 4.455505956692757;'?
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:666: warning: [FloatingPointLiteralPrecision] Floating point literal loses precision
                    hiPrec[1] /= 4.455505956692756620;
                                 ^
    (see http://errorprone.info/bugpattern/FloatingPointLiteralPrecision)
  Did you mean 'hiPrec[1] /= 4.455505956692757;'?
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:762: error: [IdentityBinaryExpression] A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.
        if (x != x || x == 0.0) { // NaN or zero
              ^
    (see http://errorprone.info/bugpattern/IdentityBinaryExpression)
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:950: warning: [FloatingPointLiteralPrecision] Floating point literal loses precision
            final double a = d * 9.31322574615478515625E-10;
                                 ^
    (see http://errorprone.info/bugpattern/FloatingPointLiteralPrecision)
  Did you mean 'final double a = d * 9.313225746154785E-10;'?
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:969: warning: [FloatingPointLiteralPrecision] Floating point literal loses precision
            double z = c * 9.31322574615478515625E-10;
                           ^
    (see http://errorprone.info/bugpattern/FloatingPointLiteralPrecision)
  Did you mean 'double z = c * 9.313225746154785E-10;'?
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:1030: error: [IdentityBinaryExpression] A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(result[1])`.
        if (result[1] != result[1]) { // can happen if result[1] is NAN
                      ^
    (see http://errorprone.info/bugpattern/IdentityBinaryExpression)
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:1168: error: [IdentityBinaryExpression] A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.
        if ((bits & 0x8000000000000000L) != 0 || x != x) {
                                                   ^
    (see http://errorprone.info/bugpattern/IdentityBinaryExpression)
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:1455: error: [IdentityBinaryExpression] A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.
        if (x != x) { // X is NaN
              ^
    (see http://errorprone.info/bugpattern/IdentityBinaryExpression)
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:1490: error: [IdentityBinaryExpression] A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(y)`.
            if (y != y) { // y is NaN
                  ^
    (see http://errorprone.info/bugpattern/IdentityBinaryExpression)
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:1512: error: [IdentityBinaryExpression] A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(y)`.
            if (y != y) { // y is NaN
                  ^
    (see http://errorprone.info/bugpattern/IdentityBinaryExpression)
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:1571: warning: [FloatingPointLiteralPrecision] Floating point literal loses precision
            double tmp1 = y * 9.31322574615478515625E-10;
                              ^
    (see http://errorprone.info/bugpattern/FloatingPointLiteralPrecision)
  Did you mean 'double tmp1 = y * 9.313225746154785E-10;'?
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:1572: warning: [FloatingPointLiteralPrecision] Floating point literal loses precision
            double tmp2 = tmp1 * 9.31322574615478515625E-10;
                                 ^
    (see http://errorprone.info/bugpattern/FloatingPointLiteralPrecision)
  Did you mean 'double tmp2 = tmp1 * 9.313225746154785E-10;'?
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:2427: error: [IdentityBinaryExpression] A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(xa)`.
        if (xa != xa || xa == Double.POSITIVE_INFINITY) {
               ^
    (see http://errorprone.info/bugpattern/IdentityBinaryExpression)
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:2511: error: [IdentityBinaryExpression] A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(xa)`.
        if (xa != xa || xa == Double.POSITIVE_INFINITY) {
               ^
    (see http://errorprone.info/bugpattern/IdentityBinaryExpression)
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:2606: error: [IdentityBinaryExpression] A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(xa)`.
        if (xa != xa || xa == Double.POSITIVE_INFINITY) {
               ^
    (see http://errorprone.info/bugpattern/IdentityBinaryExpression)
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:2720: warning: [FloatingPointLiteralPrecision] Floating point literal loses precision
            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);
                            ^
    (see http://errorprone.info/bugpattern/FloatingPointLiteralPrecision)
  Did you mean 'idx = (int) (((-1.7168146928204135 * xa * xa + 8.0) * xa) + 0.5);'?
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:2723: warning: [FloatingPointLiteralPrecision] Floating point literal loses precision
            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);
                             ^
    (see http://errorprone.info/bugpattern/FloatingPointLiteralPrecision)
  Did you mean 'idx = (int) (-((-1.7168146928204135 * temp * temp + 8.0) * temp) + 13.07);'?
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:2850: error: [IdentityBinaryExpression] A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.
        if (x !=x || y != y) {
              ^
    (see http://errorprone.info/bugpattern/IdentityBinaryExpression)
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:2850: error: [IdentityBinaryExpression] A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(y)`.
        if (x !=x || y != y) {
                       ^
    (see http://errorprone.info/bugpattern/IdentityBinaryExpression)
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:2867: error: [IdentityBinaryExpression] A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(result)`.
            if (result != result) { // y must be infinite
                       ^
    (see http://errorprone.info/bugpattern/IdentityBinaryExpression)
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:2938: warning: [FloatingPointLiteralPrecision] Floating point literal loses precision
            x *= 9.31322574615478515625E-10;
                 ^
    (see http://errorprone.info/bugpattern/FloatingPointLiteralPrecision)
  Did you mean 'x *= 9.313225746154785E-10;'?
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:2939: warning: [FloatingPointLiteralPrecision] Floating point literal loses precision
            y *= 9.31322574615478515625E-10;
                 ^
    (see http://errorprone.info/bugpattern/FloatingPointLiteralPrecision)
  Did you mean 'y *= 9.313225746154785E-10;'?
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:2970: error: [IdentityBinaryExpression] A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.
      if (x != x) {
            ^
    (see http://errorprone.info/bugpattern/IdentityBinaryExpression)
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:3042: error: [IdentityBinaryExpression] A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.
      if (x != x) {
            ^
    (see http://errorprone.info/bugpattern/IdentityBinaryExpression)
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:3341: error: [IdentityBinaryExpression] A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.
        if (x != x) { // NaN
              ^
    (see http://errorprone.info/bugpattern/IdentityBinaryExpression)
/Users/stylethinking/Documents/StaticBugCheckers/defects4j/projects/b/Math-59/src/main/java/org/apache/commons/math/util/FastMath.java:3368: error: [IdentityBinaryExpression] A binary expression where both operands are the same is usually incorrect; the value of this expression is equivalent to `!Double.isNan(x)`.
        if (x != x) { // NaN
              ^
    (see http://errorprone.info/bugpattern/IdentityBinaryExpression)
19 errors
15 warnings
